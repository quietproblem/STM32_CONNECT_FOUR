
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072d8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001230  08007488  08007488  00008488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086b8  080086b8  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  080086b8  080086b8  000096b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086c0  080086c0  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086c0  080086c0  000096c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086c4  080086c4  000096c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080086c8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a06c  2**0
                  CONTENTS
 10 .bss          00025dac  2000006c  2000006c  0000a06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025e18  20025e18  0000a06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000140a9  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033c6  00000000  00000000  0001e145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00021510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fb7  00000000  00000000  00022980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272eb  00000000  00000000  00023937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001990a  00000000  00000000  0004ac22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2e8b  00000000  00000000  0006452c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001473b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a04  00000000  00000000  001473fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  0014ce00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007470 	.word	0x08007470

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08007470 	.word	0x08007470

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 8000584:	f002 fe1e 	bl	80031c4 <initialise_monitor_handles>
	buttonInitInterrupt();
 8000588:	f000 fdac 	bl	80010e4 <buttonInitInterrupt>
	RNG_Init();
 800058c:	f000 f814 	bl	80005b8 <RNG_Init>
	LTCD__Init();
 8000590:	f000 ff34 	bl	80013fc <LTCD__Init>
	LTCD_Layer_Init(0);
 8000594:	2000      	movs	r0, #0
 8000596:	f000 fef1 	bl	800137c <LTCD_Layer_Init>
	LCD_Clear(0,LCD_COLOR_WHITE);
 800059a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800059e:	2000      	movs	r0, #0
 80005a0:	f001 f82a 	bl	80015f8 <LCD_Clear>

#if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005a4:	f001 f936 	bl	8001814 <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005a8:	4b02      	ldr	r3, [pc, #8]	@ (80005b4 <ApplicationInit+0x34>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	719a      	strb	r2, [r3, #6]

#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000190 	.word	0x20000190

080005b8 <RNG_Init>:


void RNG_Init()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	hrng.Instance = RNG;
 80005bc:	4b03      	ldr	r3, [pc, #12]	@ (80005cc <RNG_Init+0x14>)
 80005be:	4a04      	ldr	r2, [pc, #16]	@ (80005d0 <RNG_Init+0x18>)
 80005c0:	601a      	str	r2, [r3, #0]
	HAL_RNG_Init(&hrng);
 80005c2:	4802      	ldr	r0, [pc, #8]	@ (80005cc <RNG_Init+0x14>)
 80005c4:	f005 fc7c 	bl	8005ec0 <HAL_RNG_Init>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000088 	.word	0x20000088
 80005d0:	50060800 	.word	0x50060800

080005d4 <displayTime>:

void displayTime()
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b098      	sub	sp, #96	@ 0x60
 80005d8:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80005da:	2000      	movs	r0, #0
 80005dc:	f001 f82e 	bl	800163c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80005e0:	48a1      	ldr	r0, [pc, #644]	@ (8000868 <displayTime+0x294>)
 80005e2:	f001 f83b 	bl	800165c <LCD_SetFont>
	LCD_DisplayChar(60,50,'W');
 80005e6:	2257      	movs	r2, #87	@ 0x57
 80005e8:	2132      	movs	r1, #50	@ 0x32
 80005ea:	203c      	movs	r0, #60	@ 0x3c
 80005ec:	f001 f8b4 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(80,50,'I');
 80005f0:	2249      	movs	r2, #73	@ 0x49
 80005f2:	2132      	movs	r1, #50	@ 0x32
 80005f4:	2050      	movs	r0, #80	@ 0x50
 80005f6:	f001 f8af 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(100,50,'N');
 80005fa:	224e      	movs	r2, #78	@ 0x4e
 80005fc:	2132      	movs	r1, #50	@ 0x32
 80005fe:	2064      	movs	r0, #100	@ 0x64
 8000600:	f001 f8aa 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(120,50,'S');
 8000604:	2253      	movs	r2, #83	@ 0x53
 8000606:	2132      	movs	r1, #50	@ 0x32
 8000608:	2078      	movs	r0, #120	@ 0x78
 800060a:	f001 f8a5 	bl	8001758 <LCD_DisplayChar>

	char buffer[30];
	LCD_SetTextColor(LCD_COLOR_YELLOW);
 800060e:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8000612:	f001 f813 	bl	800163c <LCD_SetTextColor>
	LCD_DisplayChar(60,80,'P');
 8000616:	2250      	movs	r2, #80	@ 0x50
 8000618:	2150      	movs	r1, #80	@ 0x50
 800061a:	203c      	movs	r0, #60	@ 0x3c
 800061c:	f001 f89c 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(70,80,'1');
 8000620:	2231      	movs	r2, #49	@ 0x31
 8000622:	2150      	movs	r1, #80	@ 0x50
 8000624:	2046      	movs	r0, #70	@ 0x46
 8000626:	f001 f897 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(80,80,':');
 800062a:	223a      	movs	r2, #58	@ 0x3a
 800062c:	2150      	movs	r1, #80	@ 0x50
 800062e:	2050      	movs	r0, #80	@ 0x50
 8000630:	f001 f892 	bl	8001758 <LCD_DisplayChar>

	sprintf(buffer,"%d",game.player_one_wins);
 8000634:	4b8d      	ldr	r3, [pc, #564]	@ (800086c <displayTime+0x298>)
 8000636:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800063a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800063e:	498c      	ldr	r1, [pc, #560]	@ (8000870 <displayTime+0x29c>)
 8000640:	4618      	mov	r0, r3
 8000642:	f006 fa75 	bl	8006b30 <siprintf>
//	for(int i=0; i<30; i++)
//	{
//		buffer[i]='a';
//	}
	int x_pos=90;
 8000646:	235a      	movs	r3, #90	@ 0x5a
 8000648:	65fb      	str	r3, [r7, #92]	@ 0x5c
	int y_pos=80;
 800064a:	2350      	movs	r3, #80	@ 0x50
 800064c:	653b      	str	r3, [r7, #80]	@ 0x50
	int index=0;
 800064e:	2300      	movs	r3, #0
 8000650:	65bb      	str	r3, [r7, #88]	@ 0x58
	while(buffer[index]!='\0')
 8000652:	e011      	b.n	8000678 <displayTime+0xa4>
	{
		LCD_DisplayChar(x_pos, y_pos,buffer[index]);
 8000654:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000656:	b298      	uxth	r0, r3
 8000658:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800065a:	b299      	uxth	r1, r3
 800065c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000660:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000662:	4413      	add	r3, r2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	461a      	mov	r2, r3
 8000668:	f001 f876 	bl	8001758 <LCD_DisplayChar>
		index++;
 800066c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800066e:	3301      	adds	r3, #1
 8000670:	65bb      	str	r3, [r7, #88]	@ 0x58
		x_pos+=15;
 8000672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000674:	330f      	adds	r3, #15
 8000676:	65fb      	str	r3, [r7, #92]	@ 0x5c
	while(buffer[index]!='\0')
 8000678:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800067c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800067e:	4413      	add	r3, r2
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1e6      	bne.n	8000654 <displayTime+0x80>
	}

	char buffer1[30];
	LCD_SetTextColor(LCD_COLOR_RED);
 8000686:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800068a:	f000 ffd7 	bl	800163c <LCD_SetTextColor>
	LCD_DisplayChar(60,110,'P');
 800068e:	2250      	movs	r2, #80	@ 0x50
 8000690:	216e      	movs	r1, #110	@ 0x6e
 8000692:	203c      	movs	r0, #60	@ 0x3c
 8000694:	f001 f860 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(70,110,'2');
 8000698:	2232      	movs	r2, #50	@ 0x32
 800069a:	216e      	movs	r1, #110	@ 0x6e
 800069c:	2046      	movs	r0, #70	@ 0x46
 800069e:	f001 f85b 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(80,110,':');
 80006a2:	223a      	movs	r2, #58	@ 0x3a
 80006a4:	216e      	movs	r1, #110	@ 0x6e
 80006a6:	2050      	movs	r0, #80	@ 0x50
 80006a8:	f001 f856 	bl	8001758 <LCD_DisplayChar>


	sprintf(buffer1,"%d",game.player_two_wins);
 80006ac:	4b6f      	ldr	r3, [pc, #444]	@ (800086c <displayTime+0x298>)
 80006ae:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	496e      	ldr	r1, [pc, #440]	@ (8000870 <displayTime+0x29c>)
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 fa3a 	bl	8006b30 <siprintf>
//	for(int i=0; i<30; i++)
//	{
//		buffer[i]='a';
//	}
	x_pos=90;
 80006bc:	235a      	movs	r3, #90	@ 0x5a
 80006be:	65fb      	str	r3, [r7, #92]	@ 0x5c
	y_pos=110;
 80006c0:	236e      	movs	r3, #110	@ 0x6e
 80006c2:	653b      	str	r3, [r7, #80]	@ 0x50
	index=0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	65bb      	str	r3, [r7, #88]	@ 0x58
	while(buffer1[index]!='\0')
 80006c8:	e010      	b.n	80006ec <displayTime+0x118>
	{
		LCD_DisplayChar(x_pos, y_pos,buffer1[index]);
 80006ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80006cc:	b298      	uxth	r0, r3
 80006ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80006d0:	b299      	uxth	r1, r3
 80006d2:	1d3a      	adds	r2, r7, #4
 80006d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006d6:	4413      	add	r3, r2
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	f001 f83c 	bl	8001758 <LCD_DisplayChar>
		index++;
 80006e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006e2:	3301      	adds	r3, #1
 80006e4:	65bb      	str	r3, [r7, #88]	@ 0x58
		x_pos+=15;
 80006e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80006e8:	330f      	adds	r3, #15
 80006ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
	while(buffer1[index]!='\0')
 80006ec:	1d3a      	adds	r2, r7, #4
 80006ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1e8      	bne.n	80006ca <displayTime+0xf6>


//	LCD_DisplayChar(60,100,'T');
//	LCD_DisplayChar(80,100,'I');
//	LCD_DisplayChar(100,100,'M');
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 ff9f 	bl	800163c <LCD_SetTextColor>
	LCD_DisplayChar(60,150,'T');
 80006fe:	2254      	movs	r2, #84	@ 0x54
 8000700:	2196      	movs	r1, #150	@ 0x96
 8000702:	203c      	movs	r0, #60	@ 0x3c
 8000704:	f001 f828 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(80,150,'I');
 8000708:	2249      	movs	r2, #73	@ 0x49
 800070a:	2196      	movs	r1, #150	@ 0x96
 800070c:	2050      	movs	r0, #80	@ 0x50
 800070e:	f001 f823 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(100,150,'M');
 8000712:	224d      	movs	r2, #77	@ 0x4d
 8000714:	2196      	movs	r1, #150	@ 0x96
 8000716:	2064      	movs	r0, #100	@ 0x64
 8000718:	f001 f81e 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(120,150,'E');
 800071c:	2245      	movs	r2, #69	@ 0x45
 800071e:	2196      	movs	r1, #150	@ 0x96
 8000720:	2078      	movs	r0, #120	@ 0x78
 8000722:	f001 f819 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(135,150,'R');
 8000726:	2252      	movs	r2, #82	@ 0x52
 8000728:	2196      	movs	r1, #150	@ 0x96
 800072a:	2087      	movs	r0, #135	@ 0x87
 800072c:	f001 f814 	bl	8001758 <LCD_DisplayChar>

	for(int i=0; i<30; i++)
 8000730:	2300      	movs	r3, #0
 8000732:	657b      	str	r3, [r7, #84]	@ 0x54
 8000734:	e008      	b.n	8000748 <displayTime+0x174>
	{
		buffer[i]='a';
 8000736:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800073a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800073c:	4413      	add	r3, r2
 800073e:	2261      	movs	r2, #97	@ 0x61
 8000740:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<30; i++)
 8000742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000744:	3301      	adds	r3, #1
 8000746:	657b      	str	r3, [r7, #84]	@ 0x54
 8000748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800074a:	2b1d      	cmp	r3, #29
 800074c:	ddf3      	ble.n	8000736 <displayTime+0x162>
	}
	game.end_time=HAL_GetTick()/1000;
 800074e:	f002 fe19 	bl	8003384 <HAL_GetTick>
 8000752:	4603      	mov	r3, r0
 8000754:	4a47      	ldr	r2, [pc, #284]	@ (8000874 <displayTime+0x2a0>)
 8000756:	fba2 2303 	umull	r2, r3, r2, r3
 800075a:	099b      	lsrs	r3, r3, #6
 800075c:	461a      	mov	r2, r3
 800075e:	4b43      	ldr	r3, [pc, #268]	@ (800086c <displayTime+0x298>)
 8000760:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	int game_duration=game.end_time-game.old_time;
 8000764:	4b41      	ldr	r3, [pc, #260]	@ (800086c <displayTime+0x298>)
 8000766:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800076a:	4b40      	ldr	r3, [pc, #256]	@ (800086c <displayTime+0x298>)
 800076c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	64fb      	str	r3, [r7, #76]	@ 0x4c
	int minute=game_duration/60;
 8000774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000776:	4a40      	ldr	r2, [pc, #256]	@ (8000878 <displayTime+0x2a4>)
 8000778:	fb82 1203 	smull	r1, r2, r2, r3
 800077c:	441a      	add	r2, r3
 800077e:	1152      	asrs	r2, r2, #5
 8000780:	17db      	asrs	r3, r3, #31
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	64bb      	str	r3, [r7, #72]	@ 0x48
	int second=game_duration%60;
 8000786:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000788:	4b3b      	ldr	r3, [pc, #236]	@ (8000878 <displayTime+0x2a4>)
 800078a:	fb83 1302 	smull	r1, r3, r3, r2
 800078e:	4413      	add	r3, r2
 8000790:	1159      	asrs	r1, r3, #5
 8000792:	17d3      	asrs	r3, r2, #31
 8000794:	1ac9      	subs	r1, r1, r3
 8000796:	460b      	mov	r3, r1
 8000798:	011b      	lsls	r3, r3, #4
 800079a:	1a5b      	subs	r3, r3, r1
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	647b      	str	r3, [r7, #68]	@ 0x44

	if(second<10)
 80007a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007a4:	2b09      	cmp	r3, #9
 80007a6:	dc07      	bgt.n	80007b8 <displayTime+0x1e4>
	{
		sprintf(buffer,"%d:0%d",minute,second);
 80007a8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80007ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80007b0:	4932      	ldr	r1, [pc, #200]	@ (800087c <displayTime+0x2a8>)
 80007b2:	f006 f9bd 	bl	8006b30 <siprintf>
 80007b6:	e006      	b.n	80007c6 <displayTime+0x1f2>
	} else {
		sprintf(buffer,"%d:%d",minute,second);
 80007b8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80007bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80007c0:	492f      	ldr	r1, [pc, #188]	@ (8000880 <displayTime+0x2ac>)
 80007c2:	f006 f9b5 	bl	8006b30 <siprintf>
	}


	x_pos=60;
 80007c6:	233c      	movs	r3, #60	@ 0x3c
 80007c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	y_pos=170;
 80007ca:	23aa      	movs	r3, #170	@ 0xaa
 80007cc:	653b      	str	r3, [r7, #80]	@ 0x50
	index=0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	65bb      	str	r3, [r7, #88]	@ 0x58
	while(buffer[index]!='\0')
 80007d2:	e011      	b.n	80007f8 <displayTime+0x224>
	{
		LCD_DisplayChar(x_pos, y_pos,buffer[index]);
 80007d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80007d6:	b298      	uxth	r0, r3
 80007d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80007da:	b299      	uxth	r1, r3
 80007dc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80007e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80007e2:	4413      	add	r3, r2
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	f000 ffb6 	bl	8001758 <LCD_DisplayChar>
		index++;
 80007ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80007ee:	3301      	adds	r3, #1
 80007f0:	65bb      	str	r3, [r7, #88]	@ 0x58
		x_pos+=15;
 80007f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80007f4:	330f      	adds	r3, #15
 80007f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
	while(buffer[index]!='\0')
 80007f8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80007fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80007fe:	4413      	add	r3, r2
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d1e6      	bne.n	80007d4 <displayTime+0x200>
	}

	LCD_DisplayChar(60,230,'P');
 8000806:	2250      	movs	r2, #80	@ 0x50
 8000808:	21e6      	movs	r1, #230	@ 0xe6
 800080a:	203c      	movs	r0, #60	@ 0x3c
 800080c:	f000 ffa4 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(80,230,'L');
 8000810:	224c      	movs	r2, #76	@ 0x4c
 8000812:	21e6      	movs	r1, #230	@ 0xe6
 8000814:	2050      	movs	r0, #80	@ 0x50
 8000816:	f000 ff9f 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(100,230,'A');
 800081a:	2241      	movs	r2, #65	@ 0x41
 800081c:	21e6      	movs	r1, #230	@ 0xe6
 800081e:	2064      	movs	r0, #100	@ 0x64
 8000820:	f000 ff9a 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(120,230,'Y');
 8000824:	2259      	movs	r2, #89	@ 0x59
 8000826:	21e6      	movs	r1, #230	@ 0xe6
 8000828:	2078      	movs	r0, #120	@ 0x78
 800082a:	f000 ff95 	bl	8001758 <LCD_DisplayChar>


	LCD_DisplayChar(60,250,'A');
 800082e:	2241      	movs	r2, #65	@ 0x41
 8000830:	21fa      	movs	r1, #250	@ 0xfa
 8000832:	203c      	movs	r0, #60	@ 0x3c
 8000834:	f000 ff90 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(80,250,'G');
 8000838:	2247      	movs	r2, #71	@ 0x47
 800083a:	21fa      	movs	r1, #250	@ 0xfa
 800083c:	2050      	movs	r0, #80	@ 0x50
 800083e:	f000 ff8b 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(100,250,'A');
 8000842:	2241      	movs	r2, #65	@ 0x41
 8000844:	21fa      	movs	r1, #250	@ 0xfa
 8000846:	2064      	movs	r0, #100	@ 0x64
 8000848:	f000 ff86 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(120,250,'I');
 800084c:	2249      	movs	r2, #73	@ 0x49
 800084e:	21fa      	movs	r1, #250	@ 0xfa
 8000850:	2078      	movs	r0, #120	@ 0x78
 8000852:	f000 ff81 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(135,250,'N');
 8000856:	224e      	movs	r2, #78	@ 0x4e
 8000858:	21fa      	movs	r1, #250	@ 0xfa
 800085a:	2087      	movs	r0, #135	@ 0x87
 800085c:	f000 ff7c 	bl	8001758 <LCD_DisplayChar>

}
 8000860:	bf00      	nop
 8000862:	3760      	adds	r7, #96	@ 0x60
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000004 	.word	0x20000004
 800086c:	20000098 	.word	0x20000098
 8000870:	08007488 	.word	0x08007488
 8000874:	10624dd3 	.word	0x10624dd3
 8000878:	88888889 	.word	0x88888889
 800087c:	0800748c 	.word	0x0800748c
 8000880:	08007494 	.word	0x08007494

08000884 <game_init>:


void game_init()
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
	for(int i=0; i<BOARD_COLUMNS;i++)
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	e016      	b.n	80008be <game_init+0x3a>
	{
		for(int j=0; j<BOARD_ROWS; j++)
 8000890:	2300      	movs	r3, #0
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	e00d      	b.n	80008b2 <game_init+0x2e>
		{
			game.board[i][j]=0;
 8000896:	4914      	ldr	r1, [pc, #80]	@ (80008e8 <game_init+0x64>)
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	4613      	mov	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	1a9b      	subs	r3, r3, r2
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	440b      	add	r3, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
		for(int j=0; j<BOARD_ROWS; j++)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	2b05      	cmp	r3, #5
 80008b6:	ddee      	ble.n	8000896 <game_init+0x12>
	for(int i=0; i<BOARD_COLUMNS;i++)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3301      	adds	r3, #1
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2b06      	cmp	r3, #6
 80008c2:	dde5      	ble.n	8000890 <game_init+0xc>
		}
	}
	game.remaining_moves=MAX_MOVES;
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <game_init+0x64>)
 80008c6:	222a      	movs	r2, #42	@ 0x2a
 80008c8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
	game.player_cnt=-1;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <game_init+0x64>)
 80008ce:	f04f 32ff 	mov.w	r2, #4294967295
 80008d2:	601a      	str	r2, [r3, #0]
	game.current_position=3;
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <game_init+0x64>)
 80008d6:	2203      	movs	r2, #3
 80008d8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	20000098 	.word	0x20000098

080008ec <update_game_board>:
void update_game_board()
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0

	int column_position=game.current_position;
 80008f2:	4b33      	ldr	r3, [pc, #204]	@ (80009c0 <update_game_board+0xd4>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	603b      	str	r3, [r7, #0]
	if(game.column_count[column_position]+1>6)
 80008fa:	4a31      	ldr	r2, [pc, #196]	@ (80009c0 <update_game_board+0xd4>)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	332a      	adds	r3, #42	@ 0x2a
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2b05      	cmp	r3, #5
 8000908:	dc52      	bgt.n	80009b0 <update_game_board+0xc4>
	{
		return;
	}
	game.remaining_moves--;
 800090a:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <update_game_board+0xd4>)
 800090c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8000910:	3b01      	subs	r3, #1
 8000912:	4a2b      	ldr	r2, [pc, #172]	@ (80009c0 <update_game_board+0xd4>)
 8000914:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
	game.column_count[column_position]++;
 8000918:	4a29      	ldr	r2, [pc, #164]	@ (80009c0 <update_game_board+0xd4>)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	332a      	adds	r3, #42	@ 0x2a
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	4926      	ldr	r1, [pc, #152]	@ (80009c0 <update_game_board+0xd4>)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	332a      	adds	r3, #42	@ 0x2a
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	440b      	add	r3, r1
 8000930:	605a      	str	r2, [r3, #4]
	int current_row_pos=5;
 8000932:	2305      	movs	r3, #5
 8000934:	607b      	str	r3, [r7, #4]
	while(game.board[current_row_pos][column_position]!=0)
 8000936:	e002      	b.n	800093e <update_game_board+0x52>
	{
		current_row_pos--;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	3b01      	subs	r3, #1
 800093c:	607b      	str	r3, [r7, #4]
	while(game.board[current_row_pos][column_position]!=0)
 800093e:	4920      	ldr	r1, [pc, #128]	@ (80009c0 <update_game_board+0xd4>)
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	4613      	mov	r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	1a9b      	subs	r3, r3, r2
 8000948:	683a      	ldr	r2, [r7, #0]
 800094a:	4413      	add	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	440b      	add	r3, r1
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f0      	bne.n	8000938 <update_game_board+0x4c>
	}
	game.board[current_row_pos][column_position]=game.player;
 8000956:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <update_game_board+0xd4>)
 8000958:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 800095c:	4818      	ldr	r0, [pc, #96]	@ (80009c0 <update_game_board+0xd4>)
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	4613      	mov	r3, r2
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	683a      	ldr	r2, [r7, #0]
 8000968:	4413      	add	r3, r2
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	4403      	add	r3, r0
 800096e:	6059      	str	r1, [r3, #4]
	game.last_drop.row=current_row_pos;
 8000970:	4a13      	ldr	r2, [pc, #76]	@ (80009c0 <update_game_board+0xd4>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
	game.last_drop.column=column_position;
 8000978:	4a11      	ldr	r2, [pc, #68]	@ (80009c0 <update_game_board+0xd4>)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	game.current_position=3;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <update_game_board+0xd4>)
 8000982:	2203      	movs	r2, #3
 8000984:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

	if(game.player==1)
 8000988:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <update_game_board+0xd4>)
 800098a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800098e:	2b01      	cmp	r3, #1
 8000990:	d104      	bne.n	800099c <update_game_board+0xb0>
	{
		game.player=2;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <update_game_board+0xd4>)
 8000994:	2202      	movs	r2, #2
 8000996:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	{
		game.player=1;
	}


	return;
 800099a:	e00b      	b.n	80009b4 <update_game_board+0xc8>
	else if(game.player==2)
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <update_game_board+0xd4>)
 800099e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d106      	bne.n	80009b4 <update_game_board+0xc8>
		game.player=1;
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <update_game_board+0xd4>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	return;
 80009ae:	e001      	b.n	80009b4 <update_game_board+0xc8>
		return;
 80009b0:	bf00      	nop
 80009b2:	e000      	b.n	80009b6 <update_game_board+0xca>
	return;
 80009b4:	bf00      	nop
}
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	20000098 	.word	0x20000098

080009c4 <check_for_win>:

int check_for_win()
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0

	int old_player;

	if(game.player==1)
 80009ca:	4b9f      	ldr	r3, [pc, #636]	@ (8000c48 <check_for_win+0x284>)
 80009cc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d101      	bne.n	80009d8 <check_for_win+0x14>
	{
		old_player=2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	60bb      	str	r3, [r7, #8]
	}

	if(game.player==2)
 80009d8:	4b9b      	ldr	r3, [pc, #620]	@ (8000c48 <check_for_win+0x284>)
 80009da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d101      	bne.n	80009e6 <check_for_win+0x22>
	{
		old_player=1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60bb      	str	r3, [r7, #8]
	}
	int current_count=1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
	int current_row=game.last_drop.row;
 80009ea:	4b97      	ldr	r3, [pc, #604]	@ (8000c48 <check_for_win+0x284>)
 80009ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80009f0:	607b      	str	r3, [r7, #4]
	int current_col=game.last_drop.column;
 80009f2:	4b95      	ldr	r3, [pc, #596]	@ (8000c48 <check_for_win+0x284>)
 80009f4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80009f8:	603b      	str	r3, [r7, #0]
	//work up until different color or boundary

	while(current_row-1>=0&&game.board[current_row-1][current_col]==old_player)
 80009fa:	e005      	b.n	8000a08 <check_for_win+0x44>
	{
		current_count++;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
		current_row--;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3b01      	subs	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
	while(current_row-1>=0&&game.board[current_row-1][current_col]==old_player)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	dd0d      	ble.n	8000a2a <check_for_win+0x66>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	1e5a      	subs	r2, r3, #1
 8000a12:	498d      	ldr	r1, [pc, #564]	@ (8000c48 <check_for_win+0x284>)
 8000a14:	4613      	mov	r3, r2
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	1a9b      	subs	r3, r3, r2
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	440b      	add	r3, r1
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d0e8      	beq.n	80009fc <check_for_win+0x38>
	}

	//reset back to original starting location
	current_row=game.last_drop.row;
 8000a2a:	4b87      	ldr	r3, [pc, #540]	@ (8000c48 <check_for_win+0x284>)
 8000a2c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000a30:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 8000a32:	4b85      	ldr	r3, [pc, #532]	@ (8000c48 <check_for_win+0x284>)
 8000a34:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000a38:	603b      	str	r3, [r7, #0]
	while(current_row+1<=5&&game.board[current_row+1][current_col]==old_player)
 8000a3a:	e005      	b.n	8000a48 <check_for_win+0x84>
	{
		current_count++;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
		current_row++;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3301      	adds	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
	while(current_row+1<=5&&game.board[current_row+1][current_col]==old_player)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	dc0d      	bgt.n	8000a6a <check_for_win+0xa6>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	1c5a      	adds	r2, r3, #1
 8000a52:	497d      	ldr	r1, [pc, #500]	@ (8000c48 <check_for_win+0x284>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	440b      	add	r3, r1
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	68ba      	ldr	r2, [r7, #8]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d0e8      	beq.n	8000a3c <check_for_win+0x78>
	}

	//WIN
	if(current_count>=4)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b03      	cmp	r3, #3
 8000a6e:	dd17      	ble.n	8000aa0 <check_for_win+0xdc>
	{
		game.game_finished=WIN;
 8000a70:	4b75      	ldr	r3, [pc, #468]	@ (8000c48 <check_for_win+0x284>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
		if(old_player==1)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d107      	bne.n	8000a8e <check_for_win+0xca>
		{
			game.player_one_wins++;
 8000a7e:	4b72      	ldr	r3, [pc, #456]	@ (8000c48 <check_for_win+0x284>)
 8000a80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a70      	ldr	r2, [pc, #448]	@ (8000c48 <check_for_win+0x284>)
 8000a88:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000a8c:	e006      	b.n	8000a9c <check_for_win+0xd8>
		}

		else
		{
			game.player_two_wins++;
 8000a8e:	4b6e      	ldr	r3, [pc, #440]	@ (8000c48 <check_for_win+0x284>)
 8000a90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a94:	3301      	adds	r3, #1
 8000a96:	4a6c      	ldr	r2, [pc, #432]	@ (8000c48 <check_for_win+0x284>)
 8000a98:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
		}
		return WIN;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e136      	b.n	8000d0e <check_for_win+0x34a>
	}

	current_row=game.last_drop.row;
 8000aa0:	4b69      	ldr	r3, [pc, #420]	@ (8000c48 <check_for_win+0x284>)
 8000aa2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000aa6:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 8000aa8:	4b67      	ldr	r3, [pc, #412]	@ (8000c48 <check_for_win+0x284>)
 8000aaa:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000aae:	603b      	str	r3, [r7, #0]
	current_count=1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]

	while(current_col-1>=0&&game.board[current_row][current_col-1]==old_player)
 8000ab4:	e005      	b.n	8000ac2 <check_for_win+0xfe>
	{
		current_count++;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
		current_col--;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	603b      	str	r3, [r7, #0]
	while(current_col-1>=0&&game.board[current_row][current_col-1]==old_player)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	dd0d      	ble.n	8000ae4 <check_for_win+0x120>
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	1e59      	subs	r1, r3, #1
 8000acc:	485e      	ldr	r0, [pc, #376]	@ (8000c48 <check_for_win+0x284>)
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	1a9b      	subs	r3, r3, r2
 8000ad6:	440b      	add	r3, r1
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4403      	add	r3, r0
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d0e8      	beq.n	8000ab6 <check_for_win+0xf2>
	}
	current_row=game.last_drop.row;
 8000ae4:	4b58      	ldr	r3, [pc, #352]	@ (8000c48 <check_for_win+0x284>)
 8000ae6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000aea:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 8000aec:	4b56      	ldr	r3, [pc, #344]	@ (8000c48 <check_for_win+0x284>)
 8000aee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000af2:	603b      	str	r3, [r7, #0]

	while(current_col+1<=6&&game.board[current_row][current_col+1]==old_player)
 8000af4:	e005      	b.n	8000b02 <check_for_win+0x13e>
	{
		current_count++;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
		current_col++;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	3301      	adds	r3, #1
 8000b00:	603b      	str	r3, [r7, #0]
	while(current_col+1<=6&&game.board[current_row][current_col+1]==old_player)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b05      	cmp	r3, #5
 8000b06:	dc0d      	bgt.n	8000b24 <check_for_win+0x160>
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	1c59      	adds	r1, r3, #1
 8000b0c:	484e      	ldr	r0, [pc, #312]	@ (8000c48 <check_for_win+0x284>)
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	4613      	mov	r3, r2
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	440b      	add	r3, r1
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4403      	add	r3, r0
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d0e8      	beq.n	8000af6 <check_for_win+0x132>
	}

	if(current_count>=4)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	dd17      	ble.n	8000b5a <check_for_win+0x196>
	{
		game.game_finished=WIN;
 8000b2a:	4b47      	ldr	r3, [pc, #284]	@ (8000c48 <check_for_win+0x284>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
		if(old_player==1)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d107      	bne.n	8000b48 <check_for_win+0x184>
		{
			game.player_one_wins++;
 8000b38:	4b43      	ldr	r3, [pc, #268]	@ (8000c48 <check_for_win+0x284>)
 8000b3a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b3e:	3301      	adds	r3, #1
 8000b40:	4a41      	ldr	r2, [pc, #260]	@ (8000c48 <check_for_win+0x284>)
 8000b42:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000b46:	e006      	b.n	8000b56 <check_for_win+0x192>
		}

		else
		{
			game.player_two_wins++;
 8000b48:	4b3f      	ldr	r3, [pc, #252]	@ (8000c48 <check_for_win+0x284>)
 8000b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b4e:	3301      	adds	r3, #1
 8000b50:	4a3d      	ldr	r2, [pc, #244]	@ (8000c48 <check_for_win+0x284>)
 8000b52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
		}
		return WIN;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e0d9      	b.n	8000d0e <check_for_win+0x34a>
	}

	current_row=game.last_drop.row;
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c48 <check_for_win+0x284>)
 8000b5c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000b60:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 8000b62:	4b39      	ldr	r3, [pc, #228]	@ (8000c48 <check_for_win+0x284>)
 8000b64:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000b68:	603b      	str	r3, [r7, #0]
	current_count=1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]

	while(current_col-1>=0 && current_row-1>=0 &&game.board[current_row-1][current_col-1]==old_player)
 8000b6e:	e008      	b.n	8000b82 <check_for_win+0x1be>
	{
		current_count++;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3301      	adds	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
		current_col--;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	603b      	str	r3, [r7, #0]
		current_row--;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
	while(current_col-1>=0 && current_row-1>=0 &&game.board[current_row-1][current_col-1]==old_player)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	dd11      	ble.n	8000bac <check_for_win+0x1e8>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	dd0e      	ble.n	8000bac <check_for_win+0x1e8>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	1e5a      	subs	r2, r3, #1
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	1e59      	subs	r1, r3, #1
 8000b96:	482c      	ldr	r0, [pc, #176]	@ (8000c48 <check_for_win+0x284>)
 8000b98:	4613      	mov	r3, r2
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	1a9b      	subs	r3, r3, r2
 8000b9e:	440b      	add	r3, r1
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4403      	add	r3, r0
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d0e1      	beq.n	8000b70 <check_for_win+0x1ac>
	}

	current_row=game.last_drop.row;
 8000bac:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <check_for_win+0x284>)
 8000bae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000bb2:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 8000bb4:	4b24      	ldr	r3, [pc, #144]	@ (8000c48 <check_for_win+0x284>)
 8000bb6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000bba:	603b      	str	r3, [r7, #0]

	while(current_col+1<=6 &&current_row+1<=5 &&game.board[current_row+1][current_col+1]==old_player)
 8000bbc:	e008      	b.n	8000bd0 <check_for_win+0x20c>
	{
		current_count++;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
		current_col++;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	603b      	str	r3, [r7, #0]
		current_row++;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
	while(current_col+1<=6 &&current_row+1<=5 &&game.board[current_row+1][current_col+1]==old_player)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b05      	cmp	r3, #5
 8000bd4:	dc11      	bgt.n	8000bfa <check_for_win+0x236>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	dc0e      	bgt.n	8000bfa <check_for_win+0x236>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	1c59      	adds	r1, r3, #1
 8000be4:	4818      	ldr	r0, [pc, #96]	@ (8000c48 <check_for_win+0x284>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4403      	add	r3, r0
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	68ba      	ldr	r2, [r7, #8]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d0e1      	beq.n	8000bbe <check_for_win+0x1fa>
	}

	if(current_count>=4)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	2b03      	cmp	r3, #3
 8000bfe:	dd17      	ble.n	8000c30 <check_for_win+0x26c>
	{
		game.game_finished=WIN;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <check_for_win+0x284>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
		if(old_player==1)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d107      	bne.n	8000c1e <check_for_win+0x25a>
		{
			game.player_one_wins++;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <check_for_win+0x284>)
 8000c10:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c14:	3301      	adds	r3, #1
 8000c16:	4a0c      	ldr	r2, [pc, #48]	@ (8000c48 <check_for_win+0x284>)
 8000c18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000c1c:	e006      	b.n	8000c2c <check_for_win+0x268>
		}

		else
		{
			game.player_two_wins++;
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <check_for_win+0x284>)
 8000c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c24:	3301      	adds	r3, #1
 8000c26:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <check_for_win+0x284>)
 8000c28:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
		}
		return WIN;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e06e      	b.n	8000d0e <check_for_win+0x34a>
			return TIE;
		}
	}


	current_row=game.last_drop.row;
 8000c30:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <check_for_win+0x284>)
 8000c32:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c36:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <check_for_win+0x284>)
 8000c3a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000c3e:	603b      	str	r3, [r7, #0]
	current_count=1;
 8000c40:	2301      	movs	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]

	while(current_col+1>=6 && current_row-1>=0 &&game.board[current_row-1][current_col+1]==old_player)
 8000c44:	e00b      	b.n	8000c5e <check_for_win+0x29a>
 8000c46:	bf00      	nop
 8000c48:	20000098 	.word	0x20000098
	{
		current_count++;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]

		current_col++;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	3301      	adds	r3, #1
 8000c56:	603b      	str	r3, [r7, #0]
		current_row--;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	607b      	str	r3, [r7, #4]
	while(current_col+1>=6 && current_row-1>=0 &&game.board[current_row-1][current_col+1]==old_player)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	dd11      	ble.n	8000c88 <check_for_win+0x2c4>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	dd0e      	ble.n	8000c88 <check_for_win+0x2c4>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	1e5a      	subs	r2, r3, #1
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	1c59      	adds	r1, r3, #1
 8000c72:	482a      	ldr	r0, [pc, #168]	@ (8000d1c <check_for_win+0x358>)
 8000c74:	4613      	mov	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4403      	add	r3, r0
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d0e1      	beq.n	8000c4c <check_for_win+0x288>
	}

	current_row=game.last_drop.row;
 8000c88:	4b24      	ldr	r3, [pc, #144]	@ (8000d1c <check_for_win+0x358>)
 8000c8a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000c8e:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 8000c90:	4b22      	ldr	r3, [pc, #136]	@ (8000d1c <check_for_win+0x358>)
 8000c92:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000c96:	603b      	str	r3, [r7, #0]

	while(current_col-1>=0 &&current_row+1<=5 &&game.board[current_row+1][current_col-1]==old_player)
 8000c98:	e008      	b.n	8000cac <check_for_win+0x2e8>
	{
		current_count++;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]

		current_col--;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	603b      	str	r3, [r7, #0]
		current_row++;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
	while(current_col-1>=0 &&current_row+1<=5 &&game.board[current_row+1][current_col-1]==old_player)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	dd11      	ble.n	8000cd6 <check_for_win+0x312>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	dc0e      	bgt.n	8000cd6 <check_for_win+0x312>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	1e59      	subs	r1, r3, #1
 8000cc0:	4816      	ldr	r0, [pc, #88]	@ (8000d1c <check_for_win+0x358>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	1a9b      	subs	r3, r3, r2
 8000cc8:	440b      	add	r3, r1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	4403      	add	r3, r0
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d0e1      	beq.n	8000c9a <check_for_win+0x2d6>
	}

	if(current_count>=4)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	dd17      	ble.n	8000d0c <check_for_win+0x348>
	{
		game.game_finished=WIN;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <check_for_win+0x358>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
		if(old_player==1)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d107      	bne.n	8000cfa <check_for_win+0x336>
		{
			game.player_one_wins++;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <check_for_win+0x358>)
 8000cec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <check_for_win+0x358>)
 8000cf4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000cf8:	e006      	b.n	8000d08 <check_for_win+0x344>
		}

		else
		{
			game.player_two_wins++;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <check_for_win+0x358>)
 8000cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a06      	ldr	r2, [pc, #24]	@ (8000d1c <check_for_win+0x358>)
 8000d04:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
		}
		return WIN;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e000      	b.n	8000d0e <check_for_win+0x34a>
	}
	return NOT_FINISHED;
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3714      	adds	r7, #20
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000098 	.word	0x20000098

08000d20 <onePlayerMode>:
}

#if COMPILE_TOUCH_FUNCTIONS == 1

bool onePlayerMode()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
	bool win=false;
 8000d26:	2300      	movs	r3, #0
 8000d28:	71fb      	strb	r3, [r7, #7]

	if((game.player_cnt==1) && (game.player==2))
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000da4 <onePlayerMode+0x84>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d133      	bne.n	8000d9a <onePlayerMode+0x7a>
 8000d32:	4b1c      	ldr	r3, [pc, #112]	@ (8000da4 <onePlayerMode+0x84>)
 8000d34:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d12e      	bne.n	8000d9a <onePlayerMode+0x7a>
	{
		uint32_t random;

		do
		{
			HAL_RNG_GenerateRandomNumber(&hrng, &random);
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4819      	ldr	r0, [pc, #100]	@ (8000da8 <onePlayerMode+0x88>)
 8000d42:	f005 f8e7 	bl	8005f14 <HAL_RNG_GenerateRandomNumber>
			random=random%7;
 8000d46:	6839      	ldr	r1, [r7, #0]
 8000d48:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <onePlayerMode+0x8c>)
 8000d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8000d4e:	1aca      	subs	r2, r1, r3
 8000d50:	0852      	lsrs	r2, r2, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	089a      	lsrs	r2, r3, #2
 8000d56:	4613      	mov	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	1aca      	subs	r2, r1, r3
 8000d5e:	603a      	str	r2, [r7, #0]
		}while(game.column_count[random]>=6);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	4a10      	ldr	r2, [pc, #64]	@ (8000da4 <onePlayerMode+0x84>)
 8000d64:	332a      	adds	r3, #42	@ 0x2a
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4413      	add	r3, r2
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b05      	cmp	r3, #5
 8000d6e:	dce5      	bgt.n	8000d3c <onePlayerMode+0x1c>

		game.current_position=random;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <onePlayerMode+0x84>)
 8000d76:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
		update_game_board();
 8000d7a:	f7ff fdb7 	bl	80008ec <update_game_board>
		LCD_PrintBoard();
 8000d7e:	f000 f8e3 	bl	8000f48 <LCD_PrintBoard>
		win=check_for_win();
 8000d82:	f7ff fe1f 	bl	80009c4 <check_for_win>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bf14      	ite	ne
 8000d8c:	2301      	movne	r3, #1
 8000d8e:	2300      	moveq	r3, #0
 8000d90:	71fb      	strb	r3, [r7, #7]
		game.player=1;
 8000d92:	4b04      	ldr	r3, [pc, #16]	@ (8000da4 <onePlayerMode+0x84>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	}
	return win;
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000098 	.word	0x20000098
 8000da8:	20000088 	.word	0x20000088
 8000dac:	24924925 	.word	0x24924925

08000db0 <LCD_Touch_Move_Chip>:


int LCD_Touch_Move_Chip()
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
//	LCD_Clear(0,LCD_COLOR_WHITE);



	LCD_Print_Chip(game.current_position,game.player);
 8000db6:	4b30      	ldr	r3, [pc, #192]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000dbe:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fce9 	bl	800179c <LCD_Print_Chip>
		if ((returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) ){
 8000dca:	482c      	ldr	r0, [pc, #176]	@ (8000e7c <LCD_Touch_Move_Chip+0xcc>)
 8000dcc:	f000 fd2d 	bl	800182a <returnTouchStateAndLocation>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d14a      	bne.n	8000e6c <LCD_Touch_Move_Chip+0xbc>
			/* Touch valid */
			HAL_Delay(100);
 8000dd6:	2064      	movs	r0, #100	@ 0x64
 8000dd8:	f002 fae0 	bl	800339c <HAL_Delay>
			int white_color=3;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	607b      	str	r3, [r7, #4]
//			LCD_Clear(0,LCD_COLOR_WHITE);
			if(StaticTouchData.x<=120)
 8000de0:	4b26      	ldr	r3, [pc, #152]	@ (8000e7c <LCD_Touch_Move_Chip+0xcc>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	2b78      	cmp	r3, #120	@ 0x78
 8000de6:	d81e      	bhi.n	8000e26 <LCD_Touch_Move_Chip+0x76>
			{
				if(game.current_position-1>=0)
 8000de8:	4b23      	ldr	r3, [pc, #140]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	dd0d      	ble.n	8000e0e <LCD_Touch_Move_Chip+0x5e>
				{
					LCD_Print_Chip(game.current_position,white_color);
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fcce 	bl	800179c <LCD_Print_Chip>
					game.current_position--;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	3b01      	subs	r3, #1
 8000e08:	4a1b      	ldr	r2, [pc, #108]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
				}
				LCD_Print_Chip(game.current_position,game.player);
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	4a18      	ldr	r2, [pc, #96]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000e16:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f000 fcbd 	bl	800179c <LCD_Print_Chip>
				return 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e023      	b.n	8000e6e <LCD_Touch_Move_Chip+0xbe>
			}

			else if(StaticTouchData.x>120)
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <LCD_Touch_Move_Chip+0xcc>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	2b78      	cmp	r3, #120	@ 0x78
 8000e2c:	d91e      	bls.n	8000e6c <LCD_Touch_Move_Chip+0xbc>
			{
				if((game.current_position+1<=6))
 8000e2e:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	2b05      	cmp	r3, #5
 8000e36:	dc0d      	bgt.n	8000e54 <LCD_Touch_Move_Chip+0xa4>
				{
					LCD_Print_Chip(game.current_position,white_color);
 8000e38:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 fcab 	bl	800179c <LCD_Print_Chip>
					game.current_position++;
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000e50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
				}
				LCD_Print_Chip(game.current_position,game.player);
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5a:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <LCD_Touch_Move_Chip+0xc8>)
 8000e5c:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fc9a 	bl	800179c <LCD_Print_Chip>
				return 1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <LCD_Touch_Move_Chip+0xbe>
			}

		}
	return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000098 	.word	0x20000098
 8000e7c:	20000190 	.word	0x20000190

08000e80 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	disableIRQInterrupt(EXTI0_IRQn);
 8000e84:	2006      	movs	r0, #6
 8000e86:	f000 f96d 	bl	8001164 <disableIRQInterrupt>
	//clearIRQPendingInterrupt(GPIO_PIN_0);
	clearIRQPendingInterrupt(EXTI0_IRQn);
 8000e8a:	2006      	movs	r0, #6
 8000e8c:	f000 f980 	bl	8001190 <clearIRQPendingInterrupt>
	clearEXTIPendingInterrupt(EXTI0);
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 f993 	bl	80011bc <clearEXTIPendingInterrupt>
	addScheduleEvent(DROP_CHIP_EVENT);
 8000e96:	2002      	movs	r0, #2
 8000e98:	f000 fce0 	bl	800185c <addScheduleEvent>

	enableIRQInterrupt(EXTI0_IRQn);
 8000e9c:	2006      	movs	r0, #6
 8000e9e:	f000 f94b 	bl	8001138 <enableIRQInterrupt>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <LCD_Touch_Player_Count>:


void LCD_Touch_Player_Count(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000eac:	211f      	movs	r1, #31
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 fba2 	bl	80015f8 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 fbc1 	bl	800163c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000eba:	481f      	ldr	r0, [pc, #124]	@ (8000f38 <LCD_Touch_Player_Count+0x90>)
 8000ebc:	f000 fbce 	bl	800165c <LCD_SetFont>

	LCD_DisplayChar(40,140,'1');
 8000ec0:	2231      	movs	r2, #49	@ 0x31
 8000ec2:	218c      	movs	r1, #140	@ 0x8c
 8000ec4:	2028      	movs	r0, #40	@ 0x28
 8000ec6:	f000 fc47 	bl	8001758 <LCD_DisplayChar>
	LCD_DisplayChar(180,140,'2');
 8000eca:	2232      	movs	r2, #50	@ 0x32
 8000ecc:	218c      	movs	r1, #140	@ 0x8c
 8000ece:	20b4      	movs	r0, #180	@ 0xb4
 8000ed0:	f000 fc42 	bl	8001758 <LCD_DisplayChar>


	while(game.player_cnt==-1)
 8000ed4:	e018      	b.n	8000f08 <LCD_Touch_Player_Count+0x60>
	{
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000ed6:	4819      	ldr	r0, [pc, #100]	@ (8000f3c <LCD_Touch_Player_Count+0x94>)
 8000ed8:	f000 fca7 	bl	800182a <returnTouchStateAndLocation>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d112      	bne.n	8000f08 <LCD_Touch_Player_Count+0x60>
			/* Touch valid */
			if(StaticTouchData.x<=120)
 8000ee2:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <LCD_Touch_Player_Count+0x94>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	2b78      	cmp	r3, #120	@ 0x78
 8000ee8:	d807      	bhi.n	8000efa <LCD_Touch_Player_Count+0x52>
			{
				game.player_cnt=1;
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <LCD_Touch_Player_Count+0x98>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	601a      	str	r2, [r3, #0]
				game.player=1;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	@ (8000f40 <LCD_Touch_Player_Count+0x98>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000ef8:	e006      	b.n	8000f08 <LCD_Touch_Player_Count+0x60>
			}

			else
			{
				game.player_cnt=2;
 8000efa:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <LCD_Touch_Player_Count+0x98>)
 8000efc:	2202      	movs	r2, #2
 8000efe:	601a      	str	r2, [r3, #0]
				game.player=1;
 8000f00:	4b0f      	ldr	r3, [pc, #60]	@ (8000f40 <LCD_Touch_Player_Count+0x98>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	while(game.player_cnt==-1)
 8000f08:	4b0d      	ldr	r3, [pc, #52]	@ (8000f40 <LCD_Touch_Player_Count+0x98>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d0e1      	beq.n	8000ed6 <LCD_Touch_Player_Count+0x2e>
			}
		}
	}
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000f12:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f16:	2000      	movs	r0, #0
 8000f18:	f000 fb6e 	bl	80015f8 <LCD_Clear>
	game.old_time=HAL_GetTick()/1000;
 8000f1c:	f002 fa32 	bl	8003384 <HAL_GetTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <LCD_Touch_Player_Count+0x9c>)
 8000f24:	fba2 2303 	umull	r2, r3, r2, r3
 8000f28:	099b      	lsrs	r3, r3, #6
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <LCD_Touch_Player_Count+0x98>)
 8000f2e:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	return;
 8000f32:	bf00      	nop
}
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000004 	.word	0x20000004
 8000f3c:	20000190 	.word	0x20000190
 8000f40:	20000098 	.word	0x20000098
 8000f44:	10624dd3 	.word	0x10624dd3

08000f48 <LCD_PrintBoard>:

void LCD_PrintBoard()
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000f4e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 fb50 	bl	80015f8 <LCD_Clear>

	for(int i=80;i<320;i++)
 8000f58:	2350      	movs	r3, #80	@ 0x50
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e009      	b.n	8000f72 <LCD_PrintBoard+0x2a>
	{
		LCD_Draw_Horizontal_Line(0,i,240,LCD_COLOR_BLUE);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	b299      	uxth	r1, r3
 8000f62:	231f      	movs	r3, #31
 8000f64:	22f0      	movs	r2, #240	@ 0xf0
 8000f66:	2000      	movs	r0, #0
 8000f68:	f000 fb1f 	bl	80015aa <LCD_Draw_Horizontal_Line>
	for(int i=80;i<320;i++)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f78:	dbf1      	blt.n	8000f5e <LCD_PrintBoard+0x16>
//
//	for(int i=0;i<240;i+=35)
//	{
//		LCD_Draw_Vertical_Line(i,80,250,LCD_COLOR_BLACK);
//	}
	for(int j=0;j<7;j++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	e04f      	b.n	8001020 <LCD_PrintBoard+0xd8>
	{
		for(int i=0;i<6;i++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e046      	b.n	8001014 <LCD_PrintBoard+0xcc>
		{
			int x_pos=(35*j)+17;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00da      	lsls	r2, r3, #3
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	3311      	adds	r3, #17
 8000f94:	60bb      	str	r3, [r7, #8]
			int y_pos=(40*i)+100; //was sixty
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	3364      	adds	r3, #100	@ 0x64
 8000fa2:	607b      	str	r3, [r7, #4]
			if(game.board[i][j]==1)
 8000fa4:	4922      	ldr	r1, [pc, #136]	@ (8001030 <LCD_PrintBoard+0xe8>)
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4613      	mov	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d109      	bne.n	8000fd0 <LCD_PrintBoard+0x88>
			{
				LCD_Draw_Circle_Fill(x_pos,y_pos,10,LCD_COLOR_YELLOW);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	b298      	uxth	r0, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	b299      	uxth	r1, r3
 8000fc4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000fc8:	220a      	movs	r2, #10
 8000fca:	f000 fa9b 	bl	8001504 <LCD_Draw_Circle_Fill>
 8000fce:	e01e      	b.n	800100e <LCD_PrintBoard+0xc6>
			}



			else if(game.board[i][j]==2)
 8000fd0:	4917      	ldr	r1, [pc, #92]	@ (8001030 <LCD_PrintBoard+0xe8>)
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	1a9b      	subs	r3, r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d109      	bne.n	8000ffc <LCD_PrintBoard+0xb4>
			{
				LCD_Draw_Circle_Fill(x_pos,y_pos,10,LCD_COLOR_RED);
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	b298      	uxth	r0, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	b299      	uxth	r1, r3
 8000ff0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000ff4:	220a      	movs	r2, #10
 8000ff6:	f000 fa85 	bl	8001504 <LCD_Draw_Circle_Fill>
 8000ffa:	e008      	b.n	800100e <LCD_PrintBoard+0xc6>
			}

			else
			{
				LCD_Draw_Circle_Fill(x_pos,y_pos,10,LCD_COLOR_WHITE);
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	b298      	uxth	r0, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	b299      	uxth	r1, r3
 8001004:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001008:	220a      	movs	r2, #10
 800100a:	f000 fa7b 	bl	8001504 <LCD_Draw_Circle_Fill>
		for(int i=0;i<6;i++)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b05      	cmp	r3, #5
 8001018:	ddb5      	ble.n	8000f86 <LCD_PrintBoard+0x3e>
	for(int j=0;j<7;j++)
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	3301      	adds	r3, #1
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	2b06      	cmp	r3, #6
 8001024:	ddac      	ble.n	8000f80 <LCD_PrintBoard+0x38>
			}
		}
	}
	return;
 8001026:	bf00      	nop
}
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000098 	.word	0x20000098

08001034 <resetGame>:
{
	return game.game_finished;
}

void resetGame()
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
	for(;;)
	{
		if ((returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) )
 800103a:	4827      	ldr	r0, [pc, #156]	@ (80010d8 <resetGame+0xa4>)
 800103c:	f000 fbf5 	bl	800182a <returnTouchStateAndLocation>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f9      	bne.n	800103a <resetGame+0x6>
		{
			/* Touch valid */
			for(int i=0; i<BOARD_ROWS;i++)
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	e016      	b.n	800107a <resetGame+0x46>
			{
				for(int j=0; j<BOARD_COLUMNS; j++)
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	e00d      	b.n	800106e <resetGame+0x3a>
				{
					game.board[i][j]=0;
 8001052:	4922      	ldr	r1, [pc, #136]	@ (80010dc <resetGame+0xa8>)
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	4613      	mov	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	1a9b      	subs	r3, r3, r2
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	4413      	add	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	440b      	add	r3, r1
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
				for(int j=0; j<BOARD_COLUMNS; j++)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	3301      	adds	r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b06      	cmp	r3, #6
 8001072:	ddee      	ble.n	8001052 <resetGame+0x1e>
			for(int i=0; i<BOARD_ROWS;i++)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b05      	cmp	r3, #5
 800107e:	dde5      	ble.n	800104c <resetGame+0x18>
				}
			}
			game.remaining_moves=MAX_MOVES;
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <resetGame+0xa8>)
 8001082:	222a      	movs	r2, #42	@ 0x2a
 8001084:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			game.current_position=3;
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <resetGame+0xa8>)
 800108a:	2203      	movs	r2, #3
 800108c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
			for(int i =0; i<7; i++)
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	e009      	b.n	80010aa <resetGame+0x76>
			{
				game.column_count[i]=0;
 8001096:	4a11      	ldr	r2, [pc, #68]	@ (80010dc <resetGame+0xa8>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	332a      	adds	r3, #42	@ 0x2a
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	2200      	movs	r2, #0
 80010a2:	605a      	str	r2, [r3, #4]
			for(int i =0; i<7; i++)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b06      	cmp	r3, #6
 80010ae:	ddf2      	ble.n	8001096 <resetGame+0x62>
			}
			game.player=1;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <resetGame+0xa8>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
			game.old_time=HAL_GetTick()/1000;
 80010b8:	f002 f964 	bl	8003384 <HAL_GetTick>
 80010bc:	4603      	mov	r3, r0
 80010be:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <resetGame+0xac>)
 80010c0:	fba2 2303 	umull	r2, r3, r2, r3
 80010c4:	099b      	lsrs	r3, r3, #6
 80010c6:	461a      	mov	r2, r3
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <resetGame+0xa8>)
 80010ca:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
			break;
 80010ce:	bf00      	nop
		}
	}
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000190 	.word	0x20000190
 80010dc:	20000098 	.word	0x20000098
 80010e0:	10624dd3 	.word	0x10624dd3

080010e4 <buttonInitInterrupt>:
	uint8_t value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
	return BUTTON_PRESSED&(value);

}
void buttonInitInterrupt()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <buttonInitInterrupt+0x4c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001130 <buttonInitInterrupt+0x4c>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001130 <buttonInitInterrupt+0x4c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_BUTTON;
	GPIO_BUTTON.Pin=GPIO_PIN_0;
 8001106:	2301      	movs	r3, #1
 8001108:	607b      	str	r3, [r7, #4]
	GPIO_BUTTON.Mode=GPIO_MODE_IT_RISING;
 800110a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800110e:	60bb      	str	r3, [r7, #8]
	GPIO_BUTTON.Speed=GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	613b      	str	r3, [r7, #16]
	GPIO_BUTTON.Pull=GPIO_MODE_INPUT;
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&GPIO_BUTTON);
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	@ (8001134 <buttonInitInterrupt+0x50>)
 800111e:	f002 fa73 	bl	8003608 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001122:	2006      	movs	r0, #6
 8001124:	f002 fa55 	bl	80035d2 <HAL_NVIC_EnableIRQ>


}
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <enableIRQInterrupt>:
#include "InterruptControl.h"

void enableIRQInterrupt(uint8_t IRQ_NUMBER)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
	if(IRQ_NUMBER<32)
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	2b1f      	cmp	r3, #31
 8001146:	d804      	bhi.n	8001152 <enableIRQInterrupt+0x1a>
	{
		*NVIC_ISER0=(1<<IRQ_NUMBER);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2201      	movs	r2, #1
 800114c:	409a      	lsls	r2, r3
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <enableIRQInterrupt+0x28>)
 8001150:	601a      	str	r2, [r3, #0]
	}
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000e100 	.word	0xe000e100

08001164 <disableIRQInterrupt>:

void disableIRQInterrupt(uint8_t IRQ_NUMBER)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
	if(IRQ_NUMBER<32)
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b1f      	cmp	r3, #31
 8001172:	d804      	bhi.n	800117e <disableIRQInterrupt+0x1a>
	{
		*NVIC_ISER0=(1<<IRQ_NUMBER);
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2201      	movs	r2, #1
 8001178:	409a      	lsls	r2, r3
 800117a:	4b04      	ldr	r3, [pc, #16]	@ (800118c <disableIRQInterrupt+0x28>)
 800117c:	601a      	str	r2, [r3, #0]
	}
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100

08001190 <clearIRQPendingInterrupt>:

void clearIRQPendingInterrupt(uint8_t IRQ_NUMBER)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	if(IRQ_NUMBER<32)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b1f      	cmp	r3, #31
 800119e:	d804      	bhi.n	80011aa <clearIRQPendingInterrupt+0x1a>
	{
		*NVIC_ISER0=(1<<IRQ_NUMBER);
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2201      	movs	r2, #1
 80011a4:	409a      	lsls	r2, r3
 80011a6:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <clearIRQPendingInterrupt+0x28>)
 80011a8:	601a      	str	r2, [r3, #0]
	}
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <clearEXTIPendingInterrupt>:


void clearEXTIPendingInterrupt(uint8_t PIN_NUMBER)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
	EXTI->PR|=(1<<PIN_NUMBER);
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <clearEXTIPendingInterrupt+0x2c>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	79fa      	ldrb	r2, [r7, #7]
 80011cc:	2101      	movs	r1, #1
 80011ce:	fa01 f202 	lsl.w	r2, r1, r2
 80011d2:	4611      	mov	r1, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <clearEXTIPendingInterrupt+0x2c>)
 80011d6:	430b      	orrs	r3, r1
 80011d8:	6153      	str	r3, [r2, #20]

}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40013c00 	.word	0x40013c00

080011ec <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	@ 0x30
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001360 <LCD_GPIO_Init+0x174>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	4a59      	ldr	r2, [pc, #356]	@ (8001360 <LCD_GPIO_Init+0x174>)
 80011fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001200:	6453      	str	r3, [r2, #68]	@ 0x44
 8001202:	4b57      	ldr	r3, [pc, #348]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800120a:	61bb      	str	r3, [r7, #24]
 800120c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
 8001212:	4b53      	ldr	r3, [pc, #332]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a52      	ldr	r2, [pc, #328]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b50      	ldr	r3, [pc, #320]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b4c      	ldr	r3, [pc, #304]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a4b      	ldr	r2, [pc, #300]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b49      	ldr	r3, [pc, #292]	@ (8001360 <LCD_GPIO_Init+0x174>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b45      	ldr	r3, [pc, #276]	@ (8001360 <LCD_GPIO_Init+0x174>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a44      	ldr	r2, [pc, #272]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b42      	ldr	r3, [pc, #264]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b3e      	ldr	r3, [pc, #248]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a3d      	ldr	r2, [pc, #244]	@ (8001360 <LCD_GPIO_Init+0x174>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b37      	ldr	r3, [pc, #220]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a36      	ldr	r2, [pc, #216]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001288:	f043 0320 	orr.w	r3, r3, #32
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b34      	ldr	r3, [pc, #208]	@ (8001360 <LCD_GPIO_Init+0x174>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0320 	and.w	r3, r3, #32
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b30      	ldr	r3, [pc, #192]	@ (8001360 <LCD_GPIO_Init+0x174>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001360 <LCD_GPIO_Init+0x174>)
 80012a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001360 <LCD_GPIO_Init+0x174>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80012b6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80012ba:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80012c4:	2302      	movs	r3, #2
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80012c8:	230e      	movs	r3, #14
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	4824      	ldr	r0, [pc, #144]	@ (8001364 <LCD_GPIO_Init+0x178>)
 80012d4:	f002 f998 	bl	8003608 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80012d8:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80012dc:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80012de:	f107 031c 	add.w	r3, r7, #28
 80012e2:	4619      	mov	r1, r3
 80012e4:	4820      	ldr	r0, [pc, #128]	@ (8001368 <LCD_GPIO_Init+0x17c>)
 80012e6:	f002 f98f 	bl	8003608 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80012ea:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80012ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	4619      	mov	r1, r3
 80012f6:	481d      	ldr	r0, [pc, #116]	@ (800136c <LCD_GPIO_Init+0x180>)
 80012f8:	f002 f986 	bl	8003608 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80012fc:	2348      	movs	r3, #72	@ 0x48
 80012fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001300:	f107 031c 	add.w	r3, r7, #28
 8001304:	4619      	mov	r1, r3
 8001306:	481a      	ldr	r0, [pc, #104]	@ (8001370 <LCD_GPIO_Init+0x184>)
 8001308:	f002 f97e 	bl	8003608 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800130c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4816      	ldr	r0, [pc, #88]	@ (8001374 <LCD_GPIO_Init+0x188>)
 800131a:	f002 f975 	bl	8003608 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800131e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001322:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4813      	ldr	r0, [pc, #76]	@ (8001378 <LCD_GPIO_Init+0x18c>)
 800132c:	f002 f96c 	bl	8003608 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001330:	2303      	movs	r3, #3
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001334:	2309      	movs	r3, #9
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	480a      	ldr	r0, [pc, #40]	@ (8001368 <LCD_GPIO_Init+0x17c>)
 8001340:	f002 f962 	bl	8003608 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001344:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4809      	ldr	r0, [pc, #36]	@ (8001378 <LCD_GPIO_Init+0x18c>)
 8001352:	f002 f959 	bl	8003608 <HAL_GPIO_Init>
}
 8001356:	bf00      	nop
 8001358:	3730      	adds	r7, #48	@ 0x30
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400
 800136c:	40020800 	.word	0x40020800
 8001370:	40020c00 	.word	0x40020c00
 8001374:	40021400 	.word	0x40021400
 8001378:	40021800 	.word	0x40021800

0800137c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b090      	sub	sp, #64	@ 0x40
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 800138a:	23f0      	movs	r3, #240	@ 0xf0
 800138c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8001392:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001396:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 800139c:	23ff      	movs	r3, #255	@ 0xff
 800139e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80013a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013aa:	2305      	movs	r3, #5
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <LTCD_Layer_Init+0x78>)
 80013b6:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80013b8:	23f0      	movs	r3, #240	@ 0xf0
 80013ba:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80013bc:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80013c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 80013d4:	79fa      	ldrb	r2, [r7, #7]
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4619      	mov	r1, r3
 80013dc:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <LTCD_Layer_Init+0x7c>)
 80013de:	f003 fd55 	bl	8004e8c <HAL_LTDC_ConfigLayer>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 80013e8:	f000 fa0e 	bl	8001808 <LCD_Error_Handler>
	}
}
 80013ec:	bf00      	nop
 80013ee:	3740      	adds	r7, #64	@ 0x40
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000274 	.word	0x20000274
 80013f8:	20000198 	.word	0x20000198

080013fc <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <LTCD__Init+0xb0>)
 8001402:	4a2b      	ldr	r2, [pc, #172]	@ (80014b0 <LTCD__Init+0xb4>)
 8001404:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8001406:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <LTCD__Init+0xb0>)
 8001408:	2209      	movs	r2, #9
 800140a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <LTCD__Init+0xb0>)
 800140e:	2201      	movs	r2, #1
 8001410:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8001412:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <LTCD__Init+0xb0>)
 8001414:	221d      	movs	r2, #29
 8001416:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8001418:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <LTCD__Init+0xb0>)
 800141a:	2203      	movs	r2, #3
 800141c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800141e:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <LTCD__Init+0xb0>)
 8001420:	f240 120d 	movw	r2, #269	@ 0x10d
 8001424:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8001426:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <LTCD__Init+0xb0>)
 8001428:	f240 1243 	movw	r2, #323	@ 0x143
 800142c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800142e:	4b1f      	ldr	r3, [pc, #124]	@ (80014ac <LTCD__Init+0xb0>)
 8001430:	f240 1217 	movw	r2, #279	@ 0x117
 8001434:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8001436:	4b1d      	ldr	r3, [pc, #116]	@ (80014ac <LTCD__Init+0xb0>)
 8001438:	f240 1247 	movw	r2, #327	@ 0x147
 800143c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800143e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <LTCD__Init+0xb0>)
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <LTCD__Init+0xb0>)
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 800144e:	4b17      	ldr	r3, [pc, #92]	@ (80014ac <LTCD__Init+0xb0>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001456:	4b17      	ldr	r3, [pc, #92]	@ (80014b4 <LTCD__Init+0xb8>)
 8001458:	2208      	movs	r2, #8
 800145a:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <LTCD__Init+0xb8>)
 800145e:	22c0      	movs	r2, #192	@ 0xc0
 8001460:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <LTCD__Init+0xb8>)
 8001464:	2204      	movs	r2, #4
 8001466:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <LTCD__Init+0xb8>)
 800146a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800146e:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001470:	4810      	ldr	r0, [pc, #64]	@ (80014b4 <LTCD__Init+0xb8>)
 8001472:	f004 fb65 	bl	8005b40 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <LTCD__Init+0xb0>)
 8001478:	2200      	movs	r2, #0
 800147a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <LTCD__Init+0xb0>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <LTCD__Init+0xb0>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <LTCD__Init+0xb0>)
 800148a:	2200      	movs	r2, #0
 800148c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 800148e:	f7ff fead 	bl	80011ec <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001492:	4806      	ldr	r0, [pc, #24]	@ (80014ac <LTCD__Init+0xb0>)
 8001494:	f003 fc2a 	bl	8004cec <HAL_LTDC_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 800149e:	f000 f9b3 	bl	8001808 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80014a2:	f000 fa01 	bl	80018a8 <ili9341_Init>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000198 	.word	0x20000198
 80014b0:	40016800 	.word	0x40016800
 80014b4:	20000240 	.word	0x20000240

080014b8 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
 80014c2:	460b      	mov	r3, r1
 80014c4:	80bb      	strh	r3, [r7, #4]
 80014c6:	4613      	mov	r3, r2
 80014c8:	807b      	strh	r3, [r7, #2]
	if(x>239 || y>319)
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	2bef      	cmp	r3, #239	@ 0xef
 80014ce:	d810      	bhi.n	80014f2 <LCD_Draw_Pixel+0x3a>
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80014d6:	d20c      	bcs.n	80014f2 <LCD_Draw_Pixel+0x3a>
	{
		return;
	}
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 80014d8:	88ba      	ldrh	r2, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	461a      	mov	r2, r3
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	4413      	add	r3, r2
 80014e8:	4905      	ldr	r1, [pc, #20]	@ (8001500 <LCD_Draw_Pixel+0x48>)
 80014ea:	887a      	ldrh	r2, [r7, #2]
 80014ec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80014f0:	e000      	b.n	80014f4 <LCD_Draw_Pixel+0x3c>
		return;
 80014f2:	bf00      	nop
}
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000274 	.word	0x20000274

08001504 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	4604      	mov	r4, r0
 800150c:	4608      	mov	r0, r1
 800150e:	4611      	mov	r1, r2
 8001510:	461a      	mov	r2, r3
 8001512:	4623      	mov	r3, r4
 8001514:	80fb      	strh	r3, [r7, #6]
 8001516:	4603      	mov	r3, r0
 8001518:	80bb      	strh	r3, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	807b      	strh	r3, [r7, #2]
 800151e:	4613      	mov	r3, r2
 8001520:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	425b      	negs	r3, r3
 8001526:	b29b      	uxth	r3, r3
 8001528:	81fb      	strh	r3, [r7, #14]
 800152a:	e034      	b.n	8001596 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 800152c:	887b      	ldrh	r3, [r7, #2]
 800152e:	425b      	negs	r3, r3
 8001530:	b29b      	uxth	r3, r3
 8001532:	81bb      	strh	r3, [r7, #12]
 8001534:	e024      	b.n	8001580 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8001536:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800153a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800153e:	fb03 f202 	mul.w	r2, r3, r2
 8001542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001546:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800154a:	fb01 f303 	mul.w	r3, r1, r3
 800154e:	441a      	add	r2, r3
 8001550:	887b      	ldrh	r3, [r7, #2]
 8001552:	8879      	ldrh	r1, [r7, #2]
 8001554:	fb01 f303 	mul.w	r3, r1, r3
 8001558:	429a      	cmp	r2, r3
 800155a:	dc0b      	bgt.n	8001574 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 800155c:	89ba      	ldrh	r2, [r7, #12]
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	4413      	add	r3, r2
 8001562:	b298      	uxth	r0, r3
 8001564:	89fa      	ldrh	r2, [r7, #14]
 8001566:	88bb      	ldrh	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	b29b      	uxth	r3, r3
 800156c:	883a      	ldrh	r2, [r7, #0]
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff ffa2 	bl	80014b8 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8001574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001578:	b29b      	uxth	r3, r3
 800157a:	3301      	adds	r3, #1
 800157c:	b29b      	uxth	r3, r3
 800157e:	81bb      	strh	r3, [r7, #12]
 8001580:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001584:	887b      	ldrh	r3, [r7, #2]
 8001586:	429a      	cmp	r2, r3
 8001588:	ddd5      	ble.n	8001536 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 800158a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800158e:	b29b      	uxth	r3, r3
 8001590:	3301      	adds	r3, #1
 8001592:	b29b      	uxth	r3, r3
 8001594:	81fb      	strh	r3, [r7, #14]
 8001596:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	429a      	cmp	r2, r3
 800159e:	ddc5      	ble.n	800152c <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd90      	pop	{r4, r7, pc}

080015aa <LCD_Draw_Horizontal_Line>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 80015aa:	b590      	push	{r4, r7, lr}
 80015ac:	b085      	sub	sp, #20
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4604      	mov	r4, r0
 80015b2:	4608      	mov	r0, r1
 80015b4:	4611      	mov	r1, r2
 80015b6:	461a      	mov	r2, r3
 80015b8:	4623      	mov	r3, r4
 80015ba:	80fb      	strh	r3, [r7, #6]
 80015bc:	4603      	mov	r3, r0
 80015be:	80bb      	strh	r3, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	81fb      	strh	r3, [r7, #14]
 80015cc:	e00b      	b.n	80015e6 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 80015ce:	88fa      	ldrh	r2, [r7, #6]
 80015d0:	89fb      	ldrh	r3, [r7, #14]
 80015d2:	4413      	add	r3, r2
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	883a      	ldrh	r2, [r7, #0]
 80015d8:	88b9      	ldrh	r1, [r7, #4]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff6c 	bl	80014b8 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80015e0:	89fb      	ldrh	r3, [r7, #14]
 80015e2:	3301      	adds	r3, #1
 80015e4:	81fb      	strh	r3, [r7, #14]
 80015e6:	89fa      	ldrh	r2, [r7, #14]
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d3ef      	bcc.n	80015ce <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}

080015f8 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	460a      	mov	r2, r1
 8001602:	71fb      	strb	r3, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10e      	bne.n	800162c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	e007      	b.n	8001624 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001614:	4908      	ldr	r1, [pc, #32]	@ (8001638 <LCD_Clear+0x40>)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	88ba      	ldrh	r2, [r7, #4]
 800161a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3301      	adds	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800162a:	d3f3      	bcc.n	8001614 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	20000274 	.word	0x20000274

0800163c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001646:	4a04      	ldr	r2, [pc, #16]	@ (8001658 <LCD_SetTextColor+0x1c>)
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	8013      	strh	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	20000000 	.word	0x20000000

0800165c <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <LCD_SetFont+0x1c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	20000270 	.word	0x20000270

0800167c <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	80fb      	strh	r3, [r7, #6]
 8001688:	460b      	mov	r3, r1
 800168a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	e04c      	b.n	8001734 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800169a:	2300      	movs	r3, #0
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	e03f      	b.n	8001720 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <LCD_Draw_Char+0xd0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	889b      	ldrh	r3, [r3, #4]
 80016b2:	4a27      	ldr	r2, [pc, #156]	@ (8001750 <LCD_Draw_Char+0xd4>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	08db      	lsrs	r3, r3, #3
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	2280      	movs	r2, #128	@ 0x80
 80016c0:	409a      	lsls	r2, r3
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	fa42 f303 	asr.w	r3, r2, r3
 80016c8:	400b      	ands	r3, r1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d104      	bne.n	80016d8 <LCD_Draw_Char+0x5c>
 80016ce:	4b1f      	ldr	r3, [pc, #124]	@ (800174c <LCD_Draw_Char+0xd0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	889b      	ldrh	r3, [r3, #4]
 80016d4:	2b0c      	cmp	r3, #12
 80016d6:	d920      	bls.n	800171a <LCD_Draw_Char+0x9e>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	fa42 f303 	asr.w	r3, r2, r3
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d104      	bne.n	80016fc <LCD_Draw_Char+0x80>
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <LCD_Draw_Char+0xd0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	889b      	ldrh	r3, [r3, #4]
 80016f8:	2b0c      	cmp	r3, #12
 80016fa:	d80e      	bhi.n	800171a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	4413      	add	r3, r2
 8001704:	b298      	uxth	r0, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	b29a      	uxth	r2, r3
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	b29b      	uxth	r3, r3
 8001710:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <LCD_Draw_Char+0xd8>)
 8001712:	8812      	ldrh	r2, [r2, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff fecf 	bl	80014b8 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	3301      	adds	r3, #1
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <LCD_Draw_Char+0xd0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	889b      	ldrh	r3, [r3, #4]
 8001726:	461a      	mov	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4293      	cmp	r3, r2
 800172c:	d3b8      	bcc.n	80016a0 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3301      	adds	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <LCD_Draw_Char+0xd0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	88db      	ldrh	r3, [r3, #6]
 800173a:	461a      	mov	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4293      	cmp	r3, r2
 8001740:	d3ab      	bcc.n	800169a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8001742:	bf00      	nop
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000270 	.word	0x20000270
 8001750:	aaaaaaab 	.word	0xaaaaaaab
 8001754:	20000000 	.word	0x20000000

08001758 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
 8001762:	460b      	mov	r3, r1
 8001764:	80bb      	strh	r3, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	3b20      	subs	r3, #32
 800176e:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001770:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <LCD_DisplayChar+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	4907      	ldr	r1, [pc, #28]	@ (8001798 <LCD_DisplayChar+0x40>)
 800177a:	6809      	ldr	r1, [r1, #0]
 800177c:	88c9      	ldrh	r1, [r1, #6]
 800177e:	fb01 f303 	mul.w	r3, r1, r3
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	441a      	add	r2, r3
 8001786:	88b9      	ldrh	r1, [r7, #4]
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff ff76 	bl	800167c <LCD_Draw_Char>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000270 	.word	0x20000270

0800179c <LCD_Print_Chip>:
		LCD_Draw_Vertical_Line(i,80,250,LCD_COLOR_BLACK);
	}
}

void LCD_Print_Chip(int position, int color)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
	int y_position=60;
 80017a6:	233c      	movs	r3, #60	@ 0x3c
 80017a8:	60fb      	str	r3, [r7, #12]
	int x_position=(35*position)+17;
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	00da      	lsls	r2, r3, #3
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	3311      	adds	r3, #17
 80017b8:	60bb      	str	r3, [r7, #8]

	if(color==1)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d109      	bne.n	80017d4 <LCD_Print_Chip+0x38>
	{
		LCD_Draw_Circle_Fill(x_position,y_position,10,LCD_COLOR_YELLOW);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	b298      	uxth	r0, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	b299      	uxth	r1, r3
 80017c8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80017cc:	220a      	movs	r2, #10
 80017ce:	f7ff fe99 	bl	8001504 <LCD_Draw_Circle_Fill>
	else
	{
		LCD_Draw_Circle_Fill(x_position,y_position,10,LCD_COLOR_WHITE);
	}

}
 80017d2:	e015      	b.n	8001800 <LCD_Print_Chip+0x64>
	else if(color==2)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d109      	bne.n	80017ee <LCD_Print_Chip+0x52>
		LCD_Draw_Circle_Fill(x_position,y_position,10,LCD_COLOR_RED);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	b298      	uxth	r0, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	b299      	uxth	r1, r3
 80017e2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80017e6:	220a      	movs	r2, #10
 80017e8:	f7ff fe8c 	bl	8001504 <LCD_Draw_Circle_Fill>
}
 80017ec:	e008      	b.n	8001800 <LCD_Print_Chip+0x64>
		LCD_Draw_Circle_Fill(x_position,y_position,10,LCD_COLOR_WHITE);
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	b298      	uxth	r0, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	b299      	uxth	r1, r3
 80017f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017fa:	220a      	movs	r2, #10
 80017fc:	f7ff fe82 	bl	8001504 <LCD_Draw_Circle_Fill>
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <LCD_Error_Handler+0x8>

08001814 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001818:	f001 f98b 	bl	8002b32 <STMPE811_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b02      	cmp	r3, #2
 8001820:	d001      	beq.n	8001826 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8001822:	bf00      	nop
 8001824:	e7fd      	b.n	8001822 <InitializeLCDTouch+0xe>
  }
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}

0800182a <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f001 fa35 	bl	8002ca2 <STMPE811_ReadTouch>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <getScheduledEvents>:
uint32_t scheduledEvents;



uint32_t getScheduledEvents ()
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001848:	4b03      	ldr	r3, [pc, #12]	@ (8001858 <getScheduledEvents+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20025a74 	.word	0x20025a74

0800185c <addScheduleEvent>:
void addScheduleEvent (uint32_t event)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	scheduledEvents|=event;
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <addScheduleEvent+0x20>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4313      	orrs	r3, r2
 800186c:	4a03      	ldr	r2, [pc, #12]	@ (800187c <addScheduleEvent+0x20>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	20025a74 	.word	0x20025a74

08001880 <removeSchedulerEvent>:
void removeSchedulerEvent (uint32_t event)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	scheduledEvents&=~(event);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	43da      	mvns	r2, r3
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <removeSchedulerEvent+0x24>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4013      	ands	r3, r2
 8001892:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <removeSchedulerEvent+0x24>)
 8001894:	6013      	str	r3, [r2, #0]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20025a74 	.word	0x20025a74

080018a8 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80018ac:	f000 f9fe 	bl	8001cac <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 80018b0:	20ca      	movs	r0, #202	@ 0xca
 80018b2:	f000 f943 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 80018b6:	20c3      	movs	r0, #195	@ 0xc3
 80018b8:	f000 f94d 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 80018bc:	2008      	movs	r0, #8
 80018be:	f000 f94a 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80018c2:	2050      	movs	r0, #80	@ 0x50
 80018c4:	f000 f947 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80018c8:	20cf      	movs	r0, #207	@ 0xcf
 80018ca:	f000 f937 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 f941 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80018d4:	20c1      	movs	r0, #193	@ 0xc1
 80018d6:	f000 f93e 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80018da:	2030      	movs	r0, #48	@ 0x30
 80018dc:	f000 f93b 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80018e0:	20ed      	movs	r0, #237	@ 0xed
 80018e2:	f000 f92b 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80018e6:	2064      	movs	r0, #100	@ 0x64
 80018e8:	f000 f935 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f932 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80018f2:	2012      	movs	r0, #18
 80018f4:	f000 f92f 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80018f8:	2081      	movs	r0, #129	@ 0x81
 80018fa:	f000 f92c 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80018fe:	20e8      	movs	r0, #232	@ 0xe8
 8001900:	f000 f91c 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001904:	2085      	movs	r0, #133	@ 0x85
 8001906:	f000 f926 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800190a:	2000      	movs	r0, #0
 800190c:	f000 f923 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001910:	2078      	movs	r0, #120	@ 0x78
 8001912:	f000 f920 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001916:	20cb      	movs	r0, #203	@ 0xcb
 8001918:	f000 f910 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 800191c:	2039      	movs	r0, #57	@ 0x39
 800191e:	f000 f91a 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001922:	202c      	movs	r0, #44	@ 0x2c
 8001924:	f000 f917 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001928:	2000      	movs	r0, #0
 800192a:	f000 f914 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800192e:	2034      	movs	r0, #52	@ 0x34
 8001930:	f000 f911 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001934:	2002      	movs	r0, #2
 8001936:	f000 f90e 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800193a:	20f7      	movs	r0, #247	@ 0xf7
 800193c:	f000 f8fe 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001940:	2020      	movs	r0, #32
 8001942:	f000 f908 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001946:	20ea      	movs	r0, #234	@ 0xea
 8001948:	f000 f8f8 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800194c:	2000      	movs	r0, #0
 800194e:	f000 f902 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001952:	2000      	movs	r0, #0
 8001954:	f000 f8ff 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001958:	20b1      	movs	r0, #177	@ 0xb1
 800195a:	f000 f8ef 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800195e:	2000      	movs	r0, #0
 8001960:	f000 f8f9 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001964:	201b      	movs	r0, #27
 8001966:	f000 f8f6 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800196a:	20b6      	movs	r0, #182	@ 0xb6
 800196c:	f000 f8e6 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001970:	200a      	movs	r0, #10
 8001972:	f000 f8f0 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001976:	20a2      	movs	r0, #162	@ 0xa2
 8001978:	f000 f8ed 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800197c:	20c0      	movs	r0, #192	@ 0xc0
 800197e:	f000 f8dd 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001982:	2010      	movs	r0, #16
 8001984:	f000 f8e7 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001988:	20c1      	movs	r0, #193	@ 0xc1
 800198a:	f000 f8d7 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800198e:	2010      	movs	r0, #16
 8001990:	f000 f8e1 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001994:	20c5      	movs	r0, #197	@ 0xc5
 8001996:	f000 f8d1 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800199a:	2045      	movs	r0, #69	@ 0x45
 800199c:	f000 f8db 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 80019a0:	2015      	movs	r0, #21
 80019a2:	f000 f8d8 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 80019a6:	20c7      	movs	r0, #199	@ 0xc7
 80019a8:	f000 f8c8 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 80019ac:	2090      	movs	r0, #144	@ 0x90
 80019ae:	f000 f8d2 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 80019b2:	2036      	movs	r0, #54	@ 0x36
 80019b4:	f000 f8c2 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 80019b8:	20c8      	movs	r0, #200	@ 0xc8
 80019ba:	f000 f8cc 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 80019be:	20f2      	movs	r0, #242	@ 0xf2
 80019c0:	f000 f8bc 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80019c4:	2000      	movs	r0, #0
 80019c6:	f000 f8c6 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80019ca:	20b0      	movs	r0, #176	@ 0xb0
 80019cc:	f000 f8b6 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80019d0:	20c2      	movs	r0, #194	@ 0xc2
 80019d2:	f000 f8c0 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80019d6:	20b6      	movs	r0, #182	@ 0xb6
 80019d8:	f000 f8b0 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80019dc:	200a      	movs	r0, #10
 80019de:	f000 f8ba 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80019e2:	20a7      	movs	r0, #167	@ 0xa7
 80019e4:	f000 f8b7 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80019e8:	2027      	movs	r0, #39	@ 0x27
 80019ea:	f000 f8b4 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80019ee:	2004      	movs	r0, #4
 80019f0:	f000 f8b1 	bl	8001b56 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80019f4:	202a      	movs	r0, #42	@ 0x2a
 80019f6:	f000 f8a1 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80019fa:	2000      	movs	r0, #0
 80019fc:	f000 f8ab 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 f8a8 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f000 f8a5 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001a0c:	20ef      	movs	r0, #239	@ 0xef
 8001a0e:	f000 f8a2 	bl	8001b56 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001a12:	202b      	movs	r0, #43	@ 0x2b
 8001a14:	f000 f892 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f000 f89c 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 f899 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f000 f896 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001a2a:	203f      	movs	r0, #63	@ 0x3f
 8001a2c:	f000 f893 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001a30:	20f6      	movs	r0, #246	@ 0xf6
 8001a32:	f000 f883 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f000 f88d 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f000 f88a 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001a42:	2006      	movs	r0, #6
 8001a44:	f000 f887 	bl	8001b56 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001a48:	202c      	movs	r0, #44	@ 0x2c
 8001a4a:	f000 f877 	bl	8001b3c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001a4e:	20c8      	movs	r0, #200	@ 0xc8
 8001a50:	f000 f9e8 	bl	8001e24 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001a54:	2026      	movs	r0, #38	@ 0x26
 8001a56:	f000 f871 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001a5a:	2001      	movs	r0, #1
 8001a5c:	f000 f87b 	bl	8001b56 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001a60:	20e0      	movs	r0, #224	@ 0xe0
 8001a62:	f000 f86b 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f875 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001a6c:	2029      	movs	r0, #41	@ 0x29
 8001a6e:	f000 f872 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001a72:	2024      	movs	r0, #36	@ 0x24
 8001a74:	f000 f86f 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001a78:	200c      	movs	r0, #12
 8001a7a:	f000 f86c 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001a7e:	200e      	movs	r0, #14
 8001a80:	f000 f869 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001a84:	2009      	movs	r0, #9
 8001a86:	f000 f866 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001a8a:	204e      	movs	r0, #78	@ 0x4e
 8001a8c:	f000 f863 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001a90:	2078      	movs	r0, #120	@ 0x78
 8001a92:	f000 f860 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001a96:	203c      	movs	r0, #60	@ 0x3c
 8001a98:	f000 f85d 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001a9c:	2009      	movs	r0, #9
 8001a9e:	f000 f85a 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001aa2:	2013      	movs	r0, #19
 8001aa4:	f000 f857 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001aa8:	2005      	movs	r0, #5
 8001aaa:	f000 f854 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001aae:	2017      	movs	r0, #23
 8001ab0:	f000 f851 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001ab4:	2011      	movs	r0, #17
 8001ab6:	f000 f84e 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f000 f84b 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001ac0:	20e1      	movs	r0, #225	@ 0xe1
 8001ac2:	f000 f83b 	bl	8001b3c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 f845 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001acc:	2016      	movs	r0, #22
 8001ace:	f000 f842 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001ad2:	201b      	movs	r0, #27
 8001ad4:	f000 f83f 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001ad8:	2004      	movs	r0, #4
 8001ada:	f000 f83c 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001ade:	2011      	movs	r0, #17
 8001ae0:	f000 f839 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8001ae4:	2007      	movs	r0, #7
 8001ae6:	f000 f836 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8001aea:	2031      	movs	r0, #49	@ 0x31
 8001aec:	f000 f833 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8001af0:	2033      	movs	r0, #51	@ 0x33
 8001af2:	f000 f830 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8001af6:	2042      	movs	r0, #66	@ 0x42
 8001af8:	f000 f82d 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001afc:	2005      	movs	r0, #5
 8001afe:	f000 f82a 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001b02:	200c      	movs	r0, #12
 8001b04:	f000 f827 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8001b08:	200a      	movs	r0, #10
 8001b0a:	f000 f824 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8001b0e:	2028      	movs	r0, #40	@ 0x28
 8001b10:	f000 f821 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8001b14:	202f      	movs	r0, #47	@ 0x2f
 8001b16:	f000 f81e 	bl	8001b56 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8001b1a:	200f      	movs	r0, #15
 8001b1c:	f000 f81b 	bl	8001b56 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001b20:	2011      	movs	r0, #17
 8001b22:	f000 f80b 	bl	8001b3c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001b26:	20c8      	movs	r0, #200	@ 0xc8
 8001b28:	f000 f97c 	bl	8001e24 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8001b2c:	2029      	movs	r0, #41	@ 0x29
 8001b2e:	f000 f805 	bl	8001b3c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001b32:	202c      	movs	r0, #44	@ 0x2c
 8001b34:	f000 f802 	bl	8001b3c <ili9341_Write_Reg>
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f949 	bl	8001de0 <LCD_IO_WriteReg>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f91a 	bl	8001d9c <LCD_IO_WriteData>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001b74:	4819      	ldr	r0, [pc, #100]	@ (8001bdc <SPI_Init+0x6c>)
 8001b76:	f004 fc18 	bl	80063aa <HAL_SPI_GetState>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d12b      	bne.n	8001bd8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001b80:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <SPI_Init+0x6c>)
 8001b82:	4a17      	ldr	r2, [pc, #92]	@ (8001be0 <SPI_Init+0x70>)
 8001b84:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <SPI_Init+0x6c>)
 8001b88:	2218      	movs	r2, #24
 8001b8a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001b8c:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <SPI_Init+0x6c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001b92:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <SPI_Init+0x6c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001b98:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <SPI_Init+0x6c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <SPI_Init+0x6c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bdc <SPI_Init+0x6c>)
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001baa:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <SPI_Init+0x6c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <SPI_Init+0x6c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001bb6:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <SPI_Init+0x6c>)
 8001bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bbc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <SPI_Init+0x6c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <SPI_Init+0x6c>)
 8001bc6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bca:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001bcc:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <SPI_Init+0x6c>)
 8001bce:	f000 f833 	bl	8001c38 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001bd2:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <SPI_Init+0x6c>)
 8001bd4:	f004 f9f4 	bl	8005fc0 <HAL_SPI_Init>
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20025a78 	.word	0x20025a78
 8001be0:	40015000 	.word	0x40015000

08001be4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <SPI_Write+0x34>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	1db9      	adds	r1, r7, #6
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	4808      	ldr	r0, [pc, #32]	@ (8001c1c <SPI_Write+0x38>)
 8001bfc:	f004 fa91 	bl	8006122 <HAL_SPI_Transmit>
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8001c0a:	f000 f809 	bl	8001c20 <SPI_Error>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	20025a78 	.word	0x20025a78

08001c20 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001c24:	4803      	ldr	r0, [pc, #12]	@ (8001c34 <SPI_Error+0x14>)
 8001c26:	f004 fa54 	bl	80060d2 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8001c2a:	f7ff ffa1 	bl	8001b70 <SPI_Init>
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20025a78 	.word	0x20025a78

08001c38 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	@ 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <SPI_MspInit+0x6c>)
 8001c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c48:	4a16      	ldr	r2, [pc, #88]	@ (8001ca4 <SPI_MspInit+0x6c>)
 8001c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c50:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <SPI_MspInit+0x6c>)
 8001c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <SPI_MspInit+0x6c>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c64:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca4 <SPI_MspInit+0x6c>)
 8001c66:	f043 0320 	orr.w	r3, r3, #32
 8001c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <SPI_MspInit+0x6c>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001c78:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001c86:	2301      	movs	r3, #1
 8001c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4804      	ldr	r0, [pc, #16]	@ (8001ca8 <SPI_MspInit+0x70>)
 8001c96:	f001 fcb7 	bl	8003608 <HAL_GPIO_Init>
}
 8001c9a:	bf00      	nop
 8001c9c:	3728      	adds	r7, #40	@ 0x28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40021400 	.word	0x40021400

08001cac <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001cb2:	4b36      	ldr	r3, [pc, #216]	@ (8001d8c <LCD_IO_Init+0xe0>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d164      	bne.n	8001d84 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001cba:	4b34      	ldr	r3, [pc, #208]	@ (8001d8c <LCD_IO_Init+0xe0>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	4b32      	ldr	r3, [pc, #200]	@ (8001d90 <LCD_IO_Init+0xe4>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc8:	4a31      	ldr	r2, [pc, #196]	@ (8001d90 <LCD_IO_Init+0xe4>)
 8001cca:	f043 0308 	orr.w	r3, r3, #8
 8001cce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d90 <LCD_IO_Init+0xe4>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001cdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001cee:	f107 030c 	add.w	r3, r7, #12
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4827      	ldr	r0, [pc, #156]	@ (8001d94 <LCD_IO_Init+0xe8>)
 8001cf6:	f001 fc87 	bl	8003608 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b24      	ldr	r3, [pc, #144]	@ (8001d90 <LCD_IO_Init+0xe4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a23      	ldr	r2, [pc, #140]	@ (8001d90 <LCD_IO_Init+0xe4>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <LCD_IO_Init+0xe4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d24:	2302      	movs	r3, #2
 8001d26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4819      	ldr	r0, [pc, #100]	@ (8001d94 <LCD_IO_Init+0xe8>)
 8001d30:	f001 fc6a 	bl	8003608 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <LCD_IO_Init+0xe4>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	4a14      	ldr	r2, [pc, #80]	@ (8001d90 <LCD_IO_Init+0xe4>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <LCD_IO_Init+0xe4>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001d50:	2304      	movs	r3, #4
 8001d52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <LCD_IO_Init+0xec>)
 8001d68:	f001 fc4e 	bl	8003608 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4809      	ldr	r0, [pc, #36]	@ (8001d98 <LCD_IO_Init+0xec>)
 8001d72:	f001 ff01 	bl	8003b78 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001d76:	2201      	movs	r2, #1
 8001d78:	2104      	movs	r1, #4
 8001d7a:	4807      	ldr	r0, [pc, #28]	@ (8001d98 <LCD_IO_Init+0xec>)
 8001d7c:	f001 fefc 	bl	8003b78 <HAL_GPIO_WritePin>

    SPI_Init();
 8001d80:	f7ff fef6 	bl	8001b70 <SPI_Init>
  }
}
 8001d84:	bf00      	nop
 8001d86:	3720      	adds	r7, #32
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20025ad0 	.word	0x20025ad0
 8001d90:	40023800 	.word	0x40023800
 8001d94:	40020c00 	.word	0x40020c00
 8001d98:	40020800 	.word	0x40020800

08001d9c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001da6:	2201      	movs	r2, #1
 8001da8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dac:	480a      	ldr	r0, [pc, #40]	@ (8001dd8 <LCD_IO_WriteData+0x3c>)
 8001dae:	f001 fee3 	bl	8003b78 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001db2:	2200      	movs	r2, #0
 8001db4:	2104      	movs	r1, #4
 8001db6:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <LCD_IO_WriteData+0x40>)
 8001db8:	f001 fede 	bl	8003b78 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff10 	bl	8001be4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	4804      	ldr	r0, [pc, #16]	@ (8001ddc <LCD_IO_WriteData+0x40>)
 8001dca:	f001 fed5 	bl	8003b78 <HAL_GPIO_WritePin>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40020c00 	.word	0x40020c00
 8001ddc:	40020800 	.word	0x40020800

08001de0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001dea:	2200      	movs	r2, #0
 8001dec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001df0:	480a      	ldr	r0, [pc, #40]	@ (8001e1c <LCD_IO_WriteReg+0x3c>)
 8001df2:	f001 fec1 	bl	8003b78 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001df6:	2200      	movs	r2, #0
 8001df8:	2104      	movs	r1, #4
 8001dfa:	4809      	ldr	r0, [pc, #36]	@ (8001e20 <LCD_IO_WriteReg+0x40>)
 8001dfc:	f001 febc 	bl	8003b78 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff feed 	bl	8001be4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	4804      	ldr	r0, [pc, #16]	@ (8001e20 <LCD_IO_WriteReg+0x40>)
 8001e10:	f001 feb2 	bl	8003b78 <HAL_GPIO_WritePin>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40020800 	.word	0x40020800

08001e24 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f001 fab5 	bl	800339c <HAL_Delay>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e40:	f001 fa3a 	bl	80032b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e44:	f000 f852 	bl	8001eec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e48:	f000 fa2e 	bl	80022a8 <MX_GPIO_Init>
	MX_LTDC_Init();
 8001e4c:	f000 f8f8 	bl	8002040 <MX_LTDC_Init>
	//MX_RNG_Init();
//	HAL_RNG_Init(hrng);
	MX_TIM2_Init();
 8001e50:	f000 f9de 	bl	8002210 <MX_TIM2_Init>
	MX_SPI5_Init();
 8001e54:	f000 f9a6 	bl	80021a4 <MX_SPI5_Init>
	MX_I2C3_Init();
 8001e58:	f000 f8b2 	bl	8001fc0 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */
	ApplicationInit(); // Initializes the LCD functionality
 8001e5c:	f7fe fb90 	bl	8000580 <ApplicationInit>
	game_init();
 8001e60:	f7fe fd10 	bl	8000884 <game_init>
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
	LCD_Touch_Player_Count();
 8001e64:	f7ff f820 	bl	8000ea8 <LCD_Touch_Player_Count>
	HAL_Delay(300);
 8001e68:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001e6c:	f001 fa96 	bl	800339c <HAL_Delay>
	LCD_PrintBoard();
 8001e70:	f7ff f86a 	bl	8000f48 <LCD_PrintBoard>
	bool updated_board;
	bool one_player_win;
	int win;
	while(1)
	{
		win=onePlayerMode();
 8001e74:	f7fe ff54 	bl	8000d20 <onePlayerMode>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	60fb      	str	r3, [r7, #12]
		updated_board=LCD_Touch_Move_Chip();
 8001e7c:	f7fe ff98 	bl	8000db0 <LCD_Touch_Move_Chip>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bf14      	ite	ne
 8001e86:	2301      	movne	r3, #1
 8001e88:	2300      	moveq	r3, #0
 8001e8a:	72fb      	strb	r3, [r7, #11]
//		if(updated_board)
//		{
//			LCD_PrintBoard();
//		}

		eventsToRun=getScheduledEvents();
 8001e8c:	f7ff fcda 	bl	8001844 <getScheduledEvents>
 8001e90:	6078      	str	r0, [r7, #4]


		if((eventsToRun&DROP_CHIP_EVENT))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d009      	beq.n	8001eb0 <main+0x76>
		{
			update_game_board();
 8001e9c:	f7fe fd26 	bl	80008ec <update_game_board>
			LCD_PrintBoard();
 8001ea0:	f7ff f852 	bl	8000f48 <LCD_PrintBoard>
			removeSchedulerEvent(DROP_CHIP_EVENT);
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f7ff fceb 	bl	8001880 <removeSchedulerEvent>
			win=check_for_win();
 8001eaa:	f7fe fd8b 	bl	80009c4 <check_for_win>
 8001eae:	60f8      	str	r0, [r7, #12]

		}

		if(win==WIN)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d10d      	bne.n	8001ed2 <main+0x98>
		{
			LCD_Clear(0,LCD_COLOR_BLUE);
 8001eb6:	211f      	movs	r1, #31
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff fb9d 	bl	80015f8 <LCD_Clear>
			HAL_Delay(100);
 8001ebe:	2064      	movs	r0, #100	@ 0x64
 8001ec0:	f001 fa6c 	bl	800339c <HAL_Delay>
//				LCD_PrintBoard();
			displayTime();
 8001ec4:	f7fe fb86 	bl	80005d4 <displayTime>

			resetGame();
 8001ec8:	f7ff f8b4 	bl	8001034 <resetGame>
			LCD_PrintBoard();
 8001ecc:	f7ff f83c 	bl	8000f48 <LCD_PrintBoard>
			continue;
 8001ed0:	e00b      	b.n	8001eea <main+0xb0>

		}

		if(win==TIE)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d1cd      	bne.n	8001e74 <main+0x3a>
		{
			LCD_Clear(0,LCD_COLOR_RED);
 8001ed8:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff fb8b 	bl	80015f8 <LCD_Clear>
			displayTime();
 8001ee2:	f7fe fb77 	bl	80005d4 <displayTime>
			resetGame();
 8001ee6:	f7ff f8a5 	bl	8001034 <resetGame>
		win=onePlayerMode();
 8001eea:	e7c3      	b.n	8001e74 <main+0x3a>

08001eec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b094      	sub	sp, #80	@ 0x50
 8001ef0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef2:	f107 0320 	add.w	r3, r7, #32
 8001ef6:	2230      	movs	r2, #48	@ 0x30
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f004 fe38 	bl	8006b70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	4b28      	ldr	r3, [pc, #160]	@ (8001fb8 <SystemClock_Config+0xcc>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	4a27      	ldr	r2, [pc, #156]	@ (8001fb8 <SystemClock_Config+0xcc>)
 8001f1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f20:	4b25      	ldr	r3, [pc, #148]	@ (8001fb8 <SystemClock_Config+0xcc>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <SystemClock_Config+0xd0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a21      	ldr	r2, [pc, #132]	@ (8001fbc <SystemClock_Config+0xd0>)
 8001f36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <SystemClock_Config+0xd0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f52:	2302      	movs	r3, #2
 8001f54:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001f60:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001f64:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f66:	2302      	movs	r3, #2
 8001f68:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 f960 	bl	8005238 <HAL_RCC_OscConfig>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001f7e:	f000 fb41 	bl	8002604 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f82:	230f      	movs	r3, #15
 8001f84:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f86:	2302      	movs	r3, #2
 8001f88:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f8e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f92:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f98:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	2105      	movs	r1, #5
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 fbc1 	bl	8005728 <HAL_RCC_ClockConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001fac:	f000 fb2a 	bl	8002604 <Error_Handler>
	}
}
 8001fb0:	bf00      	nop
 8001fb2:	3750      	adds	r7, #80	@ 0x50
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40007000 	.word	0x40007000

08001fc0 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <MX_I2C3_Init+0x74>)
 8001fc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002038 <MX_I2C3_Init+0x78>)
 8001fc8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8001fca:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <MX_I2C3_Init+0x74>)
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800203c <MX_I2C3_Init+0x7c>)
 8001fce:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fd0:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <MX_I2C3_Init+0x74>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8001fd6:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <MX_I2C3_Init+0x74>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fdc:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <MX_I2C3_Init+0x74>)
 8001fde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fe2:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe4:	4b13      	ldr	r3, [pc, #76]	@ (8002034 <MX_I2C3_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8001fea:	4b12      	ldr	r3, [pc, #72]	@ (8002034 <MX_I2C3_Init+0x74>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff0:	4b10      	ldr	r3, [pc, #64]	@ (8002034 <MX_I2C3_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <MX_I2C3_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ffc:	480d      	ldr	r0, [pc, #52]	@ (8002034 <MX_I2C3_Init+0x74>)
 8001ffe:	f001 fdd5 	bl	8003bac <HAL_I2C_Init>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 8002008:	f000 fafc 	bl	8002604 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800200c:	2100      	movs	r1, #0
 800200e:	4809      	ldr	r0, [pc, #36]	@ (8002034 <MX_I2C3_Init+0x74>)
 8002010:	f002 fdf0 	bl	8004bf4 <HAL_I2CEx_ConfigAnalogFilter>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_I2C3_Init+0x5e>
	{
		Error_Handler();
 800201a:	f000 faf3 	bl	8002604 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800201e:	2100      	movs	r1, #0
 8002020:	4804      	ldr	r0, [pc, #16]	@ (8002034 <MX_I2C3_Init+0x74>)
 8002022:	f002 fe23 	bl	8004c6c <HAL_I2CEx_ConfigDigitalFilter>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_I2C3_Init+0x70>
	{
		Error_Handler();
 800202c:	f000 faea 	bl	8002604 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20025ad4 	.word	0x20025ad4
 8002038:	40005c00 	.word	0x40005c00
 800203c:	000186a0 	.word	0x000186a0

08002040 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b09a      	sub	sp, #104	@ 0x68
 8002044:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002046:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800204a:	2234      	movs	r2, #52	@ 0x34
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f004 fd8e 	bl	8006b70 <memset>
	LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002054:	463b      	mov	r3, r7
 8002056:	2234      	movs	r2, #52	@ 0x34
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f004 fd88 	bl	8006b70 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8002060:	4b4e      	ldr	r3, [pc, #312]	@ (800219c <MX_LTDC_Init+0x15c>)
 8002062:	4a4f      	ldr	r2, [pc, #316]	@ (80021a0 <MX_LTDC_Init+0x160>)
 8002064:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002066:	4b4d      	ldr	r3, [pc, #308]	@ (800219c <MX_LTDC_Init+0x15c>)
 8002068:	2200      	movs	r2, #0
 800206a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800206c:	4b4b      	ldr	r3, [pc, #300]	@ (800219c <MX_LTDC_Init+0x15c>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002072:	4b4a      	ldr	r3, [pc, #296]	@ (800219c <MX_LTDC_Init+0x15c>)
 8002074:	2200      	movs	r2, #0
 8002076:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002078:	4b48      	ldr	r3, [pc, #288]	@ (800219c <MX_LTDC_Init+0x15c>)
 800207a:	2200      	movs	r2, #0
 800207c:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 7;
 800207e:	4b47      	ldr	r3, [pc, #284]	@ (800219c <MX_LTDC_Init+0x15c>)
 8002080:	2207      	movs	r2, #7
 8002082:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 3;
 8002084:	4b45      	ldr	r3, [pc, #276]	@ (800219c <MX_LTDC_Init+0x15c>)
 8002086:	2203      	movs	r2, #3
 8002088:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 14;
 800208a:	4b44      	ldr	r3, [pc, #272]	@ (800219c <MX_LTDC_Init+0x15c>)
 800208c:	220e      	movs	r2, #14
 800208e:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 5;
 8002090:	4b42      	ldr	r3, [pc, #264]	@ (800219c <MX_LTDC_Init+0x15c>)
 8002092:	2205      	movs	r2, #5
 8002094:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 654;
 8002096:	4b41      	ldr	r3, [pc, #260]	@ (800219c <MX_LTDC_Init+0x15c>)
 8002098:	f240 228e 	movw	r2, #654	@ 0x28e
 800209c:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 485;
 800209e:	4b3f      	ldr	r3, [pc, #252]	@ (800219c <MX_LTDC_Init+0x15c>)
 80020a0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80020a4:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 660;
 80020a6:	4b3d      	ldr	r3, [pc, #244]	@ (800219c <MX_LTDC_Init+0x15c>)
 80020a8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80020ac:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 487;
 80020ae:	4b3b      	ldr	r3, [pc, #236]	@ (800219c <MX_LTDC_Init+0x15c>)
 80020b0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80020b4:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80020b6:	4b39      	ldr	r3, [pc, #228]	@ (800219c <MX_LTDC_Init+0x15c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80020be:	4b37      	ldr	r3, [pc, #220]	@ (800219c <MX_LTDC_Init+0x15c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 80020c6:	4b35      	ldr	r3, [pc, #212]	@ (800219c <MX_LTDC_Init+0x15c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80020ce:	4833      	ldr	r0, [pc, #204]	@ (800219c <MX_LTDC_Init+0x15c>)
 80020d0:	f002 fe0c 	bl	8004cec <HAL_LTDC_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_LTDC_Init+0x9e>
	{
		Error_Handler();
 80020da:	f000 fa93 	bl	8002604 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.WindowX1 = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.WindowY0 = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	pLayerCfg.WindowY1 = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	643b      	str	r3, [r7, #64]	@ 0x40
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80020ee:	2300      	movs	r3, #0
 80020f0:	647b      	str	r3, [r7, #68]	@ 0x44
	pLayerCfg.Alpha = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	64bb      	str	r3, [r7, #72]	@ 0x48
	pLayerCfg.Alpha0 = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80020fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020fe:	653b      	str	r3, [r7, #80]	@ 0x50
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002100:	2305      	movs	r3, #5
 8002102:	657b      	str	r3, [r7, #84]	@ 0x54
	pLayerCfg.FBStartAdress = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	65bb      	str	r3, [r7, #88]	@ 0x58
	pLayerCfg.ImageWidth = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	pLayerCfg.ImageHeight = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	663b      	str	r3, [r7, #96]	@ 0x60
	pLayerCfg.Backcolor.Blue = 0;
 8002110:	2300      	movs	r3, #0
 8002112:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	pLayerCfg.Backcolor.Green = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	pLayerCfg.Backcolor.Red = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002122:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002126:	2200      	movs	r2, #0
 8002128:	4619      	mov	r1, r3
 800212a:	481c      	ldr	r0, [pc, #112]	@ (800219c <MX_LTDC_Init+0x15c>)
 800212c:	f002 feae 	bl	8004e8c <HAL_LTDC_ConfigLayer>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_LTDC_Init+0xfa>
	{
		Error_Handler();
 8002136:	f000 fa65 	bl	8002604 <Error_Handler>
	}
	pLayerCfg1.WindowX0 = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
	pLayerCfg1.WindowX1 = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
	pLayerCfg1.WindowY0 = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	60bb      	str	r3, [r7, #8]
	pLayerCfg1.WindowY1 = 0;
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
	pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
	pLayerCfg1.Alpha = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]
	pLayerCfg1.Alpha0 = 0;
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
	pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800215a:	61fb      	str	r3, [r7, #28]
	pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800215c:	2305      	movs	r3, #5
 800215e:	623b      	str	r3, [r7, #32]
	pLayerCfg1.FBStartAdress = 0;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg1.ImageWidth = 0;
 8002164:	2300      	movs	r3, #0
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg1.ImageHeight = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg1.Backcolor.Blue = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	pLayerCfg1.Backcolor.Green = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	pLayerCfg1.Backcolor.Red = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800217e:	463b      	mov	r3, r7
 8002180:	2201      	movs	r2, #1
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	@ (800219c <MX_LTDC_Init+0x15c>)
 8002186:	f002 fe81 	bl	8004e8c <HAL_LTDC_ConfigLayer>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_LTDC_Init+0x154>
	{
		Error_Handler();
 8002190:	f000 fa38 	bl	8002604 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	3768      	adds	r7, #104	@ 0x68
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20025b28 	.word	0x20025b28
 80021a0:	40016800 	.word	0x40016800

080021a4 <MX_SPI5_Init>:
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 80021a8:	4b17      	ldr	r3, [pc, #92]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021aa:	4a18      	ldr	r2, [pc, #96]	@ (800220c <MX_SPI5_Init+0x68>)
 80021ac:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80021ae:	4b16      	ldr	r3, [pc, #88]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021b4:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80021bc:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021c2:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021d4:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80021e2:	4b09      	ldr	r3, [pc, #36]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021e8:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 80021ee:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021f0:	220a      	movs	r2, #10
 80021f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80021f4:	4804      	ldr	r0, [pc, #16]	@ (8002208 <MX_SPI5_Init+0x64>)
 80021f6:	f003 fee3 	bl	8005fc0 <HAL_SPI_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_SPI5_Init+0x60>
	{
		Error_Handler();
 8002200:	f000 fa00 	bl	8002604 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20025bd0 	.word	0x20025bd0
 800220c:	40015000 	.word	0x40015000

08002210 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002224:	463b      	mov	r3, r7
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800222c:	4b1d      	ldr	r3, [pc, #116]	@ (80022a4 <MX_TIM2_Init+0x94>)
 800222e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002232:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002234:	4b1b      	ldr	r3, [pc, #108]	@ (80022a4 <MX_TIM2_Init+0x94>)
 8002236:	2200      	movs	r2, #0
 8002238:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <MX_TIM2_Init+0x94>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002240:	4b18      	ldr	r3, [pc, #96]	@ (80022a4 <MX_TIM2_Init+0x94>)
 8002242:	f04f 32ff 	mov.w	r2, #4294967295
 8002246:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002248:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <MX_TIM2_Init+0x94>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <MX_TIM2_Init+0x94>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002254:	4813      	ldr	r0, [pc, #76]	@ (80022a4 <MX_TIM2_Init+0x94>)
 8002256:	f004 f993 	bl	8006580 <HAL_TIM_Base_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8002260:	f000 f9d0 	bl	8002604 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002264:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002268:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	4619      	mov	r1, r3
 8002270:	480c      	ldr	r0, [pc, #48]	@ (80022a4 <MX_TIM2_Init+0x94>)
 8002272:	f004 f9d4 	bl	800661e <HAL_TIM_ConfigClockSource>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 800227c:	f000 f9c2 	bl	8002604 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002280:	2300      	movs	r3, #0
 8002282:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002288:	463b      	mov	r3, r7
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <MX_TIM2_Init+0x94>)
 800228e:	f004 fbd3 	bl	8006a38 <HAL_TIMEx_MasterConfigSynchronization>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8002298:	f000 f9b4 	bl	8002604 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800229c:	bf00      	nop
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20025c28 	.word	0x20025c28

080022a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08e      	sub	sp, #56	@ 0x38
 80022ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]
 80022b8:	609a      	str	r2, [r3, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
 80022c2:	4bb2      	ldr	r3, [pc, #712]	@ (800258c <MX_GPIO_Init+0x2e4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	4ab1      	ldr	r2, [pc, #708]	@ (800258c <MX_GPIO_Init+0x2e4>)
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ce:	4baf      	ldr	r3, [pc, #700]	@ (800258c <MX_GPIO_Init+0x2e4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	623b      	str	r3, [r7, #32]
 80022d8:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	4bab      	ldr	r3, [pc, #684]	@ (800258c <MX_GPIO_Init+0x2e4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4aaa      	ldr	r2, [pc, #680]	@ (800258c <MX_GPIO_Init+0x2e4>)
 80022e4:	f043 0320 	orr.w	r3, r3, #32
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4ba8      	ldr	r3, [pc, #672]	@ (800258c <MX_GPIO_Init+0x2e4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	4ba4      	ldr	r3, [pc, #656]	@ (800258c <MX_GPIO_Init+0x2e4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	4aa3      	ldr	r2, [pc, #652]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002304:	6313      	str	r3, [r2, #48]	@ 0x30
 8002306:	4ba1      	ldr	r3, [pc, #644]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	4b9d      	ldr	r3, [pc, #628]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	4a9c      	ldr	r2, [pc, #624]	@ (800258c <MX_GPIO_Init+0x2e4>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6313      	str	r3, [r2, #48]	@ 0x30
 8002322:	4b9a      	ldr	r3, [pc, #616]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	4b96      	ldr	r3, [pc, #600]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	4a95      	ldr	r2, [pc, #596]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6313      	str	r3, [r2, #48]	@ 0x30
 800233e:	4b93      	ldr	r3, [pc, #588]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	4b8f      	ldr	r3, [pc, #572]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	4a8e      	ldr	r2, [pc, #568]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002358:	6313      	str	r3, [r2, #48]	@ 0x30
 800235a:	4b8c      	ldr	r3, [pc, #560]	@ (800258c <MX_GPIO_Init+0x2e4>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	4b88      	ldr	r3, [pc, #544]	@ (800258c <MX_GPIO_Init+0x2e4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a87      	ldr	r2, [pc, #540]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002370:	f043 0310 	orr.w	r3, r3, #16
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b85      	ldr	r3, [pc, #532]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	4b81      	ldr	r3, [pc, #516]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	4a80      	ldr	r2, [pc, #512]	@ (800258c <MX_GPIO_Init+0x2e4>)
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	6313      	str	r3, [r2, #48]	@ 0x30
 8002392:	4b7e      	ldr	r3, [pc, #504]	@ (800258c <MX_GPIO_Init+0x2e4>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800239e:	2200      	movs	r2, #0
 80023a0:	2116      	movs	r1, #22
 80023a2:	487b      	ldr	r0, [pc, #492]	@ (8002590 <MX_GPIO_Init+0x2e8>)
 80023a4:	f001 fbe8 	bl	8003b78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80023a8:	2200      	movs	r2, #0
 80023aa:	2180      	movs	r1, #128	@ 0x80
 80023ac:	4879      	ldr	r0, [pc, #484]	@ (8002594 <MX_GPIO_Init+0x2ec>)
 80023ae:	f001 fbe3 	bl	8003b78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80023b2:	2200      	movs	r2, #0
 80023b4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80023b8:	4877      	ldr	r0, [pc, #476]	@ (8002598 <MX_GPIO_Init+0x2f0>)
 80023ba:	f001 fbdd 	bl	8003b78 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80023be:	2200      	movs	r2, #0
 80023c0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80023c4:	4875      	ldr	r0, [pc, #468]	@ (800259c <MX_GPIO_Init+0x2f4>)
 80023c6:	f001 fbd7 	bl	8003b78 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
	GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80023ca:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80023ce:	627b      	str	r3, [r7, #36]	@ 0x24
			|A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
			|A7_Pin|A8_Pin|A9_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d8:	2303      	movs	r3, #3
 80023da:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023dc:	230c      	movs	r3, #12
 80023de:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023e4:	4619      	mov	r1, r3
 80023e6:	486e      	ldr	r0, [pc, #440]	@ (80025a0 <MX_GPIO_Init+0x2f8>)
 80023e8:	f001 f90e 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDNWE_Pin */
	GPIO_InitStruct.Pin = SDNWE_Pin;
 80023ec:	2301      	movs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f8:	2303      	movs	r3, #3
 80023fa:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80023fc:	230c      	movs	r3, #12
 80023fe:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	4862      	ldr	r0, [pc, #392]	@ (8002590 <MX_GPIO_Init+0x2e8>)
 8002408:	f001 f8fe 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800240c:	2316      	movs	r3, #22
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800241c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002420:	4619      	mov	r1, r3
 8002422:	485b      	ldr	r0, [pc, #364]	@ (8002590 <MX_GPIO_Init+0x2e8>)
 8002424:	f001 f8f0 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002428:	f248 0307 	movw	r3, #32775	@ 0x8007
 800242c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800242e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002432:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800243c:	4619      	mov	r1, r3
 800243e:	4855      	ldr	r0, [pc, #340]	@ (8002594 <MX_GPIO_Init+0x2ec>)
 8002440:	f001 f8e2 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002448:	2301      	movs	r3, #1
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2300      	movs	r3, #0
 8002452:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	484e      	ldr	r0, [pc, #312]	@ (8002594 <MX_GPIO_Init+0x2ec>)
 800245c:	f001 f8d4 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002460:	2320      	movs	r3, #32
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002464:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002468:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800246e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002472:	4619      	mov	r1, r3
 8002474:	4846      	ldr	r0, [pc, #280]	@ (8002590 <MX_GPIO_Init+0x2e8>)
 8002476:	f001 f8c7 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 800247a:	2304      	movs	r3, #4
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800248a:	4619      	mov	r1, r3
 800248c:	4845      	ldr	r0, [pc, #276]	@ (80025a4 <MX_GPIO_Init+0x2fc>)
 800248e:	f001 f8bb 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
	GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002492:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
			|SDCLK_Pin|SDNCAS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024a4:	230c      	movs	r3, #12
 80024a6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ac:	4619      	mov	r1, r3
 80024ae:	483b      	ldr	r0, [pc, #236]	@ (800259c <MX_GPIO_Init+0x2f4>)
 80024b0:	f001 f8aa 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
	GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80024b4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
			|D8_Pin|D9_Pin|D10_Pin|D11_Pin
			|D12_Pin|NBL0_Pin|NBL1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80024c6:	230c      	movs	r3, #12
 80024c8:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ce:	4619      	mov	r1, r3
 80024d0:	4835      	ldr	r0, [pc, #212]	@ (80025a8 <MX_GPIO_Init+0x300>)
 80024d2:	f001 f899 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80024d6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80024e8:	230c      	movs	r3, #12
 80024ea:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f0:	4619      	mov	r1, r3
 80024f2:	482c      	ldr	r0, [pc, #176]	@ (80025a4 <MX_GPIO_Init+0x2fc>)
 80024f4:	f001 f888 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_HS_Pin */
	GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80024f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024fc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fe:	2300      	movs	r3, #0
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800250a:	4619      	mov	r1, r3
 800250c:	4825      	ldr	r0, [pc, #148]	@ (80025a4 <MX_GPIO_Init+0x2fc>)
 800250e:	f001 f87b 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
	GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002512:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
			|D1_Pin|D2_Pin|D3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002524:	230c      	movs	r3, #12
 8002526:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800252c:	4619      	mov	r1, r3
 800252e:	481a      	ldr	r0, [pc, #104]	@ (8002598 <MX_GPIO_Init+0x2f0>)
 8002530:	f001 f86a 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8002534:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800253a:	2300      	movs	r3, #0
 800253c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002546:	4619      	mov	r1, r3
 8002548:	4813      	ldr	r0, [pc, #76]	@ (8002598 <MX_GPIO_Init+0x2f0>)
 800254a:	f001 f85d 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800254e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002554:	2301      	movs	r3, #1
 8002556:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255c:	2300      	movs	r3, #0
 800255e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002564:	4619      	mov	r1, r3
 8002566:	480c      	ldr	r0, [pc, #48]	@ (8002598 <MX_GPIO_Init+0x2f0>)
 8002568:	f001 f84e 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
	GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800256c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257a:	2303      	movs	r3, #3
 800257c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800257e:	2307      	movs	r3, #7
 8002580:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002586:	4619      	mov	r1, r3
 8002588:	e010      	b.n	80025ac <MX_GPIO_Init+0x304>
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	40020800 	.word	0x40020800
 8002594:	40020000 	.word	0x40020000
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021800 	.word	0x40021800
 80025a0:	40021400 	.word	0x40021400
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40021000 	.word	0x40021000
 80025ac:	4812      	ldr	r0, [pc, #72]	@ (80025f8 <MX_GPIO_Init+0x350>)
 80025ae:	f001 f82b 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80025b2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b8:	2301      	movs	r3, #1
 80025ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c8:	4619      	mov	r1, r3
 80025ca:	480c      	ldr	r0, [pc, #48]	@ (80025fc <MX_GPIO_Init+0x354>)
 80025cc:	f001 f81c 	bl	8003608 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
	GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80025d0:	2360      	movs	r3, #96	@ 0x60
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d4:	2302      	movs	r3, #2
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025dc:	2303      	movs	r3, #3
 80025de:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80025e0:	230c      	movs	r3, #12
 80025e2:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e8:	4619      	mov	r1, r3
 80025ea:	4805      	ldr	r0, [pc, #20]	@ (8002600 <MX_GPIO_Init+0x358>)
 80025ec:	f001 f80c 	bl	8003608 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80025f0:	bf00      	nop
 80025f2:	3738      	adds	r7, #56	@ 0x38
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40020000 	.word	0x40020000
 80025fc:	40021800 	.word	0x40021800
 8002600:	40020400 	.word	0x40020400

08002604 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002608:	b672      	cpsid	i
}
 800260a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <Error_Handler+0x8>

08002610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	4b10      	ldr	r3, [pc, #64]	@ (800265c <HAL_MspInit+0x4c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a0f      	ldr	r2, [pc, #60]	@ (800265c <HAL_MspInit+0x4c>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <HAL_MspInit+0x4c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	603b      	str	r3, [r7, #0]
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_MspInit+0x4c>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	4a08      	ldr	r2, [pc, #32]	@ (800265c <HAL_MspInit+0x4c>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	@ 0x40
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_MspInit+0x4c>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800264e:	2007      	movs	r0, #7
 8002650:	f000 ff98 	bl	8003584 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800

08002660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08a      	sub	sp, #40	@ 0x28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 0314 	add.w	r3, r7, #20
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a29      	ldr	r2, [pc, #164]	@ (8002724 <HAL_I2C_MspInit+0xc4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d14b      	bne.n	800271a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b28      	ldr	r3, [pc, #160]	@ (8002728 <HAL_I2C_MspInit+0xc8>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	4a27      	ldr	r2, [pc, #156]	@ (8002728 <HAL_I2C_MspInit+0xc8>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	6313      	str	r3, [r2, #48]	@ 0x30
 8002692:	4b25      	ldr	r3, [pc, #148]	@ (8002728 <HAL_I2C_MspInit+0xc8>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b21      	ldr	r3, [pc, #132]	@ (8002728 <HAL_I2C_MspInit+0xc8>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	4a20      	ldr	r2, [pc, #128]	@ (8002728 <HAL_I2C_MspInit+0xc8>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002728 <HAL_I2C_MspInit+0xc8>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80026ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026c0:	2312      	movs	r3, #18
 80026c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026cc:	2304      	movs	r3, #4
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	4815      	ldr	r0, [pc, #84]	@ (800272c <HAL_I2C_MspInit+0xcc>)
 80026d8:	f000 ff96 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80026dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026e2:	2312      	movs	r3, #18
 80026e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	2300      	movs	r3, #0
 80026ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80026ee:	2304      	movs	r3, #4
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4619      	mov	r1, r3
 80026f8:	480d      	ldr	r0, [pc, #52]	@ (8002730 <HAL_I2C_MspInit+0xd0>)
 80026fa:	f000 ff85 	bl	8003608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <HAL_I2C_MspInit+0xc8>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	4a08      	ldr	r2, [pc, #32]	@ (8002728 <HAL_I2C_MspInit+0xc8>)
 8002708:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800270c:	6413      	str	r3, [r2, #64]	@ 0x40
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_I2C_MspInit+0xc8>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800271a:	bf00      	nop
 800271c:	3728      	adds	r7, #40	@ 0x28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40005c00 	.word	0x40005c00
 8002728:	40023800 	.word	0x40023800
 800272c:	40020800 	.word	0x40020800
 8002730:	40020000 	.word	0x40020000

08002734 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b09a      	sub	sp, #104	@ 0x68
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002750:	2230      	movs	r2, #48	@ 0x30
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f004 fa0b 	bl	8006b70 <memset>
  if(hltdc->Instance==LTDC)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a81      	ldr	r2, [pc, #516]	@ (8002964 <HAL_LTDC_MspInit+0x230>)
 8002760:	4293      	cmp	r3, r2
 8002762:	f040 80fb 	bne.w	800295c <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002766:	2308      	movs	r3, #8
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 800276a:	23c8      	movs	r3, #200	@ 0xc8
 800276c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800276e:	2302      	movs	r3, #2
 8002770:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8002772:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002776:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800277c:	4618      	mov	r0, r3
 800277e:	f003 f9df 	bl	8005b40 <HAL_RCCEx_PeriphCLKConfig>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8002788:	f7ff ff3c 	bl	8002604 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	4b75      	ldr	r3, [pc, #468]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	4a74      	ldr	r2, [pc, #464]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 8002796:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800279a:	6453      	str	r3, [r2, #68]	@ 0x44
 800279c:	4b72      	ldr	r3, [pc, #456]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 800279e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027a4:	623b      	str	r3, [r7, #32]
 80027a6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	4b6e      	ldr	r3, [pc, #440]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	4a6d      	ldr	r2, [pc, #436]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 80027b2:	f043 0320 	orr.w	r3, r3, #32
 80027b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b8:	4b6b      	ldr	r3, [pc, #428]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	61bb      	str	r3, [r7, #24]
 80027c8:	4b67      	ldr	r3, [pc, #412]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	4a66      	ldr	r2, [pc, #408]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d4:	4b64      	ldr	r3, [pc, #400]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 80027d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	4b60      	ldr	r3, [pc, #384]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	4a5f      	ldr	r2, [pc, #380]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 80027ea:	f043 0302 	orr.w	r3, r3, #2
 80027ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	4b59      	ldr	r3, [pc, #356]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	4a58      	ldr	r2, [pc, #352]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 8002806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800280a:	6313      	str	r3, [r2, #48]	@ 0x30
 800280c:	4b56      	ldr	r3, [pc, #344]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	4b52      	ldr	r3, [pc, #328]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	4a51      	ldr	r2, [pc, #324]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 8002822:	f043 0304 	orr.w	r3, r3, #4
 8002826:	6313      	str	r3, [r2, #48]	@ 0x30
 8002828:	4b4f      	ldr	r3, [pc, #316]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	4b4b      	ldr	r3, [pc, #300]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	4a4a      	ldr	r2, [pc, #296]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 800283e:	f043 0308 	orr.w	r3, r3, #8
 8002842:	6313      	str	r3, [r2, #48]	@ 0x30
 8002844:	4b48      	ldr	r3, [pc, #288]	@ (8002968 <HAL_LTDC_MspInit+0x234>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002850:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002854:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002862:	230e      	movs	r3, #14
 8002864:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002866:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800286a:	4619      	mov	r1, r3
 800286c:	483f      	ldr	r0, [pc, #252]	@ (800296c <HAL_LTDC_MspInit+0x238>)
 800286e:	f000 fecb 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002872:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002876:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002884:	230e      	movs	r3, #14
 8002886:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002888:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800288c:	4619      	mov	r1, r3
 800288e:	4838      	ldr	r0, [pc, #224]	@ (8002970 <HAL_LTDC_MspInit+0x23c>)
 8002890:	f000 feba 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002894:	2303      	movs	r3, #3
 8002896:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2300      	movs	r3, #0
 80028a2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80028a4:	2309      	movs	r3, #9
 80028a6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028ac:	4619      	mov	r1, r3
 80028ae:	4831      	ldr	r0, [pc, #196]	@ (8002974 <HAL_LTDC_MspInit+0x240>)
 80028b0:	f000 feaa 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80028b4:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80028b8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028c6:	230e      	movs	r3, #14
 80028c8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028ce:	4619      	mov	r1, r3
 80028d0:	4828      	ldr	r0, [pc, #160]	@ (8002974 <HAL_LTDC_MspInit+0x240>)
 80028d2:	f000 fe99 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80028d6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80028da:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	2300      	movs	r3, #0
 80028e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80028e8:	230e      	movs	r3, #14
 80028ea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80028f0:	4619      	mov	r1, r3
 80028f2:	4821      	ldr	r0, [pc, #132]	@ (8002978 <HAL_LTDC_MspInit+0x244>)
 80028f4:	f000 fe88 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80028f8:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80028fc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fe:	2302      	movs	r3, #2
 8002900:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800290a:	230e      	movs	r3, #14
 800290c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002912:	4619      	mov	r1, r3
 8002914:	4819      	ldr	r0, [pc, #100]	@ (800297c <HAL_LTDC_MspInit+0x248>)
 8002916:	f000 fe77 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800291a:	2348      	movs	r3, #72	@ 0x48
 800291c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800292a:	230e      	movs	r3, #14
 800292c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800292e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002932:	4619      	mov	r1, r3
 8002934:	4812      	ldr	r0, [pc, #72]	@ (8002980 <HAL_LTDC_MspInit+0x24c>)
 8002936:	f000 fe67 	bl	8003608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800293a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800293e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002948:	2300      	movs	r3, #0
 800294a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800294c:	2309      	movs	r3, #9
 800294e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002950:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002954:	4619      	mov	r1, r3
 8002956:	4808      	ldr	r0, [pc, #32]	@ (8002978 <HAL_LTDC_MspInit+0x244>)
 8002958:	f000 fe56 	bl	8003608 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800295c:	bf00      	nop
 800295e:	3768      	adds	r7, #104	@ 0x68
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40016800 	.word	0x40016800
 8002968:	40023800 	.word	0x40023800
 800296c:	40021400 	.word	0x40021400
 8002970:	40020000 	.word	0x40020000
 8002974:	40020400 	.word	0x40020400
 8002978:	40021800 	.word	0x40021800
 800297c:	40020800 	.word	0x40020800
 8002980:	40020c00 	.word	0x40020c00

08002984 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a0b      	ldr	r2, [pc, #44]	@ (80029c0 <HAL_RNG_MspInit+0x3c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10d      	bne.n	80029b2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b0a      	ldr	r3, [pc, #40]	@ (80029c4 <HAL_RNG_MspInit+0x40>)
 800299c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299e:	4a09      	ldr	r2, [pc, #36]	@ (80029c4 <HAL_RNG_MspInit+0x40>)
 80029a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a4:	6353      	str	r3, [r2, #52]	@ 0x34
 80029a6:	4b07      	ldr	r3, [pc, #28]	@ (80029c4 <HAL_RNG_MspInit+0x40>)
 80029a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	50060800 	.word	0x50060800
 80029c4:	40023800 	.word	0x40023800

080029c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	@ 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	@ (8002a4c <HAL_SPI_MspInit+0x84>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d12c      	bne.n	8002a44 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <HAL_SPI_MspInit+0x88>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	4a17      	ldr	r2, [pc, #92]	@ (8002a50 <HAL_SPI_MspInit+0x88>)
 80029f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029fa:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <HAL_SPI_MspInit+0x88>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	4b11      	ldr	r3, [pc, #68]	@ (8002a50 <HAL_SPI_MspInit+0x88>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	4a10      	ldr	r2, [pc, #64]	@ (8002a50 <HAL_SPI_MspInit+0x88>)
 8002a10:	f043 0320 	orr.w	r3, r3, #32
 8002a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a16:	4b0e      	ldr	r3, [pc, #56]	@ (8002a50 <HAL_SPI_MspInit+0x88>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002a22:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a30:	2300      	movs	r3, #0
 8002a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002a34:	2305      	movs	r3, #5
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a38:	f107 0314 	add.w	r3, r7, #20
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4805      	ldr	r0, [pc, #20]	@ (8002a54 <HAL_SPI_MspInit+0x8c>)
 8002a40:	f000 fde2 	bl	8003608 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002a44:	bf00      	nop
 8002a46:	3728      	adds	r7, #40	@ 0x28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40015000 	.word	0x40015000
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40021400 	.word	0x40021400

08002a58 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a08      	ldr	r2, [pc, #32]	@ (8002a88 <HAL_SPI_MspDeInit+0x30>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d10a      	bne.n	8002a80 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002a6a:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <HAL_SPI_MspDeInit+0x34>)
 8002a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6e:	4a07      	ldr	r2, [pc, #28]	@ (8002a8c <HAL_SPI_MspDeInit+0x34>)
 8002a70:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002a74:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002a76:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8002a7a:	4805      	ldr	r0, [pc, #20]	@ (8002a90 <HAL_SPI_MspDeInit+0x38>)
 8002a7c:	f000 ff70 	bl	8003960 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002a80:	bf00      	nop
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40015000 	.word	0x40015000
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40021400 	.word	0x40021400

08002a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa4:	d10d      	bne.n	8002ac2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	4a08      	ldr	r2, [pc, #32]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ab0:	f043 0301 	orr.w	r3, r3, #1
 8002ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ad8:	bf00      	nop
 8002ada:	e7fd      	b.n	8002ad8 <NMI_Handler+0x4>

08002adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <HardFault_Handler+0x4>

08002ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <MemManage_Handler+0x4>

08002aec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af0:	bf00      	nop
 8002af2:	e7fd      	b.n	8002af0 <BusFault_Handler+0x4>

08002af4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <UsageFault_Handler+0x4>

08002afc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b2a:	f000 fc17 	bl	800335c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002b38:	f000 f9ce 	bl	8002ed8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8002b3c:	f000 f98e 	bl	8002e5c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002b40:	2202      	movs	r2, #2
 8002b42:	2103      	movs	r1, #3
 8002b44:	2082      	movs	r0, #130	@ 0x82
 8002b46:	f000 fa1b 	bl	8002f80 <I2C3_Write>
    HAL_Delay(5);
 8002b4a:	2005      	movs	r0, #5
 8002b4c:	f000 fc26 	bl	800339c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002b50:	2200      	movs	r2, #0
 8002b52:	2103      	movs	r1, #3
 8002b54:	2082      	movs	r0, #130	@ 0x82
 8002b56:	f000 fa13 	bl	8002f80 <I2C3_Write>
    HAL_Delay(2);
 8002b5a:	2002      	movs	r0, #2
 8002b5c:	f000 fc1e 	bl	800339c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002b60:	1cba      	adds	r2, r7, #2
 8002b62:	2302      	movs	r3, #2
 8002b64:	2100      	movs	r1, #0
 8002b66:	2082      	movs	r0, #130	@ 0x82
 8002b68:	f000 fa5a 	bl	8003020 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8002b6c:	887b      	ldrh	r3, [r7, #2]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002b72:	887b      	ldrh	r3, [r7, #2]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	f640 0211 	movw	r2, #2065	@ 0x811
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d001      	beq.n	8002b8c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e075      	b.n	8002c78 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	2103      	movs	r1, #3
 8002b90:	2082      	movs	r0, #130	@ 0x82
 8002b92:	f000 f9f5 	bl	8002f80 <I2C3_Write>
    HAL_Delay(5);
 8002b96:	2005      	movs	r0, #5
 8002b98:	f000 fc00 	bl	800339c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2103      	movs	r1, #3
 8002ba0:	2082      	movs	r0, #130	@ 0x82
 8002ba2:	f000 f9ed 	bl	8002f80 <I2C3_Write>
    HAL_Delay(2);
 8002ba6:	2002      	movs	r0, #2
 8002ba8:	f000 fbf8 	bl	800339c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002bac:	2004      	movs	r0, #4
 8002bae:	f000 f867 	bl	8002c80 <STMPE811_Read>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002bb6:	797b      	ldrb	r3, [r7, #5]
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002bbe:	797b      	ldrb	r3, [r7, #5]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	2082      	movs	r0, #130	@ 0x82
 8002bc6:	f000 f9db 	bl	8002f80 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002bca:	2004      	movs	r0, #4
 8002bcc:	f000 f858 	bl	8002c80 <STMPE811_Read>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002bd4:	797b      	ldrb	r3, [r7, #5]
 8002bd6:	f023 0302 	bic.w	r3, r3, #2
 8002bda:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002bdc:	797b      	ldrb	r3, [r7, #5]
 8002bde:	461a      	mov	r2, r3
 8002be0:	2104      	movs	r1, #4
 8002be2:	2082      	movs	r0, #130	@ 0x82
 8002be4:	f000 f9cc 	bl	8002f80 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002be8:	2249      	movs	r2, #73	@ 0x49
 8002bea:	2120      	movs	r1, #32
 8002bec:	2082      	movs	r0, #130	@ 0x82
 8002bee:	f000 f9c7 	bl	8002f80 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	f000 fbd2 	bl	800339c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2121      	movs	r1, #33	@ 0x21
 8002bfc:	2082      	movs	r0, #130	@ 0x82
 8002bfe:	f000 f9bf 	bl	8002f80 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002c02:	2017      	movs	r0, #23
 8002c04:	f000 f83c 	bl	8002c80 <STMPE811_Read>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002c0c:	797b      	ldrb	r3, [r7, #5]
 8002c0e:	f043 031e 	orr.w	r3, r3, #30
 8002c12:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002c14:	797b      	ldrb	r3, [r7, #5]
 8002c16:	461a      	mov	r2, r3
 8002c18:	2117      	movs	r1, #23
 8002c1a:	2082      	movs	r0, #130	@ 0x82
 8002c1c:	f000 f9b0 	bl	8002f80 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002c20:	229a      	movs	r2, #154	@ 0x9a
 8002c22:	2141      	movs	r1, #65	@ 0x41
 8002c24:	2082      	movs	r0, #130	@ 0x82
 8002c26:	f000 f9ab 	bl	8002f80 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	214a      	movs	r1, #74	@ 0x4a
 8002c2e:	2082      	movs	r0, #130	@ 0x82
 8002c30:	f000 f9a6 	bl	8002f80 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002c34:	2201      	movs	r2, #1
 8002c36:	214b      	movs	r1, #75	@ 0x4b
 8002c38:	2082      	movs	r0, #130	@ 0x82
 8002c3a:	f000 f9a1 	bl	8002f80 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	214b      	movs	r1, #75	@ 0x4b
 8002c42:	2082      	movs	r0, #130	@ 0x82
 8002c44:	f000 f99c 	bl	8002f80 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002c48:	2201      	movs	r2, #1
 8002c4a:	2156      	movs	r1, #86	@ 0x56
 8002c4c:	2082      	movs	r0, #130	@ 0x82
 8002c4e:	f000 f997 	bl	8002f80 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002c52:	2201      	movs	r2, #1
 8002c54:	2158      	movs	r1, #88	@ 0x58
 8002c56:	2082      	movs	r0, #130	@ 0x82
 8002c58:	f000 f992 	bl	8002f80 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	2140      	movs	r1, #64	@ 0x40
 8002c60:	2082      	movs	r0, #130	@ 0x82
 8002c62:	f000 f98d 	bl	8002f80 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002c66:	22ff      	movs	r2, #255	@ 0xff
 8002c68:	210b      	movs	r1, #11
 8002c6a:	2082      	movs	r0, #130	@ 0x82
 8002c6c:	f000 f988 	bl	8002f80 <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002c70:	20c8      	movs	r0, #200	@ 0xc8
 8002c72:	f000 fb93 	bl	800339c <HAL_Delay>

    return STMPE811_State_Ok;
 8002c76:	2302      	movs	r3, #2

}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002c8a:	f107 020f 	add.w	r2, r7, #15
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	4619      	mov	r1, r3
 8002c92:	2082      	movs	r0, #130	@ 0x82
 8002c94:	f000 f99e 	bl	8002fd4 <I2C3_Read>

    return readData;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	791a      	ldrb	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002cb2:	2040      	movs	r0, #64	@ 0x40
 8002cb4:	f7ff ffe4 	bl	8002c80 <STMPE811_Read>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	db0e      	blt.n	8002ce2 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002cca:	2201      	movs	r2, #1
 8002ccc:	214b      	movs	r1, #75	@ 0x4b
 8002cce:	2082      	movs	r0, #130	@ 0x82
 8002cd0:	f000 f956 	bl	8002f80 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	214b      	movs	r1, #75	@ 0x4b
 8002cd8:	2082      	movs	r0, #130	@ 0x82
 8002cda:	f000 f951 	bl	8002f80 <I2C3_Write>

        return STMPE811_State_Released;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e0a7      	b.n	8002e32 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	799b      	ldrb	r3, [r3, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d117      	bne.n	8002d1a <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f9b8 	bl	8003064 <TM_STMPE811_ReadX>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	885b      	ldrh	r3, [r3, #2]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fa0b 	bl	8003120 <TM_STMPE811_ReadY>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002d10:	3301      	adds	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	805a      	strh	r2, [r3, #2]
 8002d18:	e048      	b.n	8002dac <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	799b      	ldrb	r3, [r3, #6]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d112      	bne.n	8002d48 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f99c 	bl	8003064 <TM_STMPE811_ReadX>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	885b      	ldrh	r3, [r3, #2]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f9f1 	bl	8003120 <TM_STMPE811_ReadY>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	805a      	strh	r2, [r3, #2]
 8002d46:	e031      	b.n	8002dac <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	799b      	ldrb	r3, [r3, #6]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d115      	bne.n	8002d7c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	885b      	ldrh	r3, [r3, #2]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 f985 	bl	8003064 <TM_STMPE811_ReadX>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f9da 	bl	8003120 <TM_STMPE811_ReadY>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002d72:	3301      	adds	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	801a      	strh	r2, [r3, #0]
 8002d7a:	e017      	b.n	8002dac <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	799b      	ldrb	r3, [r3, #6]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d113      	bne.n	8002dac <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 f96b 	bl	8003064 <TM_STMPE811_ReadX>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f9be 	bl	8003120 <TM_STMPE811_ReadY>
 8002da4:	4603      	mov	r3, r0
 8002da6:	461a      	mov	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002dac:	2201      	movs	r2, #1
 8002dae:	214b      	movs	r1, #75	@ 0x4b
 8002db0:	2082      	movs	r0, #130	@ 0x82
 8002db2:	f000 f8e5 	bl	8002f80 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002db6:	2200      	movs	r2, #0
 8002db8:	214b      	movs	r1, #75	@ 0x4b
 8002dba:	2082      	movs	r0, #130	@ 0x82
 8002dbc:	f000 f8e0 	bl	8002f80 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	799b      	ldrb	r3, [r3, #6]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <STMPE811_ReadTouch+0x12e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	799b      	ldrb	r3, [r3, #6]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d115      	bne.n	8002dfc <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d027      	beq.n	8002e28 <STMPE811_ReadTouch+0x186>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	2bee      	cmp	r3, #238	@ 0xee
 8002dde:	d823      	bhi.n	8002e28 <STMPE811_ReadTouch+0x186>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	885b      	ldrh	r3, [r3, #2]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d01f      	beq.n	8002e28 <STMPE811_ReadTouch+0x186>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	885b      	ldrh	r3, [r3, #2]
 8002dec:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002df0:	d81a      	bhi.n	8002e28 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	e01a      	b.n	8002e32 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d012      	beq.n	8002e2a <STMPE811_ReadTouch+0x188>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002e0c:	d80d      	bhi.n	8002e2a <STMPE811_ReadTouch+0x188>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	885b      	ldrh	r3, [r3, #2]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <STMPE811_ReadTouch+0x188>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	885b      	ldrh	r3, [r3, #2]
 8002e1a:	2bee      	cmp	r3, #238	@ 0xee
 8002e1c:	d805      	bhi.n	8002e2a <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e004      	b.n	8002e32 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002e28:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002e30:	2301      	movs	r3, #1
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002e40:	4b05      	ldr	r3, [pc, #20]	@ (8002e58 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002e48:	bf00      	nop
 8002e4a:	e7fd      	b.n	8002e48 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20025cc4 	.word	0x20025cc4

08002e5c <I2C3_Init>:

static void I2C3_Init()
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	603b      	str	r3, [r7, #0]
 8002e66:	4b18      	ldr	r3, [pc, #96]	@ (8002ec8 <I2C3_Init+0x6c>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	4a17      	ldr	r2, [pc, #92]	@ (8002ec8 <I2C3_Init+0x6c>)
 8002e6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e72:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <I2C3_Init+0x6c>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002e7e:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <I2C3_Init+0x70>)
 8002e80:	4a13      	ldr	r2, [pc, #76]	@ (8002ed0 <I2C3_Init+0x74>)
 8002e82:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <I2C3_Init+0x70>)
 8002e86:	4a13      	ldr	r2, [pc, #76]	@ (8002ed4 <I2C3_Init+0x78>)
 8002e88:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ecc <I2C3_Init+0x70>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002e90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <I2C3_Init+0x70>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e96:	4b0d      	ldr	r3, [pc, #52]	@ (8002ecc <I2C3_Init+0x70>)
 8002e98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e9c:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <I2C3_Init+0x70>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <I2C3_Init+0x70>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002eaa:	4808      	ldr	r0, [pc, #32]	@ (8002ecc <I2C3_Init+0x70>)
 8002eac:	f000 fe7e 	bl	8003bac <HAL_I2C_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002eba:	bf00      	nop
 8002ebc:	e7fd      	b.n	8002eba <I2C3_Init+0x5e>
    }
    return;
 8002ebe:	bf00      	nop
}
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	20025c70 	.word	0x20025c70
 8002ed0:	40005c00 	.word	0x40005c00
 8002ed4:	000186a0 	.word	0x000186a0

08002ed8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ede:	f107 030c 	add.w	r3, r7, #12
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60bb      	str	r3, [r7, #8]
 8002ef2:	4b20      	ldr	r3, [pc, #128]	@ (8002f74 <I2C3_MspInit+0x9c>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f74 <I2C3_MspInit+0x9c>)
 8002ef8:	f043 0304 	orr.w	r3, r3, #4
 8002efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efe:	4b1d      	ldr	r3, [pc, #116]	@ (8002f74 <I2C3_MspInit+0x9c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	4b19      	ldr	r3, [pc, #100]	@ (8002f74 <I2C3_MspInit+0x9c>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	4a18      	ldr	r2, [pc, #96]	@ (8002f74 <I2C3_MspInit+0x9c>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1a:	4b16      	ldr	r3, [pc, #88]	@ (8002f74 <I2C3_MspInit+0x9c>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	607b      	str	r3, [r7, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f2c:	2312      	movs	r3, #18
 8002f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f38:	2304      	movs	r3, #4
 8002f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002f3c:	f107 030c 	add.w	r3, r7, #12
 8002f40:	4619      	mov	r1, r3
 8002f42:	480d      	ldr	r0, [pc, #52]	@ (8002f78 <I2C3_MspInit+0xa0>)
 8002f44:	f000 fb60 	bl	8003608 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002f48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f4e:	2312      	movs	r3, #18
 8002f50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	4619      	mov	r1, r3
 8002f64:	4805      	ldr	r0, [pc, #20]	@ (8002f7c <I2C3_MspInit+0xa4>)
 8002f66:	f000 fb4f 	bl	8003608 <HAL_GPIO_Init>
    
}
 8002f6a:	bf00      	nop
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	40020000 	.word	0x40020000

08002f80 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af04      	add	r7, sp, #16
 8002f86:	4603      	mov	r3, r0
 8002f88:	80fb      	strh	r3, [r7, #6]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	717b      	strb	r3, [r7, #5]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002f92:	793b      	ldrb	r3, [r7, #4]
 8002f94:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002f96:	797b      	ldrb	r3, [r7, #5]
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	88f9      	ldrh	r1, [r7, #6]
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <I2C3_Write+0x48>)
 8002f9e:	9302      	str	r3, [sp, #8]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	f107 030f 	add.w	r3, r7, #15
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2301      	movs	r3, #1
 8002fac:	4807      	ldr	r0, [pc, #28]	@ (8002fcc <I2C3_Write+0x4c>)
 8002fae:	f000 ff41 	bl	8003e34 <HAL_I2C_Mem_Write>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <I2C3_Write+0x50>)
 8002fb8:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002fba:	f7ff ff3f 	bl	8002e3c <verifyHAL_I2C_IS_OKAY>
}
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	0003d090 	.word	0x0003d090
 8002fcc:	20025c70 	.word	0x20025c70
 8002fd0:	20025cc4 	.word	0x20025cc4

08002fd4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af04      	add	r7, sp, #16
 8002fda:	4603      	mov	r3, r0
 8002fdc:	603a      	str	r2, [r7, #0]
 8002fde:	71fb      	strb	r3, [r7, #7]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	b299      	uxth	r1, r3
 8002fe8:	79bb      	ldrb	r3, [r7, #6]
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <I2C3_Read+0x40>)
 8002fee:	9302      	str	r3, [sp, #8]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	9301      	str	r3, [sp, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	4807      	ldr	r0, [pc, #28]	@ (8003018 <I2C3_Read+0x44>)
 8002ffc:	f001 f814 	bl	8004028 <HAL_I2C_Mem_Read>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4b05      	ldr	r3, [pc, #20]	@ (800301c <I2C3_Read+0x48>)
 8003006:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003008:	f7ff ff18 	bl	8002e3c <verifyHAL_I2C_IS_OKAY>
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	0003d090 	.word	0x0003d090
 8003018:	20025c70 	.word	0x20025c70
 800301c:	20025cc4 	.word	0x20025cc4

08003020 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af04      	add	r7, sp, #16
 8003026:	603a      	str	r2, [r7, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4603      	mov	r3, r0
 800302c:	71fb      	strb	r3, [r7, #7]
 800302e:	460b      	mov	r3, r1
 8003030:	71bb      	strb	r3, [r7, #6]
 8003032:	4613      	mov	r3, r2
 8003034:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	b299      	uxth	r1, r3
 800303a:	79bb      	ldrb	r3, [r7, #6]
 800303c:	b29a      	uxth	r2, r3
 800303e:	4b07      	ldr	r3, [pc, #28]	@ (800305c <I2C3_MulitByteRead+0x3c>)
 8003040:	9302      	str	r3, [sp, #8]
 8003042:	88bb      	ldrh	r3, [r7, #4]
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	2301      	movs	r3, #1
 800304c:	4804      	ldr	r0, [pc, #16]	@ (8003060 <I2C3_MulitByteRead+0x40>)
 800304e:	f000 ffeb 	bl	8004028 <HAL_I2C_Mem_Read>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	0003d090 	.word	0x0003d090
 8003060:	20025c70 	.word	0x20025c70

08003064 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800306e:	204d      	movs	r0, #77	@ 0x4d
 8003070:	f7ff fe06 	bl	8002c80 <STMPE811_Read>
 8003074:	4603      	mov	r3, r0
 8003076:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003078:	204e      	movs	r0, #78	@ 0x4e
 800307a:	f7ff fe01 	bl	8002c80 <STMPE811_Read>
 800307e:	4603      	mov	r3, r0
 8003080:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003082:	7a7b      	ldrb	r3, [r7, #9]
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	b21a      	sxth	r2, r3
 8003088:	7a3b      	ldrb	r3, [r7, #8]
 800308a:	b21b      	sxth	r3, r3
 800308c:	4313      	orrs	r3, r2
 800308e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8003090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003094:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003098:	4293      	cmp	r3, r2
 800309a:	dc06      	bgt.n	80030aa <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 800309c:	89fb      	ldrh	r3, [r7, #14]
 800309e:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80030a2:	330c      	adds	r3, #12
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	81fb      	strh	r3, [r7, #14]
 80030a8:	e005      	b.n	80030b6 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80030aa:	89fb      	ldrh	r3, [r7, #14]
 80030ac:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80030b0:	3308      	adds	r3, #8
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80030b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030ba:	4a18      	ldr	r2, [pc, #96]	@ (800311c <TM_STMPE811_ReadX+0xb8>)
 80030bc:	fb82 1203 	smull	r1, r2, r2, r3
 80030c0:	441a      	add	r2, r3
 80030c2:	10d2      	asrs	r2, r2, #3
 80030c4:	17db      	asrs	r3, r3, #31
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80030ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030ce:	2bef      	cmp	r3, #239	@ 0xef
 80030d0:	dd02      	ble.n	80030d8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80030d2:	23ef      	movs	r3, #239	@ 0xef
 80030d4:	81fb      	strh	r3, [r7, #14]
 80030d6:	e005      	b.n	80030e4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80030d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	da01      	bge.n	80030e4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80030e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	dd05      	ble.n	80030fa <TM_STMPE811_ReadX+0x96>
 80030ee:	89fa      	ldrh	r2, [r7, #14]
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	e004      	b.n	8003104 <TM_STMPE811_ReadX+0xa0>
 80030fa:	89fb      	ldrh	r3, [r7, #14]
 80030fc:	88fa      	ldrh	r2, [r7, #6]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	b29b      	uxth	r3, r3
 8003102:	b21b      	sxth	r3, r3
 8003104:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003106:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800310a:	2b04      	cmp	r3, #4
 800310c:	dd01      	ble.n	8003112 <TM_STMPE811_ReadX+0xae>
        return val;
 800310e:	89fb      	ldrh	r3, [r7, #14]
 8003110:	e000      	b.n	8003114 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003112:	88fb      	ldrh	r3, [r7, #6]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	88888889 	.word	0x88888889

08003120 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800312a:	204f      	movs	r0, #79	@ 0x4f
 800312c:	f7ff fda8 	bl	8002c80 <STMPE811_Read>
 8003130:	4603      	mov	r3, r0
 8003132:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003134:	2050      	movs	r0, #80	@ 0x50
 8003136:	f7ff fda3 	bl	8002c80 <STMPE811_Read>
 800313a:	4603      	mov	r3, r0
 800313c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800313e:	7a7b      	ldrb	r3, [r7, #9]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	b21a      	sxth	r2, r3
 8003144:	7a3b      	ldrb	r3, [r7, #8]
 8003146:	b21b      	sxth	r3, r3
 8003148:	4313      	orrs	r3, r2
 800314a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 800314c:	89fb      	ldrh	r3, [r7, #14]
 800314e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003152:	b29b      	uxth	r3, r3
 8003154:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003156:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800315a:	4a19      	ldr	r2, [pc, #100]	@ (80031c0 <TM_STMPE811_ReadY+0xa0>)
 800315c:	fb82 1203 	smull	r1, r2, r2, r3
 8003160:	1052      	asrs	r2, r2, #1
 8003162:	17db      	asrs	r3, r3, #31
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003168:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800316c:	2b00      	cmp	r3, #0
 800316e:	dc02      	bgt.n	8003176 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	81fb      	strh	r3, [r7, #14]
 8003174:	e007      	b.n	8003186 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800317a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800317e:	db02      	blt.n	8003186 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003180:	f240 133f 	movw	r3, #319	@ 0x13f
 8003184:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8003186:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	429a      	cmp	r2, r3
 800318e:	dd05      	ble.n	800319c <TM_STMPE811_ReadY+0x7c>
 8003190:	89fa      	ldrh	r2, [r7, #14]
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	b29b      	uxth	r3, r3
 8003198:	b21b      	sxth	r3, r3
 800319a:	e004      	b.n	80031a6 <TM_STMPE811_ReadY+0x86>
 800319c:	89fb      	ldrh	r3, [r7, #14]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	b21b      	sxth	r3, r3
 80031a6:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80031a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	dd01      	ble.n	80031b4 <TM_STMPE811_ReadY+0x94>
        return val;
 80031b0:	89fb      	ldrh	r3, [r7, #14]
 80031b2:	e000      	b.n	80031b6 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80031b4:	88fb      	ldrh	r3, [r7, #6]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	2e8ba2e9 	.word	0x2e8ba2e9

080031c4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031dc:	4a14      	ldr	r2, [pc, #80]	@ (8003230 <_sbrk+0x5c>)
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <_sbrk+0x60>)
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e8:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <_sbrk+0x64>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f0:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <_sbrk+0x64>)
 80031f2:	4a12      	ldr	r2, [pc, #72]	@ (800323c <_sbrk+0x68>)
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d207      	bcs.n	8003214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003204:	f003 fcbc 	bl	8006b80 <__errno>
 8003208:	4603      	mov	r3, r0
 800320a:	220c      	movs	r2, #12
 800320c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	e009      	b.n	8003228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003214:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800321a:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <_sbrk+0x64>)
 8003224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20030000 	.word	0x20030000
 8003234:	00000400 	.word	0x00000400
 8003238:	20025cc8 	.word	0x20025cc8
 800323c:	20025e18 	.word	0x20025e18

08003240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003244:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <SystemInit+0x20>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	4a05      	ldr	r2, [pc, #20]	@ (8003260 <SystemInit+0x20>)
 800324c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003250:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003264:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800329c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003268:	f7ff ffea 	bl	8003240 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800326c:	480c      	ldr	r0, [pc, #48]	@ (80032a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800326e:	490d      	ldr	r1, [pc, #52]	@ (80032a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003270:	4a0d      	ldr	r2, [pc, #52]	@ (80032a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003274:	e002      	b.n	800327c <LoopCopyDataInit>

08003276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800327a:	3304      	adds	r3, #4

0800327c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800327c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003280:	d3f9      	bcc.n	8003276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003282:	4a0a      	ldr	r2, [pc, #40]	@ (80032ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003284:	4c0a      	ldr	r4, [pc, #40]	@ (80032b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003288:	e001      	b.n	800328e <LoopFillZerobss>

0800328a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800328a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800328c:	3204      	adds	r2, #4

0800328e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003290:	d3fb      	bcc.n	800328a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003292:	f003 fc7b 	bl	8006b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003296:	f7fe fdd0 	bl	8001e3a <main>
  bx  lr    
 800329a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800329c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80032a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80032a8:	080086c8 	.word	0x080086c8
  ldr r2, =_sbss
 80032ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80032b0:	20025e18 	.word	0x20025e18

080032b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032b4:	e7fe      	b.n	80032b4 <ADC_IRQHandler>
	...

080032b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032bc:	4b0e      	ldr	r3, [pc, #56]	@ (80032f8 <HAL_Init+0x40>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0d      	ldr	r2, [pc, #52]	@ (80032f8 <HAL_Init+0x40>)
 80032c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032c8:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <HAL_Init+0x40>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0a      	ldr	r2, [pc, #40]	@ (80032f8 <HAL_Init+0x40>)
 80032ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d4:	4b08      	ldr	r3, [pc, #32]	@ (80032f8 <HAL_Init+0x40>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a07      	ldr	r2, [pc, #28]	@ (80032f8 <HAL_Init+0x40>)
 80032da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e0:	2003      	movs	r0, #3
 80032e2:	f000 f94f 	bl	8003584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f000 f808 	bl	80032fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032ec:	f7ff f990 	bl	8002610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00

080032fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003304:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <HAL_InitTick+0x54>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b12      	ldr	r3, [pc, #72]	@ (8003354 <HAL_InitTick+0x58>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003312:	fbb3 f3f1 	udiv	r3, r3, r1
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f967 	bl	80035ee <HAL_SYSTICK_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e00e      	b.n	8003348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b0f      	cmp	r3, #15
 800332e:	d80a      	bhi.n	8003346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003330:	2200      	movs	r2, #0
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	f04f 30ff 	mov.w	r0, #4294967295
 8003338:	f000 f92f 	bl	800359a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800333c:	4a06      	ldr	r2, [pc, #24]	@ (8003358 <HAL_InitTick+0x5c>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000010 	.word	0x20000010
 8003354:	20000018 	.word	0x20000018
 8003358:	20000014 	.word	0x20000014

0800335c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003360:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_IncTick+0x20>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <HAL_IncTick+0x24>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4413      	add	r3, r2
 800336c:	4a04      	ldr	r2, [pc, #16]	@ (8003380 <HAL_IncTick+0x24>)
 800336e:	6013      	str	r3, [r2, #0]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000018 	.word	0x20000018
 8003380:	20025ccc 	.word	0x20025ccc

08003384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return uwTick;
 8003388:	4b03      	ldr	r3, [pc, #12]	@ (8003398 <HAL_GetTick+0x14>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20025ccc 	.word	0x20025ccc

0800339c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a4:	f7ff ffee 	bl	8003384 <HAL_GetTick>
 80033a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d005      	beq.n	80033c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b6:	4b0a      	ldr	r3, [pc, #40]	@ (80033e0 <HAL_Delay+0x44>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033c2:	bf00      	nop
 80033c4:	f7ff ffde 	bl	8003384 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d8f7      	bhi.n	80033c4 <HAL_Delay+0x28>
  {
  }
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000018 	.word	0x20000018

080033e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800340c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003410:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003416:	4a04      	ldr	r2, [pc, #16]	@ (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	60d3      	str	r3, [r2, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003430:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <__NVIC_GetPriorityGrouping+0x18>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 0307 	and.w	r3, r3, #7
}
 800343a:	4618      	mov	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	2b00      	cmp	r3, #0
 8003458:	db0b      	blt.n	8003472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800345a:	79fb      	ldrb	r3, [r7, #7]
 800345c:	f003 021f 	and.w	r2, r3, #31
 8003460:	4907      	ldr	r1, [pc, #28]	@ (8003480 <__NVIC_EnableIRQ+0x38>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	2001      	movs	r0, #1
 800346a:	fa00 f202 	lsl.w	r2, r0, r2
 800346e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	e000e100 	.word	0xe000e100

08003484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	6039      	str	r1, [r7, #0]
 800348e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003494:	2b00      	cmp	r3, #0
 8003496:	db0a      	blt.n	80034ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	490c      	ldr	r1, [pc, #48]	@ (80034d0 <__NVIC_SetPriority+0x4c>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	0112      	lsls	r2, r2, #4
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	440b      	add	r3, r1
 80034a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034ac:	e00a      	b.n	80034c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	4908      	ldr	r1, [pc, #32]	@ (80034d4 <__NVIC_SetPriority+0x50>)
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	3b04      	subs	r3, #4
 80034bc:	0112      	lsls	r2, r2, #4
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	440b      	add	r3, r1
 80034c2:	761a      	strb	r2, [r3, #24]
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	e000e100 	.word	0xe000e100
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d8:	b480      	push	{r7}
 80034da:	b089      	sub	sp, #36	@ 0x24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f1c3 0307 	rsb	r3, r3, #7
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	bf28      	it	cs
 80034f6:	2304      	movcs	r3, #4
 80034f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d902      	bls.n	8003508 <NVIC_EncodePriority+0x30>
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3b03      	subs	r3, #3
 8003506:	e000      	b.n	800350a <NVIC_EncodePriority+0x32>
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	f04f 32ff 	mov.w	r2, #4294967295
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43da      	mvns	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	401a      	ands	r2, r3
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003520:	f04f 31ff 	mov.w	r1, #4294967295
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	fa01 f303 	lsl.w	r3, r1, r3
 800352a:	43d9      	mvns	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003530:	4313      	orrs	r3, r2
         );
}
 8003532:	4618      	mov	r0, r3
 8003534:	3724      	adds	r7, #36	@ 0x24
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3b01      	subs	r3, #1
 800354c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003550:	d301      	bcc.n	8003556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003552:	2301      	movs	r3, #1
 8003554:	e00f      	b.n	8003576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003556:	4a0a      	ldr	r2, [pc, #40]	@ (8003580 <SysTick_Config+0x40>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800355e:	210f      	movs	r1, #15
 8003560:	f04f 30ff 	mov.w	r0, #4294967295
 8003564:	f7ff ff8e 	bl	8003484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003568:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <SysTick_Config+0x40>)
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800356e:	4b04      	ldr	r3, [pc, #16]	@ (8003580 <SysTick_Config+0x40>)
 8003570:	2207      	movs	r2, #7
 8003572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	e000e010 	.word	0xe000e010

08003584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ff29 	bl	80033e4 <__NVIC_SetPriorityGrouping>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800359a:	b580      	push	{r7, lr}
 800359c:	b086      	sub	sp, #24
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	60b9      	str	r1, [r7, #8]
 80035a4:	607a      	str	r2, [r7, #4]
 80035a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035ac:	f7ff ff3e 	bl	800342c <__NVIC_GetPriorityGrouping>
 80035b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	6978      	ldr	r0, [r7, #20]
 80035b8:	f7ff ff8e 	bl	80034d8 <NVIC_EncodePriority>
 80035bc:	4602      	mov	r2, r0
 80035be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff5d 	bl	8003484 <__NVIC_SetPriority>
}
 80035ca:	bf00      	nop
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	4603      	mov	r3, r0
 80035da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff31 	bl	8003448 <__NVIC_EnableIRQ>
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff ffa2 	bl	8003540 <SysTick_Config>
 80035fc:	4603      	mov	r3, r0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
	...

08003608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	@ 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800361a:	2300      	movs	r3, #0
 800361c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e177      	b.n	8003914 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003624:	2201      	movs	r2, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	429a      	cmp	r2, r3
 800363e:	f040 8166 	bne.w	800390e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d005      	beq.n	800365a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003656:	2b02      	cmp	r3, #2
 8003658:	d130      	bne.n	80036bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	2203      	movs	r2, #3
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	fa02 f303 	lsl.w	r3, r2, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003690:	2201      	movs	r2, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f003 0201 	and.w	r2, r3, #1
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0303 	and.w	r3, r3, #3
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d017      	beq.n	80036f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	2203      	movs	r2, #3
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 0303 	and.w	r3, r3, #3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d123      	bne.n	800374c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	08da      	lsrs	r2, r3, #3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3208      	adds	r2, #8
 800370c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	220f      	movs	r2, #15
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	08da      	lsrs	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3208      	adds	r2, #8
 8003746:	69b9      	ldr	r1, [r7, #24]
 8003748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	2203      	movs	r2, #3
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0203 	and.w	r2, r3, #3
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 80c0 	beq.w	800390e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	4b66      	ldr	r3, [pc, #408]	@ (800392c <HAL_GPIO_Init+0x324>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	4a65      	ldr	r2, [pc, #404]	@ (800392c <HAL_GPIO_Init+0x324>)
 8003798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800379c:	6453      	str	r3, [r2, #68]	@ 0x44
 800379e:	4b63      	ldr	r3, [pc, #396]	@ (800392c <HAL_GPIO_Init+0x324>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037aa:	4a61      	ldr	r2, [pc, #388]	@ (8003930 <HAL_GPIO_Init+0x328>)
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	089b      	lsrs	r3, r3, #2
 80037b0:	3302      	adds	r3, #2
 80037b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	220f      	movs	r2, #15
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	4013      	ands	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a58      	ldr	r2, [pc, #352]	@ (8003934 <HAL_GPIO_Init+0x32c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d037      	beq.n	8003846 <HAL_GPIO_Init+0x23e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a57      	ldr	r2, [pc, #348]	@ (8003938 <HAL_GPIO_Init+0x330>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d031      	beq.n	8003842 <HAL_GPIO_Init+0x23a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a56      	ldr	r2, [pc, #344]	@ (800393c <HAL_GPIO_Init+0x334>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d02b      	beq.n	800383e <HAL_GPIO_Init+0x236>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a55      	ldr	r2, [pc, #340]	@ (8003940 <HAL_GPIO_Init+0x338>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d025      	beq.n	800383a <HAL_GPIO_Init+0x232>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a54      	ldr	r2, [pc, #336]	@ (8003944 <HAL_GPIO_Init+0x33c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01f      	beq.n	8003836 <HAL_GPIO_Init+0x22e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a53      	ldr	r2, [pc, #332]	@ (8003948 <HAL_GPIO_Init+0x340>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d019      	beq.n	8003832 <HAL_GPIO_Init+0x22a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a52      	ldr	r2, [pc, #328]	@ (800394c <HAL_GPIO_Init+0x344>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_GPIO_Init+0x226>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a51      	ldr	r2, [pc, #324]	@ (8003950 <HAL_GPIO_Init+0x348>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00d      	beq.n	800382a <HAL_GPIO_Init+0x222>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a50      	ldr	r2, [pc, #320]	@ (8003954 <HAL_GPIO_Init+0x34c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <HAL_GPIO_Init+0x21e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4f      	ldr	r2, [pc, #316]	@ (8003958 <HAL_GPIO_Init+0x350>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_GPIO_Init+0x21a>
 800381e:	2309      	movs	r3, #9
 8003820:	e012      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003822:	230a      	movs	r3, #10
 8003824:	e010      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003826:	2308      	movs	r3, #8
 8003828:	e00e      	b.n	8003848 <HAL_GPIO_Init+0x240>
 800382a:	2307      	movs	r3, #7
 800382c:	e00c      	b.n	8003848 <HAL_GPIO_Init+0x240>
 800382e:	2306      	movs	r3, #6
 8003830:	e00a      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003832:	2305      	movs	r3, #5
 8003834:	e008      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003836:	2304      	movs	r3, #4
 8003838:	e006      	b.n	8003848 <HAL_GPIO_Init+0x240>
 800383a:	2303      	movs	r3, #3
 800383c:	e004      	b.n	8003848 <HAL_GPIO_Init+0x240>
 800383e:	2302      	movs	r3, #2
 8003840:	e002      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_GPIO_Init+0x240>
 8003846:	2300      	movs	r3, #0
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	f002 0203 	and.w	r2, r2, #3
 800384e:	0092      	lsls	r2, r2, #2
 8003850:	4093      	lsls	r3, r2
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003858:	4935      	ldr	r1, [pc, #212]	@ (8003930 <HAL_GPIO_Init+0x328>)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	3302      	adds	r3, #2
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003866:	4b3d      	ldr	r3, [pc, #244]	@ (800395c <HAL_GPIO_Init+0x354>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800388a:	4a34      	ldr	r2, [pc, #208]	@ (800395c <HAL_GPIO_Init+0x354>)
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003890:	4b32      	ldr	r3, [pc, #200]	@ (800395c <HAL_GPIO_Init+0x354>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038b4:	4a29      	ldr	r2, [pc, #164]	@ (800395c <HAL_GPIO_Init+0x354>)
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038ba:	4b28      	ldr	r3, [pc, #160]	@ (800395c <HAL_GPIO_Init+0x354>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038de:	4a1f      	ldr	r2, [pc, #124]	@ (800395c <HAL_GPIO_Init+0x354>)
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038e4:	4b1d      	ldr	r3, [pc, #116]	@ (800395c <HAL_GPIO_Init+0x354>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003908:	4a14      	ldr	r2, [pc, #80]	@ (800395c <HAL_GPIO_Init+0x354>)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3301      	adds	r3, #1
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	2b0f      	cmp	r3, #15
 8003918:	f67f ae84 	bls.w	8003624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	3724      	adds	r7, #36	@ 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40023800 	.word	0x40023800
 8003930:	40013800 	.word	0x40013800
 8003934:	40020000 	.word	0x40020000
 8003938:	40020400 	.word	0x40020400
 800393c:	40020800 	.word	0x40020800
 8003940:	40020c00 	.word	0x40020c00
 8003944:	40021000 	.word	0x40021000
 8003948:	40021400 	.word	0x40021400
 800394c:	40021800 	.word	0x40021800
 8003950:	40021c00 	.word	0x40021c00
 8003954:	40022000 	.word	0x40022000
 8003958:	40022400 	.word	0x40022400
 800395c:	40013c00 	.word	0x40013c00

08003960 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	e0d9      	b.n	8003b30 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800397c:	2201      	movs	r2, #1
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4013      	ands	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	429a      	cmp	r2, r3
 8003994:	f040 80c9 	bne.w	8003b2a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003998:	4a6b      	ldr	r2, [pc, #428]	@ (8003b48 <HAL_GPIO_DeInit+0x1e8>)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	3302      	adds	r3, #2
 80039a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	220f      	movs	r2, #15
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	4013      	ands	r3, r2
 80039b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a63      	ldr	r2, [pc, #396]	@ (8003b4c <HAL_GPIO_DeInit+0x1ec>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d037      	beq.n	8003a32 <HAL_GPIO_DeInit+0xd2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a62      	ldr	r2, [pc, #392]	@ (8003b50 <HAL_GPIO_DeInit+0x1f0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d031      	beq.n	8003a2e <HAL_GPIO_DeInit+0xce>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a61      	ldr	r2, [pc, #388]	@ (8003b54 <HAL_GPIO_DeInit+0x1f4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d02b      	beq.n	8003a2a <HAL_GPIO_DeInit+0xca>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a60      	ldr	r2, [pc, #384]	@ (8003b58 <HAL_GPIO_DeInit+0x1f8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d025      	beq.n	8003a26 <HAL_GPIO_DeInit+0xc6>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a5f      	ldr	r2, [pc, #380]	@ (8003b5c <HAL_GPIO_DeInit+0x1fc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01f      	beq.n	8003a22 <HAL_GPIO_DeInit+0xc2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a5e      	ldr	r2, [pc, #376]	@ (8003b60 <HAL_GPIO_DeInit+0x200>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d019      	beq.n	8003a1e <HAL_GPIO_DeInit+0xbe>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a5d      	ldr	r2, [pc, #372]	@ (8003b64 <HAL_GPIO_DeInit+0x204>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_GPIO_DeInit+0xba>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a5c      	ldr	r2, [pc, #368]	@ (8003b68 <HAL_GPIO_DeInit+0x208>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00d      	beq.n	8003a16 <HAL_GPIO_DeInit+0xb6>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a5b      	ldr	r2, [pc, #364]	@ (8003b6c <HAL_GPIO_DeInit+0x20c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <HAL_GPIO_DeInit+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a5a      	ldr	r2, [pc, #360]	@ (8003b70 <HAL_GPIO_DeInit+0x210>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_GPIO_DeInit+0xae>
 8003a0a:	2309      	movs	r3, #9
 8003a0c:	e012      	b.n	8003a34 <HAL_GPIO_DeInit+0xd4>
 8003a0e:	230a      	movs	r3, #10
 8003a10:	e010      	b.n	8003a34 <HAL_GPIO_DeInit+0xd4>
 8003a12:	2308      	movs	r3, #8
 8003a14:	e00e      	b.n	8003a34 <HAL_GPIO_DeInit+0xd4>
 8003a16:	2307      	movs	r3, #7
 8003a18:	e00c      	b.n	8003a34 <HAL_GPIO_DeInit+0xd4>
 8003a1a:	2306      	movs	r3, #6
 8003a1c:	e00a      	b.n	8003a34 <HAL_GPIO_DeInit+0xd4>
 8003a1e:	2305      	movs	r3, #5
 8003a20:	e008      	b.n	8003a34 <HAL_GPIO_DeInit+0xd4>
 8003a22:	2304      	movs	r3, #4
 8003a24:	e006      	b.n	8003a34 <HAL_GPIO_DeInit+0xd4>
 8003a26:	2303      	movs	r3, #3
 8003a28:	e004      	b.n	8003a34 <HAL_GPIO_DeInit+0xd4>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e002      	b.n	8003a34 <HAL_GPIO_DeInit+0xd4>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_GPIO_DeInit+0xd4>
 8003a32:	2300      	movs	r3, #0
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	f002 0203 	and.w	r2, r2, #3
 8003a3a:	0092      	lsls	r2, r2, #2
 8003a3c:	4093      	lsls	r3, r2
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d132      	bne.n	8003aaa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003a44:	4b4b      	ldr	r3, [pc, #300]	@ (8003b74 <HAL_GPIO_DeInit+0x214>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	4949      	ldr	r1, [pc, #292]	@ (8003b74 <HAL_GPIO_DeInit+0x214>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003a52:	4b48      	ldr	r3, [pc, #288]	@ (8003b74 <HAL_GPIO_DeInit+0x214>)
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	4946      	ldr	r1, [pc, #280]	@ (8003b74 <HAL_GPIO_DeInit+0x214>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a60:	4b44      	ldr	r3, [pc, #272]	@ (8003b74 <HAL_GPIO_DeInit+0x214>)
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	4942      	ldr	r1, [pc, #264]	@ (8003b74 <HAL_GPIO_DeInit+0x214>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003a6e:	4b41      	ldr	r3, [pc, #260]	@ (8003b74 <HAL_GPIO_DeInit+0x214>)
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	493f      	ldr	r1, [pc, #252]	@ (8003b74 <HAL_GPIO_DeInit+0x214>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	220f      	movs	r2, #15
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b48 <HAL_GPIO_DeInit+0x1e8>)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	089b      	lsrs	r3, r3, #2
 8003a92:	3302      	adds	r3, #2
 8003a94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	482a      	ldr	r0, [pc, #168]	@ (8003b48 <HAL_GPIO_DeInit+0x1e8>)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	2103      	movs	r1, #3
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	401a      	ands	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	08da      	lsrs	r2, r3, #3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3208      	adds	r2, #8
 8003ac8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	220f      	movs	r2, #15
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43db      	mvns	r3, r3
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	08d2      	lsrs	r2, r2, #3
 8003ae0:	4019      	ands	r1, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3208      	adds	r2, #8
 8003ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2103      	movs	r1, #3
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	401a      	ands	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	2101      	movs	r1, #1
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	401a      	ands	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	2103      	movs	r1, #3
 8003b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b22:	43db      	mvns	r3, r3
 8003b24:	401a      	ands	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2b0f      	cmp	r3, #15
 8003b34:	f67f af22 	bls.w	800397c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	371c      	adds	r7, #28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40013800 	.word	0x40013800
 8003b4c:	40020000 	.word	0x40020000
 8003b50:	40020400 	.word	0x40020400
 8003b54:	40020800 	.word	0x40020800
 8003b58:	40020c00 	.word	0x40020c00
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40021400 	.word	0x40021400
 8003b64:	40021800 	.word	0x40021800
 8003b68:	40021c00 	.word	0x40021c00
 8003b6c:	40022000 	.word	0x40022000
 8003b70:	40022400 	.word	0x40022400
 8003b74:	40013c00 	.word	0x40013c00

08003b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	807b      	strh	r3, [r7, #2]
 8003b84:	4613      	mov	r3, r2
 8003b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b88:	787b      	ldrb	r3, [r7, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b8e:	887a      	ldrh	r2, [r7, #2]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b94:	e003      	b.n	8003b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b96:	887b      	ldrh	r3, [r7, #2]
 8003b98:	041a      	lsls	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	619a      	str	r2, [r3, #24]
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e12b      	b.n	8003e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d106      	bne.n	8003bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fe fd44 	bl	8002660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2224      	movs	r2, #36	@ 0x24
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0201 	bic.w	r2, r2, #1
 8003bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c10:	f001 ff82 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8003c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4a81      	ldr	r2, [pc, #516]	@ (8003e20 <HAL_I2C_Init+0x274>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d807      	bhi.n	8003c30 <HAL_I2C_Init+0x84>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4a80      	ldr	r2, [pc, #512]	@ (8003e24 <HAL_I2C_Init+0x278>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	bf94      	ite	ls
 8003c28:	2301      	movls	r3, #1
 8003c2a:	2300      	movhi	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	e006      	b.n	8003c3e <HAL_I2C_Init+0x92>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a7d      	ldr	r2, [pc, #500]	@ (8003e28 <HAL_I2C_Init+0x27c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	bf94      	ite	ls
 8003c38:	2301      	movls	r3, #1
 8003c3a:	2300      	movhi	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0e7      	b.n	8003e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a78      	ldr	r2, [pc, #480]	@ (8003e2c <HAL_I2C_Init+0x280>)
 8003c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4e:	0c9b      	lsrs	r3, r3, #18
 8003c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a6a      	ldr	r2, [pc, #424]	@ (8003e20 <HAL_I2C_Init+0x274>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d802      	bhi.n	8003c80 <HAL_I2C_Init+0xd4>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	e009      	b.n	8003c94 <HAL_I2C_Init+0xe8>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	4a69      	ldr	r2, [pc, #420]	@ (8003e30 <HAL_I2C_Init+0x284>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	099b      	lsrs	r3, r3, #6
 8003c92:	3301      	adds	r3, #1
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ca6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	495c      	ldr	r1, [pc, #368]	@ (8003e20 <HAL_I2C_Init+0x274>)
 8003cb0:	428b      	cmp	r3, r1
 8003cb2:	d819      	bhi.n	8003ce8 <HAL_I2C_Init+0x13c>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	1e59      	subs	r1, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc2:	1c59      	adds	r1, r3, #1
 8003cc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003cc8:	400b      	ands	r3, r1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_I2C_Init+0x138>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1e59      	subs	r1, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cdc:	3301      	adds	r3, #1
 8003cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce2:	e051      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	e04f      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d111      	bne.n	8003d14 <HAL_I2C_Init+0x168>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1e58      	subs	r0, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	440b      	add	r3, r1
 8003cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e012      	b.n	8003d3a <HAL_I2C_Init+0x18e>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	1e58      	subs	r0, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	0099      	lsls	r1, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Init+0x196>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e022      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10e      	bne.n	8003d68 <HAL_I2C_Init+0x1bc>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	1e58      	subs	r0, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	460b      	mov	r3, r1
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	440b      	add	r3, r1
 8003d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d66:	e00f      	b.n	8003d88 <HAL_I2C_Init+0x1dc>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e58      	subs	r0, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	0099      	lsls	r1, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	6809      	ldr	r1, [r1, #0]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69da      	ldr	r2, [r3, #28]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003db6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6911      	ldr	r1, [r2, #16]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	68d2      	ldr	r2, [r2, #12]
 8003dc2:	4311      	orrs	r1, r2
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	000186a0 	.word	0x000186a0
 8003e24:	001e847f 	.word	0x001e847f
 8003e28:	003d08ff 	.word	0x003d08ff
 8003e2c:	431bde83 	.word	0x431bde83
 8003e30:	10624dd3 	.word	0x10624dd3

08003e34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	461a      	mov	r2, r3
 8003e42:	4603      	mov	r3, r0
 8003e44:	817b      	strh	r3, [r7, #10]
 8003e46:	460b      	mov	r3, r1
 8003e48:	813b      	strh	r3, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e4e:	f7ff fa99 	bl	8003384 <HAL_GetTick>
 8003e52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	f040 80d9 	bne.w	8004014 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2319      	movs	r3, #25
 8003e68:	2201      	movs	r2, #1
 8003e6a:	496d      	ldr	r1, [pc, #436]	@ (8004020 <HAL_I2C_Mem_Write+0x1ec>)
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fc8b 	bl	8004788 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e0cc      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_I2C_Mem_Write+0x56>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e0c5      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d007      	beq.n	8003eb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ebe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2221      	movs	r2, #33	@ 0x21
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2240      	movs	r2, #64	@ 0x40
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a4d      	ldr	r2, [pc, #308]	@ (8004024 <HAL_I2C_Mem_Write+0x1f0>)
 8003ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ef2:	88f8      	ldrh	r0, [r7, #6]
 8003ef4:	893a      	ldrh	r2, [r7, #8]
 8003ef6:	8979      	ldrh	r1, [r7, #10]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	4603      	mov	r3, r0
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fac2 	bl	800448c <I2C_RequestMemoryWrite>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d052      	beq.n	8003fb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e081      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fd50 	bl	80049bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00d      	beq.n	8003f3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d107      	bne.n	8003f3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e06b      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	781a      	ldrb	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d11b      	bne.n	8003fb4 <HAL_I2C_Mem_Write+0x180>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d017      	beq.n	8003fb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	781a      	ldrb	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3b01      	subs	r3, #1
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1aa      	bne.n	8003f12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fd43 	bl	8004a4c <I2C_WaitOnBTFFlagUntilTimeout>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d107      	bne.n	8003fe4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e016      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	e000      	b.n	8004016 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004014:	2302      	movs	r3, #2
  }
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	00100002 	.word	0x00100002
 8004024:	ffff0000 	.word	0xffff0000

08004028 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08c      	sub	sp, #48	@ 0x30
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	461a      	mov	r2, r3
 8004036:	4603      	mov	r3, r0
 8004038:	817b      	strh	r3, [r7, #10]
 800403a:	460b      	mov	r3, r1
 800403c:	813b      	strh	r3, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004042:	f7ff f99f 	bl	8003384 <HAL_GetTick>
 8004046:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b20      	cmp	r3, #32
 8004052:	f040 8214 	bne.w	800447e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	2319      	movs	r3, #25
 800405c:	2201      	movs	r2, #1
 800405e:	497b      	ldr	r1, [pc, #492]	@ (800424c <HAL_I2C_Mem_Read+0x224>)
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 fb91 	bl	8004788 <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
 800406e:	e207      	b.n	8004480 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_I2C_Mem_Read+0x56>
 800407a:	2302      	movs	r3, #2
 800407c:	e200      	b.n	8004480 <HAL_I2C_Mem_Read+0x458>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	2b01      	cmp	r3, #1
 8004092:	d007      	beq.n	80040a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f042 0201 	orr.w	r2, r2, #1
 80040a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2222      	movs	r2, #34	@ 0x22
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2240      	movs	r2, #64	@ 0x40
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80040d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004250 <HAL_I2C_Mem_Read+0x228>)
 80040e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040e6:	88f8      	ldrh	r0, [r7, #6]
 80040e8:	893a      	ldrh	r2, [r7, #8]
 80040ea:	8979      	ldrh	r1, [r7, #10]
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	9301      	str	r3, [sp, #4]
 80040f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	4603      	mov	r3, r0
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fa5e 	bl	80045b8 <I2C_RequestMemoryRead>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e1bc      	b.n	8004480 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410a:	2b00      	cmp	r3, #0
 800410c:	d113      	bne.n	8004136 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800410e:	2300      	movs	r3, #0
 8004110:	623b      	str	r3, [r7, #32]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	623b      	str	r3, [r7, #32]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	623b      	str	r3, [r7, #32]
 8004122:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e190      	b.n	8004458 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413a:	2b01      	cmp	r3, #1
 800413c:	d11b      	bne.n	8004176 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800414c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	e170      	b.n	8004458 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417a:	2b02      	cmp	r3, #2
 800417c:	d11b      	bne.n	80041b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800418c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800419c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419e:	2300      	movs	r3, #0
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	61bb      	str	r3, [r7, #24]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	e150      	b.n	8004458 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041cc:	e144      	b.n	8004458 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	f200 80f1 	bhi.w	80043ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d123      	bne.n	8004228 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 fc79 	bl	8004adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e145      	b.n	8004480 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004226:	e117      	b.n	8004458 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422c:	2b02      	cmp	r3, #2
 800422e:	d14e      	bne.n	80042ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004236:	2200      	movs	r2, #0
 8004238:	4906      	ldr	r1, [pc, #24]	@ (8004254 <HAL_I2C_Mem_Read+0x22c>)
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 faa4 	bl	8004788 <I2C_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e11a      	b.n	8004480 <HAL_I2C_Mem_Read+0x458>
 800424a:	bf00      	nop
 800424c:	00100002 	.word	0x00100002
 8004250:	ffff0000 	.word	0xffff0000
 8004254:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80042cc:	e0c4      	b.n	8004458 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d4:	2200      	movs	r2, #0
 80042d6:	496c      	ldr	r1, [pc, #432]	@ (8004488 <HAL_I2C_Mem_Read+0x460>)
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 fa55 	bl	8004788 <I2C_WaitOnFlagUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e0cb      	b.n	8004480 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691a      	ldr	r2, [r3, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004314:	3b01      	subs	r3, #1
 8004316:	b29a      	uxth	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29a      	uxth	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004330:	2200      	movs	r2, #0
 8004332:	4955      	ldr	r1, [pc, #340]	@ (8004488 <HAL_I2C_Mem_Read+0x460>)
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 fa27 	bl	8004788 <I2C_WaitOnFlagUntilTimeout>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e09d      	b.n	8004480 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004370:	3b01      	subs	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80043b8:	e04e      	b.n	8004458 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80043be:	68f8      	ldr	r0, [r7, #12]
 80043c0:	f000 fb8c 	bl	8004adc <I2C_WaitOnRXNEFlagUntilTimeout>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e058      	b.n	8004480 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b04      	cmp	r3, #4
 800440c:	d124      	bne.n	8004458 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004412:	2b03      	cmp	r3, #3
 8004414:	d107      	bne.n	8004426 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004424:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445c:	2b00      	cmp	r3, #0
 800445e:	f47f aeb6 	bne.w	80041ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800447e:	2302      	movs	r3, #2
  }
}
 8004480:	4618      	mov	r0, r3
 8004482:	3728      	adds	r7, #40	@ 0x28
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	00010004 	.word	0x00010004

0800448c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	4608      	mov	r0, r1
 8004496:	4611      	mov	r1, r2
 8004498:	461a      	mov	r2, r3
 800449a:	4603      	mov	r3, r0
 800449c:	817b      	strh	r3, [r7, #10]
 800449e:	460b      	mov	r3, r1
 80044a0:	813b      	strh	r3, [r7, #8]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	2200      	movs	r2, #0
 80044be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f000 f960 	bl	8004788 <I2C_WaitOnFlagUntilTimeout>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00d      	beq.n	80044ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044dc:	d103      	bne.n	80044e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e05f      	b.n	80045aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ea:	897b      	ldrh	r3, [r7, #10]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fc:	6a3a      	ldr	r2, [r7, #32]
 80044fe:	492d      	ldr	r1, [pc, #180]	@ (80045b4 <I2C_RequestMemoryWrite+0x128>)
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f9bb 	bl	800487c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e04c      	b.n	80045aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	617b      	str	r3, [r7, #20]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004528:	6a39      	ldr	r1, [r7, #32]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fa46 	bl	80049bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00d      	beq.n	8004552 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453a:	2b04      	cmp	r3, #4
 800453c:	d107      	bne.n	800454e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800454c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e02b      	b.n	80045aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d105      	bne.n	8004564 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004558:	893b      	ldrh	r3, [r7, #8]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	611a      	str	r2, [r3, #16]
 8004562:	e021      	b.n	80045a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004564:	893b      	ldrh	r3, [r7, #8]
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	b29b      	uxth	r3, r3
 800456a:	b2da      	uxtb	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004574:	6a39      	ldr	r1, [r7, #32]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fa20 	bl	80049bc <I2C_WaitOnTXEFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00d      	beq.n	800459e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	2b04      	cmp	r3, #4
 8004588:	d107      	bne.n	800459a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004598:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e005      	b.n	80045aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800459e:	893b      	ldrh	r3, [r7, #8]
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	00010002 	.word	0x00010002

080045b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	4608      	mov	r0, r1
 80045c2:	4611      	mov	r1, r2
 80045c4:	461a      	mov	r2, r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	817b      	strh	r3, [r7, #10]
 80045ca:	460b      	mov	r3, r1
 80045cc:	813b      	strh	r3, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f8c2 	bl	8004788 <I2C_WaitOnFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00d      	beq.n	8004626 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004614:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004618:	d103      	bne.n	8004622 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004620:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e0aa      	b.n	800477c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004626:	897b      	ldrh	r3, [r7, #10]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	461a      	mov	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004634:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004638:	6a3a      	ldr	r2, [r7, #32]
 800463a:	4952      	ldr	r1, [pc, #328]	@ (8004784 <I2C_RequestMemoryRead+0x1cc>)
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f91d 	bl	800487c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e097      	b.n	800477c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004664:	6a39      	ldr	r1, [r7, #32]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f9a8 	bl	80049bc <I2C_WaitOnTXEFlagUntilTimeout>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00d      	beq.n	800468e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	2b04      	cmp	r3, #4
 8004678:	d107      	bne.n	800468a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004688:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e076      	b.n	800477c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d105      	bne.n	80046a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004694:	893b      	ldrh	r3, [r7, #8]
 8004696:	b2da      	uxtb	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	611a      	str	r2, [r3, #16]
 800469e:	e021      	b.n	80046e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80046a0:	893b      	ldrh	r3, [r7, #8]
 80046a2:	0a1b      	lsrs	r3, r3, #8
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b0:	6a39      	ldr	r1, [r7, #32]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f982 	bl	80049bc <I2C_WaitOnTXEFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00d      	beq.n	80046da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d107      	bne.n	80046d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e050      	b.n	800477c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046da:	893b      	ldrh	r3, [r7, #8]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e6:	6a39      	ldr	r1, [r7, #32]
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f967 	bl	80049bc <I2C_WaitOnTXEFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00d      	beq.n	8004710 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d107      	bne.n	800470c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800470a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e035      	b.n	800477c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800471e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	2200      	movs	r2, #0
 8004728:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f82b 	bl	8004788 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004746:	d103      	bne.n	8004750 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e013      	b.n	800477c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004754:	897b      	ldrh	r3, [r7, #10]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	f043 0301 	orr.w	r3, r3, #1
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	6a3a      	ldr	r2, [r7, #32]
 8004768:	4906      	ldr	r1, [pc, #24]	@ (8004784 <I2C_RequestMemoryRead+0x1cc>)
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f886 	bl	800487c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	00010002 	.word	0x00010002

08004788 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004798:	e048      	b.n	800482c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d044      	beq.n	800482c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a2:	f7fe fdef 	bl	8003384 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d302      	bcc.n	80047b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d139      	bne.n	800482c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	0c1b      	lsrs	r3, r3, #16
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d10d      	bne.n	80047de <I2C_WaitOnFlagUntilTimeout+0x56>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	43da      	mvns	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4013      	ands	r3, r2
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	bf0c      	ite	eq
 80047d4:	2301      	moveq	r3, #1
 80047d6:	2300      	movne	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	e00c      	b.n	80047f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	43da      	mvns	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4013      	ands	r3, r2
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d116      	bne.n	800482c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e023      	b.n	8004874 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	0c1b      	lsrs	r3, r3, #16
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d10d      	bne.n	8004852 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	43da      	mvns	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4013      	ands	r3, r2
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf0c      	ite	eq
 8004848:	2301      	moveq	r3, #1
 800484a:	2300      	movne	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	461a      	mov	r2, r3
 8004850:	e00c      	b.n	800486c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	43da      	mvns	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4013      	ands	r3, r2
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	bf0c      	ite	eq
 8004864:	2301      	moveq	r3, #1
 8004866:	2300      	movne	r3, #0
 8004868:	b2db      	uxtb	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	79fb      	ldrb	r3, [r7, #7]
 800486e:	429a      	cmp	r2, r3
 8004870:	d093      	beq.n	800479a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800488a:	e071      	b.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800489a:	d123      	bne.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d0:	f043 0204 	orr.w	r2, r3, #4
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e067      	b.n	80049b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d041      	beq.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ec:	f7fe fd4a 	bl	8003384 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d302      	bcc.n	8004902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d136      	bne.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d10c      	bne.n	8004926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	43da      	mvns	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	4013      	ands	r3, r2
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	e00b      	b.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	43da      	mvns	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4013      	ands	r3, r2
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	bf14      	ite	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2300      	moveq	r3, #0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e021      	b.n	80049b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	0c1b      	lsrs	r3, r3, #16
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d10c      	bne.n	8004994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	43da      	mvns	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4013      	ands	r3, r2
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf14      	ite	ne
 800498c:	2301      	movne	r3, #1
 800498e:	2300      	moveq	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e00b      	b.n	80049ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	43da      	mvns	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4013      	ands	r3, r2
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bf14      	ite	ne
 80049a6:	2301      	movne	r3, #1
 80049a8:	2300      	moveq	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f47f af6d 	bne.w	800488c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049c8:	e034      	b.n	8004a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 f8e3 	bl	8004b96 <I2C_IsAcknowledgeFailed>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e034      	b.n	8004a44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d028      	beq.n	8004a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e2:	f7fe fccf 	bl	8003384 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d302      	bcc.n	80049f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d11d      	bne.n	8004a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a02:	2b80      	cmp	r3, #128	@ 0x80
 8004a04:	d016      	beq.n	8004a34 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e007      	b.n	8004a44 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3e:	2b80      	cmp	r3, #128	@ 0x80
 8004a40:	d1c3      	bne.n	80049ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a58:	e034      	b.n	8004ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f89b 	bl	8004b96 <I2C_IsAcknowledgeFailed>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e034      	b.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d028      	beq.n	8004ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a72:	f7fe fc87 	bl	8003384 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d302      	bcc.n	8004a88 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d11d      	bne.n	8004ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d016      	beq.n	8004ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab0:	f043 0220 	orr.w	r2, r3, #32
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e007      	b.n	8004ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d1c3      	bne.n	8004a5a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ae8:	e049      	b.n	8004b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	f003 0310 	and.w	r3, r3, #16
 8004af4:	2b10      	cmp	r3, #16
 8004af6:	d119      	bne.n	8004b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0210 	mvn.w	r2, #16
 8004b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e030      	b.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2c:	f7fe fc2a 	bl	8003384 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d302      	bcc.n	8004b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11d      	bne.n	8004b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4c:	2b40      	cmp	r3, #64	@ 0x40
 8004b4e:	d016      	beq.n	8004b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	f043 0220 	orr.w	r2, r3, #32
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e007      	b.n	8004b8e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b88:	2b40      	cmp	r3, #64	@ 0x40
 8004b8a:	d1ae      	bne.n	8004aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bac:	d11b      	bne.n	8004be6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004bb6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	f043 0204 	orr.w	r2, r3, #4
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d129      	bne.n	8004c5e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2224      	movs	r2, #36	@ 0x24
 8004c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0210 	bic.w	r2, r2, #16
 8004c30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0201 	orr.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e000      	b.n	8004c60 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004c5e:	2302      	movs	r3, #2
  }
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	d12a      	bne.n	8004cdc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2224      	movs	r2, #36	@ 0x24
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
 8004ca8:	f023 030f 	bic.w	r3, r3, #15
 8004cac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	89fb      	ldrh	r3, [r7, #14]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	89fa      	ldrh	r2, [r7, #14]
 8004cbe:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e000      	b.n	8004cde <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004cdc:	2302      	movs	r3, #2
  }
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e0bf      	b.n	8004e7e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fd fd0e 	bl	8002734 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004d2e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6999      	ldr	r1, [r3, #24]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d44:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6899      	ldr	r1, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004e88 <HAL_LTDC_Init+0x19c>)
 8004d60:	400b      	ands	r3, r1
 8004d62:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6899      	ldr	r1, [r3, #8]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68d9      	ldr	r1, [r3, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004e88 <HAL_LTDC_Init+0x19c>)
 8004d8e:	400b      	ands	r3, r1
 8004d90:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68d9      	ldr	r1, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6919      	ldr	r1, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b33      	ldr	r3, [pc, #204]	@ (8004e88 <HAL_LTDC_Init+0x19c>)
 8004dbc:	400b      	ands	r3, r1
 8004dbe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	041b      	lsls	r3, r3, #16
 8004dc6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6919      	ldr	r1, [r3, #16]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6959      	ldr	r1, [r3, #20]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	4b27      	ldr	r3, [pc, #156]	@ (8004e88 <HAL_LTDC_Init+0x19c>)
 8004dea:	400b      	ands	r3, r1
 8004dec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df2:	041b      	lsls	r3, r3, #16
 8004df4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6959      	ldr	r1, [r3, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004e2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0206 	orr.w	r2, r2, #6
 8004e5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f042 0201 	orr.w	r2, r2, #1
 8004e6a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	f000f800 	.word	0xf000f800

08004e8c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e8c:	b5b0      	push	{r4, r5, r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d101      	bne.n	8004ea6 <HAL_LTDC_ConfigLayer+0x1a>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e02c      	b.n	8004f00 <HAL_LTDC_ConfigLayer+0x74>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2134      	movs	r1, #52	@ 0x34
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4614      	mov	r4, r2
 8004eca:	461d      	mov	r5, r3
 8004ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f811 	bl	8004f08 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2201      	movs	r2, #1
 8004eec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bdb0      	pop	{r4, r5, r7, pc}

08004f08 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b089      	sub	sp, #36	@ 0x24
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	0c1b      	lsrs	r3, r3, #16
 8004f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f24:	4413      	add	r3, r2
 8004f26:	041b      	lsls	r3, r3, #16
 8004f28:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	01db      	lsls	r3, r3, #7
 8004f34:	4413      	add	r3, r2
 8004f36:	3384      	adds	r3, #132	@ 0x84
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	4611      	mov	r1, r2
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	01d2      	lsls	r2, r2, #7
 8004f44:	440a      	add	r2, r1
 8004f46:	3284      	adds	r2, #132	@ 0x84
 8004f48:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004f4c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	0c1b      	lsrs	r3, r3, #16
 8004f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f5e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f60:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4619      	mov	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	01db      	lsls	r3, r3, #7
 8004f6c:	440b      	add	r3, r1
 8004f6e:	3384      	adds	r3, #132	@ 0x84
 8004f70:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004f76:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f86:	4413      	add	r3, r2
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	01db      	lsls	r3, r3, #7
 8004f96:	4413      	add	r3, r2
 8004f98:	3384      	adds	r3, #132	@ 0x84
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	01d2      	lsls	r2, r2, #7
 8004fa6:	440a      	add	r2, r1
 8004fa8:	3284      	adds	r2, #132	@ 0x84
 8004faa:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004fae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fbe:	4413      	add	r3, r2
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	01db      	lsls	r3, r3, #7
 8004fcc:	440b      	add	r3, r1
 8004fce:	3384      	adds	r3, #132	@ 0x84
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	01db      	lsls	r3, r3, #7
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3384      	adds	r3, #132	@ 0x84
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	4611      	mov	r1, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	01d2      	lsls	r2, r2, #7
 8004ff2:	440a      	add	r2, r1
 8004ff4:	3284      	adds	r2, #132	@ 0x84
 8004ff6:	f023 0307 	bic.w	r3, r3, #7
 8004ffa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	01db      	lsls	r3, r3, #7
 8005006:	4413      	add	r3, r2
 8005008:	3384      	adds	r3, #132	@ 0x84
 800500a:	461a      	mov	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005022:	041b      	lsls	r3, r3, #16
 8005024:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	061b      	lsls	r3, r3, #24
 800502c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	01db      	lsls	r3, r3, #7
 8005038:	4413      	add	r3, r2
 800503a:	3384      	adds	r3, #132	@ 0x84
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	01db      	lsls	r3, r3, #7
 8005048:	4413      	add	r3, r2
 800504a:	3384      	adds	r3, #132	@ 0x84
 800504c:	461a      	mov	r2, r3
 800504e:	2300      	movs	r3, #0
 8005050:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005058:	461a      	mov	r2, r3
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	431a      	orrs	r2, r3
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	431a      	orrs	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4619      	mov	r1, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	01db      	lsls	r3, r3, #7
 800506c:	440b      	add	r3, r1
 800506e:	3384      	adds	r3, #132	@ 0x84
 8005070:	4619      	mov	r1, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	461a      	mov	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	01db      	lsls	r3, r3, #7
 8005082:	4413      	add	r3, r2
 8005084:	3384      	adds	r3, #132	@ 0x84
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	4611      	mov	r1, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	01d2      	lsls	r2, r2, #7
 8005092:	440a      	add	r2, r1
 8005094:	3284      	adds	r2, #132	@ 0x84
 8005096:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800509a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	01db      	lsls	r3, r3, #7
 80050a6:	4413      	add	r3, r2
 80050a8:	3384      	adds	r3, #132	@ 0x84
 80050aa:	461a      	mov	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	461a      	mov	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	01db      	lsls	r3, r3, #7
 80050bc:	4413      	add	r3, r2
 80050be:	3384      	adds	r3, #132	@ 0x84
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	4611      	mov	r1, r2
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	01d2      	lsls	r2, r2, #7
 80050cc:	440a      	add	r2, r1
 80050ce:	3284      	adds	r2, #132	@ 0x84
 80050d0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80050d4:	f023 0307 	bic.w	r3, r3, #7
 80050d8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	68f9      	ldr	r1, [r7, #12]
 80050e4:	6809      	ldr	r1, [r1, #0]
 80050e6:	4608      	mov	r0, r1
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	01c9      	lsls	r1, r1, #7
 80050ec:	4401      	add	r1, r0
 80050ee:	3184      	adds	r1, #132	@ 0x84
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	01db      	lsls	r3, r3, #7
 80050fe:	4413      	add	r3, r2
 8005100:	3384      	adds	r3, #132	@ 0x84
 8005102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	01db      	lsls	r3, r3, #7
 800510e:	4413      	add	r3, r2
 8005110:	3384      	adds	r3, #132	@ 0x84
 8005112:	461a      	mov	r2, r3
 8005114:	2300      	movs	r3, #0
 8005116:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	01db      	lsls	r3, r3, #7
 8005122:	4413      	add	r3, r2
 8005124:	3384      	adds	r3, #132	@ 0x84
 8005126:	461a      	mov	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005136:	2304      	movs	r3, #4
 8005138:	61fb      	str	r3, [r7, #28]
 800513a:	e01b      	b.n	8005174 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d102      	bne.n	800514a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005144:	2303      	movs	r3, #3
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e014      	b.n	8005174 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	2b04      	cmp	r3, #4
 8005150:	d00b      	beq.n	800516a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005156:	2b02      	cmp	r3, #2
 8005158:	d007      	beq.n	800516a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800515e:	2b03      	cmp	r3, #3
 8005160:	d003      	beq.n	800516a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005166:	2b07      	cmp	r3, #7
 8005168:	d102      	bne.n	8005170 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800516a:	2302      	movs	r3, #2
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	e001      	b.n	8005174 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005170:	2301      	movs	r3, #1
 8005172:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	01db      	lsls	r3, r3, #7
 800517e:	4413      	add	r3, r2
 8005180:	3384      	adds	r3, #132	@ 0x84
 8005182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	4611      	mov	r1, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	01d2      	lsls	r2, r2, #7
 800518e:	440a      	add	r2, r1
 8005190:	3284      	adds	r2, #132	@ 0x84
 8005192:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005196:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6859      	ldr	r1, [r3, #4]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	1acb      	subs	r3, r1, r3
 80051ae:	69f9      	ldr	r1, [r7, #28]
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80051b6:	68f9      	ldr	r1, [r7, #12]
 80051b8:	6809      	ldr	r1, [r1, #0]
 80051ba:	4608      	mov	r0, r1
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	01c9      	lsls	r1, r1, #7
 80051c0:	4401      	add	r1, r0
 80051c2:	3184      	adds	r1, #132	@ 0x84
 80051c4:	4313      	orrs	r3, r2
 80051c6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	01db      	lsls	r3, r3, #7
 80051d2:	4413      	add	r3, r2
 80051d4:	3384      	adds	r3, #132	@ 0x84
 80051d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	4611      	mov	r1, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	01d2      	lsls	r2, r2, #7
 80051e2:	440a      	add	r2, r1
 80051e4:	3284      	adds	r2, #132	@ 0x84
 80051e6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80051ea:	f023 0307 	bic.w	r3, r3, #7
 80051ee:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	01db      	lsls	r3, r3, #7
 80051fa:	4413      	add	r3, r2
 80051fc:	3384      	adds	r3, #132	@ 0x84
 80051fe:	461a      	mov	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	01db      	lsls	r3, r3, #7
 8005210:	4413      	add	r3, r2
 8005212:	3384      	adds	r3, #132	@ 0x84
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	4611      	mov	r1, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	01d2      	lsls	r2, r2, #7
 8005220:	440a      	add	r2, r1
 8005222:	3284      	adds	r2, #132	@ 0x84
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	6013      	str	r3, [r2, #0]
}
 800522a:	bf00      	nop
 800522c:	3724      	adds	r7, #36	@ 0x24
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e267      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d075      	beq.n	8005342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005256:	4b88      	ldr	r3, [pc, #544]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	2b04      	cmp	r3, #4
 8005260:	d00c      	beq.n	800527c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005262:	4b85      	ldr	r3, [pc, #532]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800526a:	2b08      	cmp	r3, #8
 800526c:	d112      	bne.n	8005294 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800526e:	4b82      	ldr	r3, [pc, #520]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005276:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800527a:	d10b      	bne.n	8005294 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800527c:	4b7e      	ldr	r3, [pc, #504]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d05b      	beq.n	8005340 <HAL_RCC_OscConfig+0x108>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d157      	bne.n	8005340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e242      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800529c:	d106      	bne.n	80052ac <HAL_RCC_OscConfig+0x74>
 800529e:	4b76      	ldr	r3, [pc, #472]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a75      	ldr	r2, [pc, #468]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80052a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e01d      	b.n	80052e8 <HAL_RCC_OscConfig+0xb0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x98>
 80052b6:	4b70      	ldr	r3, [pc, #448]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a6f      	ldr	r2, [pc, #444]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80052bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a6c      	ldr	r2, [pc, #432]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80052c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e00b      	b.n	80052e8 <HAL_RCC_OscConfig+0xb0>
 80052d0:	4b69      	ldr	r3, [pc, #420]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a68      	ldr	r2, [pc, #416]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80052d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	4b66      	ldr	r3, [pc, #408]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a65      	ldr	r2, [pc, #404]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80052e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d013      	beq.n	8005318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f0:	f7fe f848 	bl	8003384 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052f8:	f7fe f844 	bl	8003384 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b64      	cmp	r3, #100	@ 0x64
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e207      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530a:	4b5b      	ldr	r3, [pc, #364]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0xc0>
 8005316:	e014      	b.n	8005342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005318:	f7fe f834 	bl	8003384 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005320:	f7fe f830 	bl	8003384 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b64      	cmp	r3, #100	@ 0x64
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e1f3      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005332:	4b51      	ldr	r3, [pc, #324]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0xe8>
 800533e:	e000      	b.n	8005342 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d063      	beq.n	8005416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800534e:	4b4a      	ldr	r3, [pc, #296]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00b      	beq.n	8005372 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800535a:	4b47      	ldr	r3, [pc, #284]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005362:	2b08      	cmp	r3, #8
 8005364:	d11c      	bne.n	80053a0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005366:	4b44      	ldr	r3, [pc, #272]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d116      	bne.n	80053a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005372:	4b41      	ldr	r3, [pc, #260]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_RCC_OscConfig+0x152>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d001      	beq.n	800538a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e1c7      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538a:	4b3b      	ldr	r3, [pc, #236]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4937      	ldr	r1, [pc, #220]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800539e:	e03a      	b.n	8005416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d020      	beq.n	80053ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053a8:	4b34      	ldr	r3, [pc, #208]	@ (800547c <HAL_RCC_OscConfig+0x244>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ae:	f7fd ffe9 	bl	8003384 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b6:	f7fd ffe5 	bl	8003384 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e1a8      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0f0      	beq.n	80053b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d4:	4b28      	ldr	r3, [pc, #160]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4925      	ldr	r1, [pc, #148]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	600b      	str	r3, [r1, #0]
 80053e8:	e015      	b.n	8005416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ea:	4b24      	ldr	r3, [pc, #144]	@ (800547c <HAL_RCC_OscConfig+0x244>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f0:	f7fd ffc8 	bl	8003384 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053f8:	f7fd ffc4 	bl	8003384 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e187      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800540a:	4b1b      	ldr	r3, [pc, #108]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d036      	beq.n	8005490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d016      	beq.n	8005458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800542a:	4b15      	ldr	r3, [pc, #84]	@ (8005480 <HAL_RCC_OscConfig+0x248>)
 800542c:	2201      	movs	r2, #1
 800542e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005430:	f7fd ffa8 	bl	8003384 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005438:	f7fd ffa4 	bl	8003384 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e167      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800544a:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <HAL_RCC_OscConfig+0x240>)
 800544c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCC_OscConfig+0x200>
 8005456:	e01b      	b.n	8005490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005458:	4b09      	ldr	r3, [pc, #36]	@ (8005480 <HAL_RCC_OscConfig+0x248>)
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800545e:	f7fd ff91 	bl	8003384 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005464:	e00e      	b.n	8005484 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005466:	f7fd ff8d 	bl	8003384 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d907      	bls.n	8005484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e150      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
 8005478:	40023800 	.word	0x40023800
 800547c:	42470000 	.word	0x42470000
 8005480:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005484:	4b88      	ldr	r3, [pc, #544]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005486:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1ea      	bne.n	8005466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8097 	beq.w	80055cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054a2:	4b81      	ldr	r3, [pc, #516]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10f      	bne.n	80054ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	4b7d      	ldr	r3, [pc, #500]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	4a7c      	ldr	r2, [pc, #496]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 80054b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80054be:	4b7a      	ldr	r3, [pc, #488]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c6:	60bb      	str	r3, [r7, #8]
 80054c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ca:	2301      	movs	r3, #1
 80054cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ce:	4b77      	ldr	r3, [pc, #476]	@ (80056ac <HAL_RCC_OscConfig+0x474>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d118      	bne.n	800550c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054da:	4b74      	ldr	r3, [pc, #464]	@ (80056ac <HAL_RCC_OscConfig+0x474>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a73      	ldr	r2, [pc, #460]	@ (80056ac <HAL_RCC_OscConfig+0x474>)
 80054e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054e6:	f7fd ff4d 	bl	8003384 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ee:	f7fd ff49 	bl	8003384 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e10c      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005500:	4b6a      	ldr	r3, [pc, #424]	@ (80056ac <HAL_RCC_OscConfig+0x474>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d106      	bne.n	8005522 <HAL_RCC_OscConfig+0x2ea>
 8005514:	4b64      	ldr	r3, [pc, #400]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005518:	4a63      	ldr	r2, [pc, #396]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005520:	e01c      	b.n	800555c <HAL_RCC_OscConfig+0x324>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b05      	cmp	r3, #5
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0x30c>
 800552a:	4b5f      	ldr	r3, [pc, #380]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	4a5e      	ldr	r2, [pc, #376]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005530:	f043 0304 	orr.w	r3, r3, #4
 8005534:	6713      	str	r3, [r2, #112]	@ 0x70
 8005536:	4b5c      	ldr	r3, [pc, #368]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553a:	4a5b      	ldr	r2, [pc, #364]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	6713      	str	r3, [r2, #112]	@ 0x70
 8005542:	e00b      	b.n	800555c <HAL_RCC_OscConfig+0x324>
 8005544:	4b58      	ldr	r3, [pc, #352]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005548:	4a57      	ldr	r2, [pc, #348]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005550:	4b55      	ldr	r3, [pc, #340]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005554:	4a54      	ldr	r2, [pc, #336]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005556:	f023 0304 	bic.w	r3, r3, #4
 800555a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005564:	f7fd ff0e 	bl	8003384 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556a:	e00a      	b.n	8005582 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556c:	f7fd ff0a 	bl	8003384 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e0cb      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005582:	4b49      	ldr	r3, [pc, #292]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0ee      	beq.n	800556c <HAL_RCC_OscConfig+0x334>
 800558e:	e014      	b.n	80055ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005590:	f7fd fef8 	bl	8003384 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005596:	e00a      	b.n	80055ae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005598:	f7fd fef4 	bl	8003384 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e0b5      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ae:	4b3e      	ldr	r3, [pc, #248]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1ee      	bne.n	8005598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d105      	bne.n	80055cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c0:	4b39      	ldr	r3, [pc, #228]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 80055c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c4:	4a38      	ldr	r2, [pc, #224]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 80055c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80a1 	beq.w	8005718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055d6:	4b34      	ldr	r3, [pc, #208]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d05c      	beq.n	800569c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d141      	bne.n	800566e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ea:	4b31      	ldr	r3, [pc, #196]	@ (80056b0 <HAL_RCC_OscConfig+0x478>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f0:	f7fd fec8 	bl	8003384 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f8:	f7fd fec4 	bl	8003384 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e087      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560a:	4b27      	ldr	r3, [pc, #156]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69da      	ldr	r2, [r3, #28]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	019b      	lsls	r3, r3, #6
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	3b01      	subs	r3, #1
 8005630:	041b      	lsls	r3, r3, #16
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	061b      	lsls	r3, r3, #24
 800563a:	491b      	ldr	r1, [pc, #108]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 800563c:	4313      	orrs	r3, r2
 800563e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005640:	4b1b      	ldr	r3, [pc, #108]	@ (80056b0 <HAL_RCC_OscConfig+0x478>)
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005646:	f7fd fe9d 	bl	8003384 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800564e:	f7fd fe99 	bl	8003384 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e05c      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005660:	4b11      	ldr	r3, [pc, #68]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x416>
 800566c:	e054      	b.n	8005718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566e:	4b10      	ldr	r3, [pc, #64]	@ (80056b0 <HAL_RCC_OscConfig+0x478>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005674:	f7fd fe86 	bl	8003384 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567c:	f7fd fe82 	bl	8003384 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e045      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568e:	4b06      	ldr	r3, [pc, #24]	@ (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x444>
 800569a:	e03d      	b.n	8005718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e038      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
 80056a8:	40023800 	.word	0x40023800
 80056ac:	40007000 	.word	0x40007000
 80056b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005724 <HAL_RCC_OscConfig+0x4ec>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d028      	beq.n	8005714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d121      	bne.n	8005714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056da:	429a      	cmp	r2, r3
 80056dc:	d11a      	bne.n	8005714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056e4:	4013      	ands	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d111      	bne.n	8005714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	3b01      	subs	r3, #1
 80056fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005700:	429a      	cmp	r2, r3
 8005702:	d107      	bne.n	8005714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40023800 	.word	0x40023800

08005728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0cc      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800573c:	4b68      	ldr	r3, [pc, #416]	@ (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d90c      	bls.n	8005764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574a:	4b65      	ldr	r3, [pc, #404]	@ (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005752:	4b63      	ldr	r3, [pc, #396]	@ (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0b8      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d020      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800577c:	4b59      	ldr	r3, [pc, #356]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	4a58      	ldr	r2, [pc, #352]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005786:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005794:	4b53      	ldr	r3, [pc, #332]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	4a52      	ldr	r2, [pc, #328]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800579e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a0:	4b50      	ldr	r3, [pc, #320]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	494d      	ldr	r1, [pc, #308]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d044      	beq.n	8005848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c6:	4b47      	ldr	r3, [pc, #284]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d119      	bne.n	8005806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e07f      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d003      	beq.n	80057e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d107      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e6:	4b3f      	ldr	r3, [pc, #252]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e06f      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f6:	4b3b      	ldr	r3, [pc, #236]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e067      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005806:	4b37      	ldr	r3, [pc, #220]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f023 0203 	bic.w	r2, r3, #3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4934      	ldr	r1, [pc, #208]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	4313      	orrs	r3, r2
 8005816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005818:	f7fd fdb4 	bl	8003384 <HAL_GetTick>
 800581c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581e:	e00a      	b.n	8005836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005820:	f7fd fdb0 	bl	8003384 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e04f      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005836:	4b2b      	ldr	r3, [pc, #172]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 020c 	and.w	r2, r3, #12
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	429a      	cmp	r2, r3
 8005846:	d1eb      	bne.n	8005820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005848:	4b25      	ldr	r3, [pc, #148]	@ (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d20c      	bcs.n	8005870 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005856:	4b22      	ldr	r3, [pc, #136]	@ (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800585e:	4b20      	ldr	r3, [pc, #128]	@ (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e032      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800587c:	4b19      	ldr	r3, [pc, #100]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4916      	ldr	r1, [pc, #88]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d009      	beq.n	80058ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800589a:	4b12      	ldr	r3, [pc, #72]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	490e      	ldr	r1, [pc, #56]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058ae:	f000 f821 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 80058b2:	4602      	mov	r2, r0
 80058b4:	4b0b      	ldr	r3, [pc, #44]	@ (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	490a      	ldr	r1, [pc, #40]	@ (80058e8 <HAL_RCC_ClockConfig+0x1c0>)
 80058c0:	5ccb      	ldrb	r3, [r1, r3]
 80058c2:	fa22 f303 	lsr.w	r3, r2, r3
 80058c6:	4a09      	ldr	r2, [pc, #36]	@ (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80058c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80058ca:	4b09      	ldr	r3, [pc, #36]	@ (80058f0 <HAL_RCC_ClockConfig+0x1c8>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fd fd14 	bl	80032fc <HAL_InitTick>

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40023c00 	.word	0x40023c00
 80058e4:	40023800 	.word	0x40023800
 80058e8:	0800866c 	.word	0x0800866c
 80058ec:	20000010 	.word	0x20000010
 80058f0:	20000014 	.word	0x20000014

080058f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f8:	b094      	sub	sp, #80	@ 0x50
 80058fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800590c:	4b79      	ldr	r3, [pc, #484]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 030c 	and.w	r3, r3, #12
 8005914:	2b08      	cmp	r3, #8
 8005916:	d00d      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0x40>
 8005918:	2b08      	cmp	r3, #8
 800591a:	f200 80e1 	bhi.w	8005ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_RCC_GetSysClockFreq+0x34>
 8005922:	2b04      	cmp	r3, #4
 8005924:	d003      	beq.n	800592e <HAL_RCC_GetSysClockFreq+0x3a>
 8005926:	e0db      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005928:	4b73      	ldr	r3, [pc, #460]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800592a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800592c:	e0db      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800592e:	4b73      	ldr	r3, [pc, #460]	@ (8005afc <HAL_RCC_GetSysClockFreq+0x208>)
 8005930:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005932:	e0d8      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005934:	4b6f      	ldr	r3, [pc, #444]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800593c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800593e:	4b6d      	ldr	r3, [pc, #436]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d063      	beq.n	8005a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800594a:	4b6a      	ldr	r3, [pc, #424]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	099b      	lsrs	r3, r3, #6
 8005950:	2200      	movs	r2, #0
 8005952:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005954:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595c:	633b      	str	r3, [r7, #48]	@ 0x30
 800595e:	2300      	movs	r3, #0
 8005960:	637b      	str	r3, [r7, #52]	@ 0x34
 8005962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005966:	4622      	mov	r2, r4
 8005968:	462b      	mov	r3, r5
 800596a:	f04f 0000 	mov.w	r0, #0
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	0159      	lsls	r1, r3, #5
 8005974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005978:	0150      	lsls	r0, r2, #5
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4621      	mov	r1, r4
 8005980:	1a51      	subs	r1, r2, r1
 8005982:	6139      	str	r1, [r7, #16]
 8005984:	4629      	mov	r1, r5
 8005986:	eb63 0301 	sbc.w	r3, r3, r1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005998:	4659      	mov	r1, fp
 800599a:	018b      	lsls	r3, r1, #6
 800599c:	4651      	mov	r1, sl
 800599e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059a2:	4651      	mov	r1, sl
 80059a4:	018a      	lsls	r2, r1, #6
 80059a6:	4651      	mov	r1, sl
 80059a8:	ebb2 0801 	subs.w	r8, r2, r1
 80059ac:	4659      	mov	r1, fp
 80059ae:	eb63 0901 	sbc.w	r9, r3, r1
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059c6:	4690      	mov	r8, r2
 80059c8:	4699      	mov	r9, r3
 80059ca:	4623      	mov	r3, r4
 80059cc:	eb18 0303 	adds.w	r3, r8, r3
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	462b      	mov	r3, r5
 80059d4:	eb49 0303 	adc.w	r3, r9, r3
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059e6:	4629      	mov	r1, r5
 80059e8:	024b      	lsls	r3, r1, #9
 80059ea:	4621      	mov	r1, r4
 80059ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059f0:	4621      	mov	r1, r4
 80059f2:	024a      	lsls	r2, r1, #9
 80059f4:	4610      	mov	r0, r2
 80059f6:	4619      	mov	r1, r3
 80059f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059fa:	2200      	movs	r2, #0
 80059fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a04:	f7fa fc44 	bl	8000290 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a10:	e058      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a12:	4b38      	ldr	r3, [pc, #224]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	099b      	lsrs	r3, r3, #6
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a22:	623b      	str	r3, [r7, #32]
 8005a24:	2300      	movs	r3, #0
 8005a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	f04f 0000 	mov.w	r0, #0
 8005a34:	f04f 0100 	mov.w	r1, #0
 8005a38:	0159      	lsls	r1, r3, #5
 8005a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a3e:	0150      	lsls	r0, r2, #5
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4641      	mov	r1, r8
 8005a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a64:	ebb2 040a 	subs.w	r4, r2, sl
 8005a68:	eb63 050b 	sbc.w	r5, r3, fp
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	00eb      	lsls	r3, r5, #3
 8005a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a7a:	00e2      	lsls	r2, r4, #3
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	461d      	mov	r5, r3
 8005a80:	4643      	mov	r3, r8
 8005a82:	18e3      	adds	r3, r4, r3
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	464b      	mov	r3, r9
 8005a88:	eb45 0303 	adc.w	r3, r5, r3
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	028b      	lsls	r3, r1, #10
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	028a      	lsls	r2, r1, #10
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aae:	2200      	movs	r2, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	61fa      	str	r2, [r7, #28]
 8005ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab8:	f7fa fbea 	bl	8000290 <__aeabi_uldivmod>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005ad4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ade:	e002      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ae0:	4b05      	ldr	r3, [pc, #20]	@ (8005af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3750      	adds	r7, #80	@ 0x50
 8005aec:	46bd      	mov	sp, r7
 8005aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
 8005af8:	00f42400 	.word	0x00f42400
 8005afc:	007a1200 	.word	0x007a1200

08005b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b04:	4b03      	ldr	r3, [pc, #12]	@ (8005b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000010 	.word	0x20000010

08005b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b1c:	f7ff fff0 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b05      	ldr	r3, [pc, #20]	@ (8005b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0a9b      	lsrs	r3, r3, #10
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4903      	ldr	r1, [pc, #12]	@ (8005b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	0800867c 	.word	0x0800867c

08005b40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b086      	sub	sp, #24
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10b      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d075      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b74:	4b91      	ldr	r3, [pc, #580]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b7a:	f7fd fc03 	bl	8003384 <HAL_GetTick>
 8005b7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b82:	f7fd fbff 	bl	8003384 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e189      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b94:	4b8a      	ldr	r3, [pc, #552]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1f0      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d009      	beq.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	019a      	lsls	r2, r3, #6
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	071b      	lsls	r3, r3, #28
 8005bb8:	4981      	ldr	r1, [pc, #516]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01f      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bcc:	4b7c      	ldr	r3, [pc, #496]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bd2:	0f1b      	lsrs	r3, r3, #28
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	019a      	lsls	r2, r3, #6
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	061b      	lsls	r3, r3, #24
 8005be6:	431a      	orrs	r2, r3
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	071b      	lsls	r3, r3, #28
 8005bec:	4974      	ldr	r1, [pc, #464]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bf4:	4b72      	ldr	r3, [pc, #456]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bfa:	f023 021f 	bic.w	r2, r3, #31
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	496e      	ldr	r1, [pc, #440]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00d      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	019a      	lsls	r2, r3, #6
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	061b      	lsls	r3, r3, #24
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	071b      	lsls	r3, r3, #28
 8005c2c:	4964      	ldr	r1, [pc, #400]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c34:	4b61      	ldr	r3, [pc, #388]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c3a:	f7fd fba3 	bl	8003384 <HAL_GetTick>
 8005c3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c40:	e008      	b.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c42:	f7fd fb9f 	bl	8003384 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e129      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c54:	4b5a      	ldr	r3, [pc, #360]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0f0      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d105      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d079      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c78:	4b52      	ldr	r3, [pc, #328]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c7e:	f7fd fb81 	bl	8003384 <HAL_GetTick>
 8005c82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c86:	f7fd fb7d 	bl	8003384 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e107      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c98:	4b49      	ldr	r3, [pc, #292]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ca4:	d0ef      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d020      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005cb2:	4b43      	ldr	r3, [pc, #268]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb8:	0f1b      	lsrs	r3, r3, #28
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	019a      	lsls	r2, r3, #6
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	061b      	lsls	r3, r3, #24
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	071b      	lsls	r3, r3, #28
 8005cd2:	493b      	ldr	r1, [pc, #236]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005cda:	4b39      	ldr	r3, [pc, #228]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ce0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	4934      	ldr	r1, [pc, #208]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d01e      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d00:	4b2f      	ldr	r3, [pc, #188]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d06:	0e1b      	lsrs	r3, r3, #24
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	019a      	lsls	r2, r3, #6
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	061b      	lsls	r3, r3, #24
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	071b      	lsls	r3, r3, #28
 8005d20:	4927      	ldr	r1, [pc, #156]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d28:	4b25      	ldr	r3, [pc, #148]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d2e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d36:	4922      	ldr	r1, [pc, #136]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d3e:	4b21      	ldr	r3, [pc, #132]	@ (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d44:	f7fd fb1e 	bl	8003384 <HAL_GetTick>
 8005d48:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d4c:	f7fd fb1a 	bl	8003384 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e0a4      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d5e:	4b18      	ldr	r3, [pc, #96]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d6a:	d1ef      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 808b 	beq.w	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	4b10      	ldr	r3, [pc, #64]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d82:	4a0f      	ldr	r2, [pc, #60]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d96:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a0b      	ldr	r2, [pc, #44]	@ (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005da0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005da2:	f7fd faef 	bl	8003384 <HAL_GetTick>
 8005da6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005da8:	e010      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005daa:	f7fd faeb 	bl	8003384 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d909      	bls.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e075      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005dbc:	42470068 	.word	0x42470068
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	42470070 	.word	0x42470070
 8005dc8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005dcc:	4b38      	ldr	r3, [pc, #224]	@ (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0e8      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005dd8:	4b36      	ldr	r3, [pc, #216]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ddc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005de0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d02f      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d028      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005df6:	4b2f      	ldr	r3, [pc, #188]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dfe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e00:	4b2d      	ldr	r3, [pc, #180]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e02:	2201      	movs	r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e06:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e0c:	4a29      	ldr	r2, [pc, #164]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e12:	4b28      	ldr	r3, [pc, #160]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d114      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e1e:	f7fd fab1 	bl	8003384 <HAL_GetTick>
 8005e22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e24:	e00a      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e26:	f7fd faad 	bl	8003384 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e035      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0ee      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e54:	d10d      	bne.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005e56:	4b17      	ldr	r3, [pc, #92]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e6a:	4912      	ldr	r1, [pc, #72]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	608b      	str	r3, [r1, #8]
 8005e70:	e005      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005e72:	4b10      	ldr	r3, [pc, #64]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	4a0f      	ldr	r2, [pc, #60]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e78:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e7c:	6093      	str	r3, [r2, #8]
 8005e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e8a:	490a      	ldr	r1, [pc, #40]	@ (8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005ea2:	4b06      	ldr	r3, [pc, #24]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005ea4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	40007000 	.word	0x40007000
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	42470e40 	.word	0x42470e40
 8005ebc:	424711e0 	.word	0x424711e0

08005ec0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e01c      	b.n	8005f0c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	795b      	ldrb	r3, [r3, #5]
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d105      	bne.n	8005ee8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fc fd4e 	bl	8002984 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0204 	orr.w	r2, r2, #4
 8005efc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	791b      	ldrb	r3, [r3, #4]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_RNG_GenerateRandomNumber+0x1a>
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	e044      	b.n	8005fb8 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	795b      	ldrb	r3, [r3, #5]
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d133      	bne.n	8005fa6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f44:	f7fd fa1e 	bl	8003384 <HAL_GetTick>
 8005f48:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f4a:	e018      	b.n	8005f7e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005f4c:	f7fd fa1a 	bl	8003384 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d911      	bls.n	8005f7e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d00a      	beq.n	8005f7e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e01c      	b.n	8005fb8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d1df      	bne.n	8005f4c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	715a      	strb	r2, [r3, #5]
 8005fa4:	e004      	b.n	8005fb0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2204      	movs	r2, #4
 8005faa:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	711a      	strb	r2, [r3, #4]

  return status;
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e07b      	b.n	80060ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d108      	bne.n	8005fec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fe2:	d009      	beq.n	8005ff8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	61da      	str	r2, [r3, #28]
 8005fea:	e005      	b.n	8005ff8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fc fcd8 	bl	80029c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800602e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607c:	ea42 0103 	orr.w	r1, r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006084:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	0c1b      	lsrs	r3, r3, #16
 8006096:	f003 0104 	and.w	r1, r3, #4
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800609e:	f003 0210 	and.w	r2, r3, #16
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e01a      	b.n	800611a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060fa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7fc fcab 	bl	8002a58 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b088      	sub	sp, #32
 8006126:	af00      	add	r7, sp, #0
 8006128:	60f8      	str	r0, [r7, #12]
 800612a:	60b9      	str	r1, [r7, #8]
 800612c:	603b      	str	r3, [r7, #0]
 800612e:	4613      	mov	r3, r2
 8006130:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006132:	f7fd f927 	bl	8003384 <HAL_GetTick>
 8006136:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d001      	beq.n	800614c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006148:	2302      	movs	r3, #2
 800614a:	e12a      	b.n	80063a2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d002      	beq.n	8006158 <HAL_SPI_Transmit+0x36>
 8006152:	88fb      	ldrh	r3, [r7, #6]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e122      	b.n	80063a2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <HAL_SPI_Transmit+0x48>
 8006166:	2302      	movs	r3, #2
 8006168:	e11b      	b.n	80063a2 <HAL_SPI_Transmit+0x280>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2203      	movs	r2, #3
 8006176:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	88fa      	ldrh	r2, [r7, #6]
 800618a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	88fa      	ldrh	r2, [r7, #6]
 8006190:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061b8:	d10f      	bne.n	80061da <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80061d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e4:	2b40      	cmp	r3, #64	@ 0x40
 80061e6:	d007      	beq.n	80061f8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006200:	d152      	bne.n	80062a8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d002      	beq.n	8006210 <HAL_SPI_Transmit+0xee>
 800620a:	8b7b      	ldrh	r3, [r7, #26]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d145      	bne.n	800629c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006214:	881a      	ldrh	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006220:	1c9a      	adds	r2, r3, #2
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006234:	e032      	b.n	800629c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b02      	cmp	r3, #2
 8006242:	d112      	bne.n	800626a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006248:	881a      	ldrh	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006254:	1c9a      	adds	r2, r3, #2
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800625e:	b29b      	uxth	r3, r3
 8006260:	3b01      	subs	r3, #1
 8006262:	b29a      	uxth	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006268:	e018      	b.n	800629c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800626a:	f7fd f88b 	bl	8003384 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d803      	bhi.n	8006282 <HAL_SPI_Transmit+0x160>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006280:	d102      	bne.n	8006288 <HAL_SPI_Transmit+0x166>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d109      	bne.n	800629c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e082      	b.n	80063a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1c7      	bne.n	8006236 <HAL_SPI_Transmit+0x114>
 80062a6:	e053      	b.n	8006350 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_SPI_Transmit+0x194>
 80062b0:	8b7b      	ldrh	r3, [r7, #26]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d147      	bne.n	8006346 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	330c      	adds	r3, #12
 80062c0:	7812      	ldrb	r2, [r2, #0]
 80062c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062dc:	e033      	b.n	8006346 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 0302 	and.w	r3, r3, #2
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	d113      	bne.n	8006314 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	330c      	adds	r3, #12
 80062f6:	7812      	ldrb	r2, [r2, #0]
 80062f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006308:	b29b      	uxth	r3, r3
 800630a:	3b01      	subs	r3, #1
 800630c:	b29a      	uxth	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006312:	e018      	b.n	8006346 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006314:	f7fd f836 	bl	8003384 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d803      	bhi.n	800632c <HAL_SPI_Transmit+0x20a>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	d102      	bne.n	8006332 <HAL_SPI_Transmit+0x210>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d109      	bne.n	8006346 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e02d      	b.n	80063a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800634a:	b29b      	uxth	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1c6      	bne.n	80062de <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f8bf 	bl	80064d8 <SPI_EndRxTxTransaction>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d002      	beq.n	8006366 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2220      	movs	r2, #32
 8006364:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10a      	bne.n	8006384 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80063a0:	2300      	movs	r3, #0
  }
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3720      	adds	r7, #32
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063b8:	b2db      	uxtb	r3, r3
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b088      	sub	sp, #32
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063d8:	f7fc ffd4 	bl	8003384 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e0:	1a9b      	subs	r3, r3, r2
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	4413      	add	r3, r2
 80063e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063e8:	f7fc ffcc 	bl	8003384 <HAL_GetTick>
 80063ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063ee:	4b39      	ldr	r3, [pc, #228]	@ (80064d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	015b      	lsls	r3, r3, #5
 80063f4:	0d1b      	lsrs	r3, r3, #20
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	fb02 f303 	mul.w	r3, r2, r3
 80063fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063fe:	e054      	b.n	80064aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006406:	d050      	beq.n	80064aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006408:	f7fc ffbc 	bl	8003384 <HAL_GetTick>
 800640c:	4602      	mov	r2, r0
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	1ad3      	subs	r3, r2, r3
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	429a      	cmp	r2, r3
 8006416:	d902      	bls.n	800641e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d13d      	bne.n	800649a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800642c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006436:	d111      	bne.n	800645c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006440:	d004      	beq.n	800644c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800644a:	d107      	bne.n	800645c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800645a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006464:	d10f      	bne.n	8006486 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e017      	b.n	80064ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	bf0c      	ite	eq
 80064ba:	2301      	moveq	r3, #1
 80064bc:	2300      	movne	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d19b      	bne.n	8006400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3720      	adds	r7, #32
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20000010 	.word	0x20000010

080064d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af02      	add	r7, sp, #8
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	2201      	movs	r2, #1
 80064ec:	2102      	movs	r1, #2
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7ff ff6a 	bl	80063c8 <SPI_WaitFlagStateUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064fe:	f043 0220 	orr.w	r2, r3, #32
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e032      	b.n	8006570 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800650a:	4b1b      	ldr	r3, [pc, #108]	@ (8006578 <SPI_EndRxTxTransaction+0xa0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a1b      	ldr	r2, [pc, #108]	@ (800657c <SPI_EndRxTxTransaction+0xa4>)
 8006510:	fba2 2303 	umull	r2, r3, r2, r3
 8006514:	0d5b      	lsrs	r3, r3, #21
 8006516:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800651a:	fb02 f303 	mul.w	r3, r2, r3
 800651e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006528:	d112      	bne.n	8006550 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	2200      	movs	r2, #0
 8006532:	2180      	movs	r1, #128	@ 0x80
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7ff ff47 	bl	80063c8 <SPI_WaitFlagStateUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d016      	beq.n	800656e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006544:	f043 0220 	orr.w	r2, r3, #32
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e00f      	b.n	8006570 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	3b01      	subs	r3, #1
 800655a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006566:	2b80      	cmp	r3, #128	@ 0x80
 8006568:	d0f2      	beq.n	8006550 <SPI_EndRxTxTransaction+0x78>
 800656a:	e000      	b.n	800656e <SPI_EndRxTxTransaction+0x96>
        break;
 800656c:	bf00      	nop
  }

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	20000010 	.word	0x20000010
 800657c:	165e9f81 	.word	0x165e9f81

08006580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e041      	b.n	8006616 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fc fa74 	bl	8002a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f000 f8f4 	bl	80067ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_TIM_ConfigClockSource+0x1c>
 8006636:	2302      	movs	r3, #2
 8006638:	e0b4      	b.n	80067a4 <HAL_TIM_ConfigClockSource+0x186>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2202      	movs	r2, #2
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006658:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006660:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006672:	d03e      	beq.n	80066f2 <HAL_TIM_ConfigClockSource+0xd4>
 8006674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006678:	f200 8087 	bhi.w	800678a <HAL_TIM_ConfigClockSource+0x16c>
 800667c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006680:	f000 8086 	beq.w	8006790 <HAL_TIM_ConfigClockSource+0x172>
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006688:	d87f      	bhi.n	800678a <HAL_TIM_ConfigClockSource+0x16c>
 800668a:	2b70      	cmp	r3, #112	@ 0x70
 800668c:	d01a      	beq.n	80066c4 <HAL_TIM_ConfigClockSource+0xa6>
 800668e:	2b70      	cmp	r3, #112	@ 0x70
 8006690:	d87b      	bhi.n	800678a <HAL_TIM_ConfigClockSource+0x16c>
 8006692:	2b60      	cmp	r3, #96	@ 0x60
 8006694:	d050      	beq.n	8006738 <HAL_TIM_ConfigClockSource+0x11a>
 8006696:	2b60      	cmp	r3, #96	@ 0x60
 8006698:	d877      	bhi.n	800678a <HAL_TIM_ConfigClockSource+0x16c>
 800669a:	2b50      	cmp	r3, #80	@ 0x50
 800669c:	d03c      	beq.n	8006718 <HAL_TIM_ConfigClockSource+0xfa>
 800669e:	2b50      	cmp	r3, #80	@ 0x50
 80066a0:	d873      	bhi.n	800678a <HAL_TIM_ConfigClockSource+0x16c>
 80066a2:	2b40      	cmp	r3, #64	@ 0x40
 80066a4:	d058      	beq.n	8006758 <HAL_TIM_ConfigClockSource+0x13a>
 80066a6:	2b40      	cmp	r3, #64	@ 0x40
 80066a8:	d86f      	bhi.n	800678a <HAL_TIM_ConfigClockSource+0x16c>
 80066aa:	2b30      	cmp	r3, #48	@ 0x30
 80066ac:	d064      	beq.n	8006778 <HAL_TIM_ConfigClockSource+0x15a>
 80066ae:	2b30      	cmp	r3, #48	@ 0x30
 80066b0:	d86b      	bhi.n	800678a <HAL_TIM_ConfigClockSource+0x16c>
 80066b2:	2b20      	cmp	r3, #32
 80066b4:	d060      	beq.n	8006778 <HAL_TIM_ConfigClockSource+0x15a>
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	d867      	bhi.n	800678a <HAL_TIM_ConfigClockSource+0x16c>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d05c      	beq.n	8006778 <HAL_TIM_ConfigClockSource+0x15a>
 80066be:	2b10      	cmp	r3, #16
 80066c0:	d05a      	beq.n	8006778 <HAL_TIM_ConfigClockSource+0x15a>
 80066c2:	e062      	b.n	800678a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066d4:	f000 f990 	bl	80069f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	609a      	str	r2, [r3, #8]
      break;
 80066f0:	e04f      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006702:	f000 f979 	bl	80069f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006714:	609a      	str	r2, [r3, #8]
      break;
 8006716:	e03c      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006724:	461a      	mov	r2, r3
 8006726:	f000 f8ed 	bl	8006904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2150      	movs	r1, #80	@ 0x50
 8006730:	4618      	mov	r0, r3
 8006732:	f000 f946 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006736:	e02c      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006744:	461a      	mov	r2, r3
 8006746:	f000 f90c 	bl	8006962 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2160      	movs	r1, #96	@ 0x60
 8006750:	4618      	mov	r0, r3
 8006752:	f000 f936 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006756:	e01c      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006764:	461a      	mov	r2, r3
 8006766:	f000 f8cd 	bl	8006904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2140      	movs	r1, #64	@ 0x40
 8006770:	4618      	mov	r0, r3
 8006772:	f000 f926 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006776:	e00c      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f000 f91d 	bl	80069c2 <TIM_ITRx_SetConfig>
      break;
 8006788:	e003      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	73fb      	strb	r3, [r7, #15]
      break;
 800678e:	e000      	b.n	8006792 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006790:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a46      	ldr	r2, [pc, #280]	@ (80068d8 <TIM_Base_SetConfig+0x12c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d013      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ca:	d00f      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a43      	ldr	r2, [pc, #268]	@ (80068dc <TIM_Base_SetConfig+0x130>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00b      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a42      	ldr	r2, [pc, #264]	@ (80068e0 <TIM_Base_SetConfig+0x134>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d007      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a41      	ldr	r2, [pc, #260]	@ (80068e4 <TIM_Base_SetConfig+0x138>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_Base_SetConfig+0x40>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a40      	ldr	r2, [pc, #256]	@ (80068e8 <TIM_Base_SetConfig+0x13c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d108      	bne.n	80067fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a35      	ldr	r2, [pc, #212]	@ (80068d8 <TIM_Base_SetConfig+0x12c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d02b      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800680c:	d027      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a32      	ldr	r2, [pc, #200]	@ (80068dc <TIM_Base_SetConfig+0x130>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d023      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a31      	ldr	r2, [pc, #196]	@ (80068e0 <TIM_Base_SetConfig+0x134>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d01f      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a30      	ldr	r2, [pc, #192]	@ (80068e4 <TIM_Base_SetConfig+0x138>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d01b      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2f      	ldr	r2, [pc, #188]	@ (80068e8 <TIM_Base_SetConfig+0x13c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d017      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a2e      	ldr	r2, [pc, #184]	@ (80068ec <TIM_Base_SetConfig+0x140>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d013      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a2d      	ldr	r2, [pc, #180]	@ (80068f0 <TIM_Base_SetConfig+0x144>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d00f      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a2c      	ldr	r2, [pc, #176]	@ (80068f4 <TIM_Base_SetConfig+0x148>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00b      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a2b      	ldr	r2, [pc, #172]	@ (80068f8 <TIM_Base_SetConfig+0x14c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d007      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2a      	ldr	r2, [pc, #168]	@ (80068fc <TIM_Base_SetConfig+0x150>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d003      	beq.n	800685e <TIM_Base_SetConfig+0xb2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a29      	ldr	r2, [pc, #164]	@ (8006900 <TIM_Base_SetConfig+0x154>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d108      	bne.n	8006870 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a10      	ldr	r2, [pc, #64]	@ (80068d8 <TIM_Base_SetConfig+0x12c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_Base_SetConfig+0xf8>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a12      	ldr	r2, [pc, #72]	@ (80068e8 <TIM_Base_SetConfig+0x13c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d103      	bne.n	80068ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d105      	bne.n	80068ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	f023 0201 	bic.w	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	611a      	str	r2, [r3, #16]
  }
}
 80068ca:	bf00      	nop
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40000400 	.word	0x40000400
 80068e0:	40000800 	.word	0x40000800
 80068e4:	40000c00 	.word	0x40000c00
 80068e8:	40010400 	.word	0x40010400
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40014400 	.word	0x40014400
 80068f4:	40014800 	.word	0x40014800
 80068f8:	40001800 	.word	0x40001800
 80068fc:	40001c00 	.word	0x40001c00
 8006900:	40002000 	.word	0x40002000

08006904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f023 0201 	bic.w	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800692e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f023 030a 	bic.w	r3, r3, #10
 8006940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006962:	b480      	push	{r7}
 8006964:	b087      	sub	sp, #28
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	f023 0210 	bic.w	r2, r3, #16
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800698c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	031b      	lsls	r3, r3, #12
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800699e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b085      	sub	sp, #20
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	f043 0307 	orr.w	r3, r3, #7
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b087      	sub	sp, #28
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	021a      	lsls	r2, r3, #8
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	609a      	str	r2, [r3, #8]
}
 8006a2c:	bf00      	nop
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e05a      	b.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a21      	ldr	r2, [pc, #132]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d022      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a9c:	d01d      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d018      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1b      	ldr	r2, [pc, #108]	@ (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00e      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a18      	ldr	r2, [pc, #96]	@ (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a17      	ldr	r2, [pc, #92]	@ (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a15      	ldr	r2, [pc, #84]	@ (8006b2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d10c      	bne.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40010400 	.word	0x40010400
 8006b28:	40014000 	.word	0x40014000
 8006b2c:	40001800 	.word	0x40001800

08006b30 <siprintf>:
 8006b30:	b40e      	push	{r1, r2, r3}
 8006b32:	b500      	push	{lr}
 8006b34:	b09c      	sub	sp, #112	@ 0x70
 8006b36:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b38:	9002      	str	r0, [sp, #8]
 8006b3a:	9006      	str	r0, [sp, #24]
 8006b3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b40:	4809      	ldr	r0, [pc, #36]	@ (8006b68 <siprintf+0x38>)
 8006b42:	9107      	str	r1, [sp, #28]
 8006b44:	9104      	str	r1, [sp, #16]
 8006b46:	4909      	ldr	r1, [pc, #36]	@ (8006b6c <siprintf+0x3c>)
 8006b48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b4c:	9105      	str	r1, [sp, #20]
 8006b4e:	6800      	ldr	r0, [r0, #0]
 8006b50:	9301      	str	r3, [sp, #4]
 8006b52:	a902      	add	r1, sp, #8
 8006b54:	f000 f994 	bl	8006e80 <_svfiprintf_r>
 8006b58:	9b02      	ldr	r3, [sp, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	b01c      	add	sp, #112	@ 0x70
 8006b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b64:	b003      	add	sp, #12
 8006b66:	4770      	bx	lr
 8006b68:	2000001c 	.word	0x2000001c
 8006b6c:	ffff0208 	.word	0xffff0208

08006b70 <memset>:
 8006b70:	4402      	add	r2, r0
 8006b72:	4603      	mov	r3, r0
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d100      	bne.n	8006b7a <memset+0xa>
 8006b78:	4770      	bx	lr
 8006b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b7e:	e7f9      	b.n	8006b74 <memset+0x4>

08006b80 <__errno>:
 8006b80:	4b01      	ldr	r3, [pc, #4]	@ (8006b88 <__errno+0x8>)
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	2000001c 	.word	0x2000001c

08006b8c <__libc_init_array>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8006bc4 <__libc_init_array+0x38>)
 8006b90:	4c0d      	ldr	r4, [pc, #52]	@ (8006bc8 <__libc_init_array+0x3c>)
 8006b92:	1b64      	subs	r4, r4, r5
 8006b94:	10a4      	asrs	r4, r4, #2
 8006b96:	2600      	movs	r6, #0
 8006b98:	42a6      	cmp	r6, r4
 8006b9a:	d109      	bne.n	8006bb0 <__libc_init_array+0x24>
 8006b9c:	4d0b      	ldr	r5, [pc, #44]	@ (8006bcc <__libc_init_array+0x40>)
 8006b9e:	4c0c      	ldr	r4, [pc, #48]	@ (8006bd0 <__libc_init_array+0x44>)
 8006ba0:	f000 fc66 	bl	8007470 <_init>
 8006ba4:	1b64      	subs	r4, r4, r5
 8006ba6:	10a4      	asrs	r4, r4, #2
 8006ba8:	2600      	movs	r6, #0
 8006baa:	42a6      	cmp	r6, r4
 8006bac:	d105      	bne.n	8006bba <__libc_init_array+0x2e>
 8006bae:	bd70      	pop	{r4, r5, r6, pc}
 8006bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb4:	4798      	blx	r3
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	e7ee      	b.n	8006b98 <__libc_init_array+0xc>
 8006bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bbe:	4798      	blx	r3
 8006bc0:	3601      	adds	r6, #1
 8006bc2:	e7f2      	b.n	8006baa <__libc_init_array+0x1e>
 8006bc4:	080086c0 	.word	0x080086c0
 8006bc8:	080086c0 	.word	0x080086c0
 8006bcc:	080086c0 	.word	0x080086c0
 8006bd0:	080086c4 	.word	0x080086c4

08006bd4 <__retarget_lock_acquire_recursive>:
 8006bd4:	4770      	bx	lr

08006bd6 <__retarget_lock_release_recursive>:
 8006bd6:	4770      	bx	lr

08006bd8 <_free_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4605      	mov	r5, r0
 8006bdc:	2900      	cmp	r1, #0
 8006bde:	d041      	beq.n	8006c64 <_free_r+0x8c>
 8006be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be4:	1f0c      	subs	r4, r1, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfb8      	it	lt
 8006bea:	18e4      	addlt	r4, r4, r3
 8006bec:	f000 f8e0 	bl	8006db0 <__malloc_lock>
 8006bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c68 <_free_r+0x90>)
 8006bf2:	6813      	ldr	r3, [r2, #0]
 8006bf4:	b933      	cbnz	r3, 8006c04 <_free_r+0x2c>
 8006bf6:	6063      	str	r3, [r4, #4]
 8006bf8:	6014      	str	r4, [r2, #0]
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c00:	f000 b8dc 	b.w	8006dbc <__malloc_unlock>
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	d908      	bls.n	8006c1a <_free_r+0x42>
 8006c08:	6820      	ldr	r0, [r4, #0]
 8006c0a:	1821      	adds	r1, r4, r0
 8006c0c:	428b      	cmp	r3, r1
 8006c0e:	bf01      	itttt	eq
 8006c10:	6819      	ldreq	r1, [r3, #0]
 8006c12:	685b      	ldreq	r3, [r3, #4]
 8006c14:	1809      	addeq	r1, r1, r0
 8006c16:	6021      	streq	r1, [r4, #0]
 8006c18:	e7ed      	b.n	8006bf6 <_free_r+0x1e>
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	b10b      	cbz	r3, 8006c24 <_free_r+0x4c>
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	d9fa      	bls.n	8006c1a <_free_r+0x42>
 8006c24:	6811      	ldr	r1, [r2, #0]
 8006c26:	1850      	adds	r0, r2, r1
 8006c28:	42a0      	cmp	r0, r4
 8006c2a:	d10b      	bne.n	8006c44 <_free_r+0x6c>
 8006c2c:	6820      	ldr	r0, [r4, #0]
 8006c2e:	4401      	add	r1, r0
 8006c30:	1850      	adds	r0, r2, r1
 8006c32:	4283      	cmp	r3, r0
 8006c34:	6011      	str	r1, [r2, #0]
 8006c36:	d1e0      	bne.n	8006bfa <_free_r+0x22>
 8006c38:	6818      	ldr	r0, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	6053      	str	r3, [r2, #4]
 8006c3e:	4408      	add	r0, r1
 8006c40:	6010      	str	r0, [r2, #0]
 8006c42:	e7da      	b.n	8006bfa <_free_r+0x22>
 8006c44:	d902      	bls.n	8006c4c <_free_r+0x74>
 8006c46:	230c      	movs	r3, #12
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	e7d6      	b.n	8006bfa <_free_r+0x22>
 8006c4c:	6820      	ldr	r0, [r4, #0]
 8006c4e:	1821      	adds	r1, r4, r0
 8006c50:	428b      	cmp	r3, r1
 8006c52:	bf04      	itt	eq
 8006c54:	6819      	ldreq	r1, [r3, #0]
 8006c56:	685b      	ldreq	r3, [r3, #4]
 8006c58:	6063      	str	r3, [r4, #4]
 8006c5a:	bf04      	itt	eq
 8006c5c:	1809      	addeq	r1, r1, r0
 8006c5e:	6021      	streq	r1, [r4, #0]
 8006c60:	6054      	str	r4, [r2, #4]
 8006c62:	e7ca      	b.n	8006bfa <_free_r+0x22>
 8006c64:	bd38      	pop	{r3, r4, r5, pc}
 8006c66:	bf00      	nop
 8006c68:	20025e14 	.word	0x20025e14

08006c6c <sbrk_aligned>:
 8006c6c:	b570      	push	{r4, r5, r6, lr}
 8006c6e:	4e0f      	ldr	r6, [pc, #60]	@ (8006cac <sbrk_aligned+0x40>)
 8006c70:	460c      	mov	r4, r1
 8006c72:	6831      	ldr	r1, [r6, #0]
 8006c74:	4605      	mov	r5, r0
 8006c76:	b911      	cbnz	r1, 8006c7e <sbrk_aligned+0x12>
 8006c78:	f000 fba6 	bl	80073c8 <_sbrk_r>
 8006c7c:	6030      	str	r0, [r6, #0]
 8006c7e:	4621      	mov	r1, r4
 8006c80:	4628      	mov	r0, r5
 8006c82:	f000 fba1 	bl	80073c8 <_sbrk_r>
 8006c86:	1c43      	adds	r3, r0, #1
 8006c88:	d103      	bne.n	8006c92 <sbrk_aligned+0x26>
 8006c8a:	f04f 34ff 	mov.w	r4, #4294967295
 8006c8e:	4620      	mov	r0, r4
 8006c90:	bd70      	pop	{r4, r5, r6, pc}
 8006c92:	1cc4      	adds	r4, r0, #3
 8006c94:	f024 0403 	bic.w	r4, r4, #3
 8006c98:	42a0      	cmp	r0, r4
 8006c9a:	d0f8      	beq.n	8006c8e <sbrk_aligned+0x22>
 8006c9c:	1a21      	subs	r1, r4, r0
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 fb92 	bl	80073c8 <_sbrk_r>
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	d1f2      	bne.n	8006c8e <sbrk_aligned+0x22>
 8006ca8:	e7ef      	b.n	8006c8a <sbrk_aligned+0x1e>
 8006caa:	bf00      	nop
 8006cac:	20025e10 	.word	0x20025e10

08006cb0 <_malloc_r>:
 8006cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb4:	1ccd      	adds	r5, r1, #3
 8006cb6:	f025 0503 	bic.w	r5, r5, #3
 8006cba:	3508      	adds	r5, #8
 8006cbc:	2d0c      	cmp	r5, #12
 8006cbe:	bf38      	it	cc
 8006cc0:	250c      	movcc	r5, #12
 8006cc2:	2d00      	cmp	r5, #0
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	db01      	blt.n	8006ccc <_malloc_r+0x1c>
 8006cc8:	42a9      	cmp	r1, r5
 8006cca:	d904      	bls.n	8006cd6 <_malloc_r+0x26>
 8006ccc:	230c      	movs	r3, #12
 8006cce:	6033      	str	r3, [r6, #0]
 8006cd0:	2000      	movs	r0, #0
 8006cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006dac <_malloc_r+0xfc>
 8006cda:	f000 f869 	bl	8006db0 <__malloc_lock>
 8006cde:	f8d8 3000 	ldr.w	r3, [r8]
 8006ce2:	461c      	mov	r4, r3
 8006ce4:	bb44      	cbnz	r4, 8006d38 <_malloc_r+0x88>
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff ffbf 	bl	8006c6c <sbrk_aligned>
 8006cee:	1c43      	adds	r3, r0, #1
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	d158      	bne.n	8006da6 <_malloc_r+0xf6>
 8006cf4:	f8d8 4000 	ldr.w	r4, [r8]
 8006cf8:	4627      	mov	r7, r4
 8006cfa:	2f00      	cmp	r7, #0
 8006cfc:	d143      	bne.n	8006d86 <_malloc_r+0xd6>
 8006cfe:	2c00      	cmp	r4, #0
 8006d00:	d04b      	beq.n	8006d9a <_malloc_r+0xea>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	4639      	mov	r1, r7
 8006d06:	4630      	mov	r0, r6
 8006d08:	eb04 0903 	add.w	r9, r4, r3
 8006d0c:	f000 fb5c 	bl	80073c8 <_sbrk_r>
 8006d10:	4581      	cmp	r9, r0
 8006d12:	d142      	bne.n	8006d9a <_malloc_r+0xea>
 8006d14:	6821      	ldr	r1, [r4, #0]
 8006d16:	1a6d      	subs	r5, r5, r1
 8006d18:	4629      	mov	r1, r5
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f7ff ffa6 	bl	8006c6c <sbrk_aligned>
 8006d20:	3001      	adds	r0, #1
 8006d22:	d03a      	beq.n	8006d9a <_malloc_r+0xea>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	442b      	add	r3, r5
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	bb62      	cbnz	r2, 8006d8c <_malloc_r+0xdc>
 8006d32:	f8c8 7000 	str.w	r7, [r8]
 8006d36:	e00f      	b.n	8006d58 <_malloc_r+0xa8>
 8006d38:	6822      	ldr	r2, [r4, #0]
 8006d3a:	1b52      	subs	r2, r2, r5
 8006d3c:	d420      	bmi.n	8006d80 <_malloc_r+0xd0>
 8006d3e:	2a0b      	cmp	r2, #11
 8006d40:	d917      	bls.n	8006d72 <_malloc_r+0xc2>
 8006d42:	1961      	adds	r1, r4, r5
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	6025      	str	r5, [r4, #0]
 8006d48:	bf18      	it	ne
 8006d4a:	6059      	strne	r1, [r3, #4]
 8006d4c:	6863      	ldr	r3, [r4, #4]
 8006d4e:	bf08      	it	eq
 8006d50:	f8c8 1000 	streq.w	r1, [r8]
 8006d54:	5162      	str	r2, [r4, r5]
 8006d56:	604b      	str	r3, [r1, #4]
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f000 f82f 	bl	8006dbc <__malloc_unlock>
 8006d5e:	f104 000b 	add.w	r0, r4, #11
 8006d62:	1d23      	adds	r3, r4, #4
 8006d64:	f020 0007 	bic.w	r0, r0, #7
 8006d68:	1ac2      	subs	r2, r0, r3
 8006d6a:	bf1c      	itt	ne
 8006d6c:	1a1b      	subne	r3, r3, r0
 8006d6e:	50a3      	strne	r3, [r4, r2]
 8006d70:	e7af      	b.n	8006cd2 <_malloc_r+0x22>
 8006d72:	6862      	ldr	r2, [r4, #4]
 8006d74:	42a3      	cmp	r3, r4
 8006d76:	bf0c      	ite	eq
 8006d78:	f8c8 2000 	streq.w	r2, [r8]
 8006d7c:	605a      	strne	r2, [r3, #4]
 8006d7e:	e7eb      	b.n	8006d58 <_malloc_r+0xa8>
 8006d80:	4623      	mov	r3, r4
 8006d82:	6864      	ldr	r4, [r4, #4]
 8006d84:	e7ae      	b.n	8006ce4 <_malloc_r+0x34>
 8006d86:	463c      	mov	r4, r7
 8006d88:	687f      	ldr	r7, [r7, #4]
 8006d8a:	e7b6      	b.n	8006cfa <_malloc_r+0x4a>
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	d1fb      	bne.n	8006d8c <_malloc_r+0xdc>
 8006d94:	2300      	movs	r3, #0
 8006d96:	6053      	str	r3, [r2, #4]
 8006d98:	e7de      	b.n	8006d58 <_malloc_r+0xa8>
 8006d9a:	230c      	movs	r3, #12
 8006d9c:	6033      	str	r3, [r6, #0]
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f000 f80c 	bl	8006dbc <__malloc_unlock>
 8006da4:	e794      	b.n	8006cd0 <_malloc_r+0x20>
 8006da6:	6005      	str	r5, [r0, #0]
 8006da8:	e7d6      	b.n	8006d58 <_malloc_r+0xa8>
 8006daa:	bf00      	nop
 8006dac:	20025e14 	.word	0x20025e14

08006db0 <__malloc_lock>:
 8006db0:	4801      	ldr	r0, [pc, #4]	@ (8006db8 <__malloc_lock+0x8>)
 8006db2:	f7ff bf0f 	b.w	8006bd4 <__retarget_lock_acquire_recursive>
 8006db6:	bf00      	nop
 8006db8:	20025e0c 	.word	0x20025e0c

08006dbc <__malloc_unlock>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	@ (8006dc4 <__malloc_unlock+0x8>)
 8006dbe:	f7ff bf0a 	b.w	8006bd6 <__retarget_lock_release_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	20025e0c 	.word	0x20025e0c

08006dc8 <__ssputs_r>:
 8006dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dcc:	688e      	ldr	r6, [r1, #8]
 8006dce:	461f      	mov	r7, r3
 8006dd0:	42be      	cmp	r6, r7
 8006dd2:	680b      	ldr	r3, [r1, #0]
 8006dd4:	4682      	mov	sl, r0
 8006dd6:	460c      	mov	r4, r1
 8006dd8:	4690      	mov	r8, r2
 8006dda:	d82d      	bhi.n	8006e38 <__ssputs_r+0x70>
 8006ddc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006de0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006de4:	d026      	beq.n	8006e34 <__ssputs_r+0x6c>
 8006de6:	6965      	ldr	r5, [r4, #20]
 8006de8:	6909      	ldr	r1, [r1, #16]
 8006dea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dee:	eba3 0901 	sub.w	r9, r3, r1
 8006df2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006df6:	1c7b      	adds	r3, r7, #1
 8006df8:	444b      	add	r3, r9
 8006dfa:	106d      	asrs	r5, r5, #1
 8006dfc:	429d      	cmp	r5, r3
 8006dfe:	bf38      	it	cc
 8006e00:	461d      	movcc	r5, r3
 8006e02:	0553      	lsls	r3, r2, #21
 8006e04:	d527      	bpl.n	8006e56 <__ssputs_r+0x8e>
 8006e06:	4629      	mov	r1, r5
 8006e08:	f7ff ff52 	bl	8006cb0 <_malloc_r>
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	b360      	cbz	r0, 8006e6a <__ssputs_r+0xa2>
 8006e10:	6921      	ldr	r1, [r4, #16]
 8006e12:	464a      	mov	r2, r9
 8006e14:	f000 fae8 	bl	80073e8 <memcpy>
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e22:	81a3      	strh	r3, [r4, #12]
 8006e24:	6126      	str	r6, [r4, #16]
 8006e26:	6165      	str	r5, [r4, #20]
 8006e28:	444e      	add	r6, r9
 8006e2a:	eba5 0509 	sub.w	r5, r5, r9
 8006e2e:	6026      	str	r6, [r4, #0]
 8006e30:	60a5      	str	r5, [r4, #8]
 8006e32:	463e      	mov	r6, r7
 8006e34:	42be      	cmp	r6, r7
 8006e36:	d900      	bls.n	8006e3a <__ssputs_r+0x72>
 8006e38:	463e      	mov	r6, r7
 8006e3a:	6820      	ldr	r0, [r4, #0]
 8006e3c:	4632      	mov	r2, r6
 8006e3e:	4641      	mov	r1, r8
 8006e40:	f000 faa8 	bl	8007394 <memmove>
 8006e44:	68a3      	ldr	r3, [r4, #8]
 8006e46:	1b9b      	subs	r3, r3, r6
 8006e48:	60a3      	str	r3, [r4, #8]
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	4433      	add	r3, r6
 8006e4e:	6023      	str	r3, [r4, #0]
 8006e50:	2000      	movs	r0, #0
 8006e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e56:	462a      	mov	r2, r5
 8006e58:	f000 fad4 	bl	8007404 <_realloc_r>
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d1e0      	bne.n	8006e24 <__ssputs_r+0x5c>
 8006e62:	6921      	ldr	r1, [r4, #16]
 8006e64:	4650      	mov	r0, sl
 8006e66:	f7ff feb7 	bl	8006bd8 <_free_r>
 8006e6a:	230c      	movs	r3, #12
 8006e6c:	f8ca 3000 	str.w	r3, [sl]
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e76:	81a3      	strh	r3, [r4, #12]
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	e7e9      	b.n	8006e52 <__ssputs_r+0x8a>
	...

08006e80 <_svfiprintf_r>:
 8006e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e84:	4698      	mov	r8, r3
 8006e86:	898b      	ldrh	r3, [r1, #12]
 8006e88:	061b      	lsls	r3, r3, #24
 8006e8a:	b09d      	sub	sp, #116	@ 0x74
 8006e8c:	4607      	mov	r7, r0
 8006e8e:	460d      	mov	r5, r1
 8006e90:	4614      	mov	r4, r2
 8006e92:	d510      	bpl.n	8006eb6 <_svfiprintf_r+0x36>
 8006e94:	690b      	ldr	r3, [r1, #16]
 8006e96:	b973      	cbnz	r3, 8006eb6 <_svfiprintf_r+0x36>
 8006e98:	2140      	movs	r1, #64	@ 0x40
 8006e9a:	f7ff ff09 	bl	8006cb0 <_malloc_r>
 8006e9e:	6028      	str	r0, [r5, #0]
 8006ea0:	6128      	str	r0, [r5, #16]
 8006ea2:	b930      	cbnz	r0, 8006eb2 <_svfiprintf_r+0x32>
 8006ea4:	230c      	movs	r3, #12
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eac:	b01d      	add	sp, #116	@ 0x74
 8006eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb2:	2340      	movs	r3, #64	@ 0x40
 8006eb4:	616b      	str	r3, [r5, #20]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eba:	2320      	movs	r3, #32
 8006ebc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ec4:	2330      	movs	r3, #48	@ 0x30
 8006ec6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007064 <_svfiprintf_r+0x1e4>
 8006eca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ece:	f04f 0901 	mov.w	r9, #1
 8006ed2:	4623      	mov	r3, r4
 8006ed4:	469a      	mov	sl, r3
 8006ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eda:	b10a      	cbz	r2, 8006ee0 <_svfiprintf_r+0x60>
 8006edc:	2a25      	cmp	r2, #37	@ 0x25
 8006ede:	d1f9      	bne.n	8006ed4 <_svfiprintf_r+0x54>
 8006ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ee4:	d00b      	beq.n	8006efe <_svfiprintf_r+0x7e>
 8006ee6:	465b      	mov	r3, fp
 8006ee8:	4622      	mov	r2, r4
 8006eea:	4629      	mov	r1, r5
 8006eec:	4638      	mov	r0, r7
 8006eee:	f7ff ff6b 	bl	8006dc8 <__ssputs_r>
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	f000 80a7 	beq.w	8007046 <_svfiprintf_r+0x1c6>
 8006ef8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006efa:	445a      	add	r2, fp
 8006efc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006efe:	f89a 3000 	ldrb.w	r3, [sl]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 809f 	beq.w	8007046 <_svfiprintf_r+0x1c6>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f12:	f10a 0a01 	add.w	sl, sl, #1
 8006f16:	9304      	str	r3, [sp, #16]
 8006f18:	9307      	str	r3, [sp, #28]
 8006f1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f20:	4654      	mov	r4, sl
 8006f22:	2205      	movs	r2, #5
 8006f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f28:	484e      	ldr	r0, [pc, #312]	@ (8007064 <_svfiprintf_r+0x1e4>)
 8006f2a:	f7f9 f961 	bl	80001f0 <memchr>
 8006f2e:	9a04      	ldr	r2, [sp, #16]
 8006f30:	b9d8      	cbnz	r0, 8006f6a <_svfiprintf_r+0xea>
 8006f32:	06d0      	lsls	r0, r2, #27
 8006f34:	bf44      	itt	mi
 8006f36:	2320      	movmi	r3, #32
 8006f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f3c:	0711      	lsls	r1, r2, #28
 8006f3e:	bf44      	itt	mi
 8006f40:	232b      	movmi	r3, #43	@ 0x2b
 8006f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f46:	f89a 3000 	ldrb.w	r3, [sl]
 8006f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f4c:	d015      	beq.n	8006f7a <_svfiprintf_r+0xfa>
 8006f4e:	9a07      	ldr	r2, [sp, #28]
 8006f50:	4654      	mov	r4, sl
 8006f52:	2000      	movs	r0, #0
 8006f54:	f04f 0c0a 	mov.w	ip, #10
 8006f58:	4621      	mov	r1, r4
 8006f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f5e:	3b30      	subs	r3, #48	@ 0x30
 8006f60:	2b09      	cmp	r3, #9
 8006f62:	d94b      	bls.n	8006ffc <_svfiprintf_r+0x17c>
 8006f64:	b1b0      	cbz	r0, 8006f94 <_svfiprintf_r+0x114>
 8006f66:	9207      	str	r2, [sp, #28]
 8006f68:	e014      	b.n	8006f94 <_svfiprintf_r+0x114>
 8006f6a:	eba0 0308 	sub.w	r3, r0, r8
 8006f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f72:	4313      	orrs	r3, r2
 8006f74:	9304      	str	r3, [sp, #16]
 8006f76:	46a2      	mov	sl, r4
 8006f78:	e7d2      	b.n	8006f20 <_svfiprintf_r+0xa0>
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	1d19      	adds	r1, r3, #4
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	9103      	str	r1, [sp, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bfbb      	ittet	lt
 8006f86:	425b      	neglt	r3, r3
 8006f88:	f042 0202 	orrlt.w	r2, r2, #2
 8006f8c:	9307      	strge	r3, [sp, #28]
 8006f8e:	9307      	strlt	r3, [sp, #28]
 8006f90:	bfb8      	it	lt
 8006f92:	9204      	strlt	r2, [sp, #16]
 8006f94:	7823      	ldrb	r3, [r4, #0]
 8006f96:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f98:	d10a      	bne.n	8006fb0 <_svfiprintf_r+0x130>
 8006f9a:	7863      	ldrb	r3, [r4, #1]
 8006f9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f9e:	d132      	bne.n	8007006 <_svfiprintf_r+0x186>
 8006fa0:	9b03      	ldr	r3, [sp, #12]
 8006fa2:	1d1a      	adds	r2, r3, #4
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	9203      	str	r2, [sp, #12]
 8006fa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fac:	3402      	adds	r4, #2
 8006fae:	9305      	str	r3, [sp, #20]
 8006fb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007074 <_svfiprintf_r+0x1f4>
 8006fb4:	7821      	ldrb	r1, [r4, #0]
 8006fb6:	2203      	movs	r2, #3
 8006fb8:	4650      	mov	r0, sl
 8006fba:	f7f9 f919 	bl	80001f0 <memchr>
 8006fbe:	b138      	cbz	r0, 8006fd0 <_svfiprintf_r+0x150>
 8006fc0:	9b04      	ldr	r3, [sp, #16]
 8006fc2:	eba0 000a 	sub.w	r0, r0, sl
 8006fc6:	2240      	movs	r2, #64	@ 0x40
 8006fc8:	4082      	lsls	r2, r0
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	3401      	adds	r4, #1
 8006fce:	9304      	str	r3, [sp, #16]
 8006fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd4:	4824      	ldr	r0, [pc, #144]	@ (8007068 <_svfiprintf_r+0x1e8>)
 8006fd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fda:	2206      	movs	r2, #6
 8006fdc:	f7f9 f908 	bl	80001f0 <memchr>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d036      	beq.n	8007052 <_svfiprintf_r+0x1d2>
 8006fe4:	4b21      	ldr	r3, [pc, #132]	@ (800706c <_svfiprintf_r+0x1ec>)
 8006fe6:	bb1b      	cbnz	r3, 8007030 <_svfiprintf_r+0x1b0>
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	3307      	adds	r3, #7
 8006fec:	f023 0307 	bic.w	r3, r3, #7
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	9303      	str	r3, [sp, #12]
 8006ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ff6:	4433      	add	r3, r6
 8006ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ffa:	e76a      	b.n	8006ed2 <_svfiprintf_r+0x52>
 8006ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007000:	460c      	mov	r4, r1
 8007002:	2001      	movs	r0, #1
 8007004:	e7a8      	b.n	8006f58 <_svfiprintf_r+0xd8>
 8007006:	2300      	movs	r3, #0
 8007008:	3401      	adds	r4, #1
 800700a:	9305      	str	r3, [sp, #20]
 800700c:	4619      	mov	r1, r3
 800700e:	f04f 0c0a 	mov.w	ip, #10
 8007012:	4620      	mov	r0, r4
 8007014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007018:	3a30      	subs	r2, #48	@ 0x30
 800701a:	2a09      	cmp	r2, #9
 800701c:	d903      	bls.n	8007026 <_svfiprintf_r+0x1a6>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0c6      	beq.n	8006fb0 <_svfiprintf_r+0x130>
 8007022:	9105      	str	r1, [sp, #20]
 8007024:	e7c4      	b.n	8006fb0 <_svfiprintf_r+0x130>
 8007026:	fb0c 2101 	mla	r1, ip, r1, r2
 800702a:	4604      	mov	r4, r0
 800702c:	2301      	movs	r3, #1
 800702e:	e7f0      	b.n	8007012 <_svfiprintf_r+0x192>
 8007030:	ab03      	add	r3, sp, #12
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	462a      	mov	r2, r5
 8007036:	4b0e      	ldr	r3, [pc, #56]	@ (8007070 <_svfiprintf_r+0x1f0>)
 8007038:	a904      	add	r1, sp, #16
 800703a:	4638      	mov	r0, r7
 800703c:	f3af 8000 	nop.w
 8007040:	1c42      	adds	r2, r0, #1
 8007042:	4606      	mov	r6, r0
 8007044:	d1d6      	bne.n	8006ff4 <_svfiprintf_r+0x174>
 8007046:	89ab      	ldrh	r3, [r5, #12]
 8007048:	065b      	lsls	r3, r3, #25
 800704a:	f53f af2d 	bmi.w	8006ea8 <_svfiprintf_r+0x28>
 800704e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007050:	e72c      	b.n	8006eac <_svfiprintf_r+0x2c>
 8007052:	ab03      	add	r3, sp, #12
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	462a      	mov	r2, r5
 8007058:	4b05      	ldr	r3, [pc, #20]	@ (8007070 <_svfiprintf_r+0x1f0>)
 800705a:	a904      	add	r1, sp, #16
 800705c:	4638      	mov	r0, r7
 800705e:	f000 f879 	bl	8007154 <_printf_i>
 8007062:	e7ed      	b.n	8007040 <_svfiprintf_r+0x1c0>
 8007064:	08008684 	.word	0x08008684
 8007068:	0800868e 	.word	0x0800868e
 800706c:	00000000 	.word	0x00000000
 8007070:	08006dc9 	.word	0x08006dc9
 8007074:	0800868a 	.word	0x0800868a

08007078 <_printf_common>:
 8007078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800707c:	4616      	mov	r6, r2
 800707e:	4698      	mov	r8, r3
 8007080:	688a      	ldr	r2, [r1, #8]
 8007082:	690b      	ldr	r3, [r1, #16]
 8007084:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007088:	4293      	cmp	r3, r2
 800708a:	bfb8      	it	lt
 800708c:	4613      	movlt	r3, r2
 800708e:	6033      	str	r3, [r6, #0]
 8007090:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007094:	4607      	mov	r7, r0
 8007096:	460c      	mov	r4, r1
 8007098:	b10a      	cbz	r2, 800709e <_printf_common+0x26>
 800709a:	3301      	adds	r3, #1
 800709c:	6033      	str	r3, [r6, #0]
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	0699      	lsls	r1, r3, #26
 80070a2:	bf42      	ittt	mi
 80070a4:	6833      	ldrmi	r3, [r6, #0]
 80070a6:	3302      	addmi	r3, #2
 80070a8:	6033      	strmi	r3, [r6, #0]
 80070aa:	6825      	ldr	r5, [r4, #0]
 80070ac:	f015 0506 	ands.w	r5, r5, #6
 80070b0:	d106      	bne.n	80070c0 <_printf_common+0x48>
 80070b2:	f104 0a19 	add.w	sl, r4, #25
 80070b6:	68e3      	ldr	r3, [r4, #12]
 80070b8:	6832      	ldr	r2, [r6, #0]
 80070ba:	1a9b      	subs	r3, r3, r2
 80070bc:	42ab      	cmp	r3, r5
 80070be:	dc26      	bgt.n	800710e <_printf_common+0x96>
 80070c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070c4:	6822      	ldr	r2, [r4, #0]
 80070c6:	3b00      	subs	r3, #0
 80070c8:	bf18      	it	ne
 80070ca:	2301      	movne	r3, #1
 80070cc:	0692      	lsls	r2, r2, #26
 80070ce:	d42b      	bmi.n	8007128 <_printf_common+0xb0>
 80070d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070d4:	4641      	mov	r1, r8
 80070d6:	4638      	mov	r0, r7
 80070d8:	47c8      	blx	r9
 80070da:	3001      	adds	r0, #1
 80070dc:	d01e      	beq.n	800711c <_printf_common+0xa4>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	6922      	ldr	r2, [r4, #16]
 80070e2:	f003 0306 	and.w	r3, r3, #6
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	bf02      	ittt	eq
 80070ea:	68e5      	ldreq	r5, [r4, #12]
 80070ec:	6833      	ldreq	r3, [r6, #0]
 80070ee:	1aed      	subeq	r5, r5, r3
 80070f0:	68a3      	ldr	r3, [r4, #8]
 80070f2:	bf0c      	ite	eq
 80070f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070f8:	2500      	movne	r5, #0
 80070fa:	4293      	cmp	r3, r2
 80070fc:	bfc4      	itt	gt
 80070fe:	1a9b      	subgt	r3, r3, r2
 8007100:	18ed      	addgt	r5, r5, r3
 8007102:	2600      	movs	r6, #0
 8007104:	341a      	adds	r4, #26
 8007106:	42b5      	cmp	r5, r6
 8007108:	d11a      	bne.n	8007140 <_printf_common+0xc8>
 800710a:	2000      	movs	r0, #0
 800710c:	e008      	b.n	8007120 <_printf_common+0xa8>
 800710e:	2301      	movs	r3, #1
 8007110:	4652      	mov	r2, sl
 8007112:	4641      	mov	r1, r8
 8007114:	4638      	mov	r0, r7
 8007116:	47c8      	blx	r9
 8007118:	3001      	adds	r0, #1
 800711a:	d103      	bne.n	8007124 <_printf_common+0xac>
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007124:	3501      	adds	r5, #1
 8007126:	e7c6      	b.n	80070b6 <_printf_common+0x3e>
 8007128:	18e1      	adds	r1, r4, r3
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	2030      	movs	r0, #48	@ 0x30
 800712e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007132:	4422      	add	r2, r4
 8007134:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007138:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800713c:	3302      	adds	r3, #2
 800713e:	e7c7      	b.n	80070d0 <_printf_common+0x58>
 8007140:	2301      	movs	r3, #1
 8007142:	4622      	mov	r2, r4
 8007144:	4641      	mov	r1, r8
 8007146:	4638      	mov	r0, r7
 8007148:	47c8      	blx	r9
 800714a:	3001      	adds	r0, #1
 800714c:	d0e6      	beq.n	800711c <_printf_common+0xa4>
 800714e:	3601      	adds	r6, #1
 8007150:	e7d9      	b.n	8007106 <_printf_common+0x8e>
	...

08007154 <_printf_i>:
 8007154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007158:	7e0f      	ldrb	r7, [r1, #24]
 800715a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800715c:	2f78      	cmp	r7, #120	@ 0x78
 800715e:	4691      	mov	r9, r2
 8007160:	4680      	mov	r8, r0
 8007162:	460c      	mov	r4, r1
 8007164:	469a      	mov	sl, r3
 8007166:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800716a:	d807      	bhi.n	800717c <_printf_i+0x28>
 800716c:	2f62      	cmp	r7, #98	@ 0x62
 800716e:	d80a      	bhi.n	8007186 <_printf_i+0x32>
 8007170:	2f00      	cmp	r7, #0
 8007172:	f000 80d2 	beq.w	800731a <_printf_i+0x1c6>
 8007176:	2f58      	cmp	r7, #88	@ 0x58
 8007178:	f000 80b9 	beq.w	80072ee <_printf_i+0x19a>
 800717c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007180:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007184:	e03a      	b.n	80071fc <_printf_i+0xa8>
 8007186:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800718a:	2b15      	cmp	r3, #21
 800718c:	d8f6      	bhi.n	800717c <_printf_i+0x28>
 800718e:	a101      	add	r1, pc, #4	@ (adr r1, 8007194 <_printf_i+0x40>)
 8007190:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007194:	080071ed 	.word	0x080071ed
 8007198:	08007201 	.word	0x08007201
 800719c:	0800717d 	.word	0x0800717d
 80071a0:	0800717d 	.word	0x0800717d
 80071a4:	0800717d 	.word	0x0800717d
 80071a8:	0800717d 	.word	0x0800717d
 80071ac:	08007201 	.word	0x08007201
 80071b0:	0800717d 	.word	0x0800717d
 80071b4:	0800717d 	.word	0x0800717d
 80071b8:	0800717d 	.word	0x0800717d
 80071bc:	0800717d 	.word	0x0800717d
 80071c0:	08007301 	.word	0x08007301
 80071c4:	0800722b 	.word	0x0800722b
 80071c8:	080072bb 	.word	0x080072bb
 80071cc:	0800717d 	.word	0x0800717d
 80071d0:	0800717d 	.word	0x0800717d
 80071d4:	08007323 	.word	0x08007323
 80071d8:	0800717d 	.word	0x0800717d
 80071dc:	0800722b 	.word	0x0800722b
 80071e0:	0800717d 	.word	0x0800717d
 80071e4:	0800717d 	.word	0x0800717d
 80071e8:	080072c3 	.word	0x080072c3
 80071ec:	6833      	ldr	r3, [r6, #0]
 80071ee:	1d1a      	adds	r2, r3, #4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6032      	str	r2, [r6, #0]
 80071f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071fc:	2301      	movs	r3, #1
 80071fe:	e09d      	b.n	800733c <_printf_i+0x1e8>
 8007200:	6833      	ldr	r3, [r6, #0]
 8007202:	6820      	ldr	r0, [r4, #0]
 8007204:	1d19      	adds	r1, r3, #4
 8007206:	6031      	str	r1, [r6, #0]
 8007208:	0606      	lsls	r6, r0, #24
 800720a:	d501      	bpl.n	8007210 <_printf_i+0xbc>
 800720c:	681d      	ldr	r5, [r3, #0]
 800720e:	e003      	b.n	8007218 <_printf_i+0xc4>
 8007210:	0645      	lsls	r5, r0, #25
 8007212:	d5fb      	bpl.n	800720c <_printf_i+0xb8>
 8007214:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007218:	2d00      	cmp	r5, #0
 800721a:	da03      	bge.n	8007224 <_printf_i+0xd0>
 800721c:	232d      	movs	r3, #45	@ 0x2d
 800721e:	426d      	negs	r5, r5
 8007220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007224:	4859      	ldr	r0, [pc, #356]	@ (800738c <_printf_i+0x238>)
 8007226:	230a      	movs	r3, #10
 8007228:	e011      	b.n	800724e <_printf_i+0xfa>
 800722a:	6821      	ldr	r1, [r4, #0]
 800722c:	6833      	ldr	r3, [r6, #0]
 800722e:	0608      	lsls	r0, r1, #24
 8007230:	f853 5b04 	ldr.w	r5, [r3], #4
 8007234:	d402      	bmi.n	800723c <_printf_i+0xe8>
 8007236:	0649      	lsls	r1, r1, #25
 8007238:	bf48      	it	mi
 800723a:	b2ad      	uxthmi	r5, r5
 800723c:	2f6f      	cmp	r7, #111	@ 0x6f
 800723e:	4853      	ldr	r0, [pc, #332]	@ (800738c <_printf_i+0x238>)
 8007240:	6033      	str	r3, [r6, #0]
 8007242:	bf14      	ite	ne
 8007244:	230a      	movne	r3, #10
 8007246:	2308      	moveq	r3, #8
 8007248:	2100      	movs	r1, #0
 800724a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800724e:	6866      	ldr	r6, [r4, #4]
 8007250:	60a6      	str	r6, [r4, #8]
 8007252:	2e00      	cmp	r6, #0
 8007254:	bfa2      	ittt	ge
 8007256:	6821      	ldrge	r1, [r4, #0]
 8007258:	f021 0104 	bicge.w	r1, r1, #4
 800725c:	6021      	strge	r1, [r4, #0]
 800725e:	b90d      	cbnz	r5, 8007264 <_printf_i+0x110>
 8007260:	2e00      	cmp	r6, #0
 8007262:	d04b      	beq.n	80072fc <_printf_i+0x1a8>
 8007264:	4616      	mov	r6, r2
 8007266:	fbb5 f1f3 	udiv	r1, r5, r3
 800726a:	fb03 5711 	mls	r7, r3, r1, r5
 800726e:	5dc7      	ldrb	r7, [r0, r7]
 8007270:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007274:	462f      	mov	r7, r5
 8007276:	42bb      	cmp	r3, r7
 8007278:	460d      	mov	r5, r1
 800727a:	d9f4      	bls.n	8007266 <_printf_i+0x112>
 800727c:	2b08      	cmp	r3, #8
 800727e:	d10b      	bne.n	8007298 <_printf_i+0x144>
 8007280:	6823      	ldr	r3, [r4, #0]
 8007282:	07df      	lsls	r7, r3, #31
 8007284:	d508      	bpl.n	8007298 <_printf_i+0x144>
 8007286:	6923      	ldr	r3, [r4, #16]
 8007288:	6861      	ldr	r1, [r4, #4]
 800728a:	4299      	cmp	r1, r3
 800728c:	bfde      	ittt	le
 800728e:	2330      	movle	r3, #48	@ 0x30
 8007290:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007294:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007298:	1b92      	subs	r2, r2, r6
 800729a:	6122      	str	r2, [r4, #16]
 800729c:	f8cd a000 	str.w	sl, [sp]
 80072a0:	464b      	mov	r3, r9
 80072a2:	aa03      	add	r2, sp, #12
 80072a4:	4621      	mov	r1, r4
 80072a6:	4640      	mov	r0, r8
 80072a8:	f7ff fee6 	bl	8007078 <_printf_common>
 80072ac:	3001      	adds	r0, #1
 80072ae:	d14a      	bne.n	8007346 <_printf_i+0x1f2>
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	b004      	add	sp, #16
 80072b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	f043 0320 	orr.w	r3, r3, #32
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	4833      	ldr	r0, [pc, #204]	@ (8007390 <_printf_i+0x23c>)
 80072c4:	2778      	movs	r7, #120	@ 0x78
 80072c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	6831      	ldr	r1, [r6, #0]
 80072ce:	061f      	lsls	r7, r3, #24
 80072d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80072d4:	d402      	bmi.n	80072dc <_printf_i+0x188>
 80072d6:	065f      	lsls	r7, r3, #25
 80072d8:	bf48      	it	mi
 80072da:	b2ad      	uxthmi	r5, r5
 80072dc:	6031      	str	r1, [r6, #0]
 80072de:	07d9      	lsls	r1, r3, #31
 80072e0:	bf44      	itt	mi
 80072e2:	f043 0320 	orrmi.w	r3, r3, #32
 80072e6:	6023      	strmi	r3, [r4, #0]
 80072e8:	b11d      	cbz	r5, 80072f2 <_printf_i+0x19e>
 80072ea:	2310      	movs	r3, #16
 80072ec:	e7ac      	b.n	8007248 <_printf_i+0xf4>
 80072ee:	4827      	ldr	r0, [pc, #156]	@ (800738c <_printf_i+0x238>)
 80072f0:	e7e9      	b.n	80072c6 <_printf_i+0x172>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	f023 0320 	bic.w	r3, r3, #32
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	e7f6      	b.n	80072ea <_printf_i+0x196>
 80072fc:	4616      	mov	r6, r2
 80072fe:	e7bd      	b.n	800727c <_printf_i+0x128>
 8007300:	6833      	ldr	r3, [r6, #0]
 8007302:	6825      	ldr	r5, [r4, #0]
 8007304:	6961      	ldr	r1, [r4, #20]
 8007306:	1d18      	adds	r0, r3, #4
 8007308:	6030      	str	r0, [r6, #0]
 800730a:	062e      	lsls	r6, r5, #24
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	d501      	bpl.n	8007314 <_printf_i+0x1c0>
 8007310:	6019      	str	r1, [r3, #0]
 8007312:	e002      	b.n	800731a <_printf_i+0x1c6>
 8007314:	0668      	lsls	r0, r5, #25
 8007316:	d5fb      	bpl.n	8007310 <_printf_i+0x1bc>
 8007318:	8019      	strh	r1, [r3, #0]
 800731a:	2300      	movs	r3, #0
 800731c:	6123      	str	r3, [r4, #16]
 800731e:	4616      	mov	r6, r2
 8007320:	e7bc      	b.n	800729c <_printf_i+0x148>
 8007322:	6833      	ldr	r3, [r6, #0]
 8007324:	1d1a      	adds	r2, r3, #4
 8007326:	6032      	str	r2, [r6, #0]
 8007328:	681e      	ldr	r6, [r3, #0]
 800732a:	6862      	ldr	r2, [r4, #4]
 800732c:	2100      	movs	r1, #0
 800732e:	4630      	mov	r0, r6
 8007330:	f7f8 ff5e 	bl	80001f0 <memchr>
 8007334:	b108      	cbz	r0, 800733a <_printf_i+0x1e6>
 8007336:	1b80      	subs	r0, r0, r6
 8007338:	6060      	str	r0, [r4, #4]
 800733a:	6863      	ldr	r3, [r4, #4]
 800733c:	6123      	str	r3, [r4, #16]
 800733e:	2300      	movs	r3, #0
 8007340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007344:	e7aa      	b.n	800729c <_printf_i+0x148>
 8007346:	6923      	ldr	r3, [r4, #16]
 8007348:	4632      	mov	r2, r6
 800734a:	4649      	mov	r1, r9
 800734c:	4640      	mov	r0, r8
 800734e:	47d0      	blx	sl
 8007350:	3001      	adds	r0, #1
 8007352:	d0ad      	beq.n	80072b0 <_printf_i+0x15c>
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	079b      	lsls	r3, r3, #30
 8007358:	d413      	bmi.n	8007382 <_printf_i+0x22e>
 800735a:	68e0      	ldr	r0, [r4, #12]
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	4298      	cmp	r0, r3
 8007360:	bfb8      	it	lt
 8007362:	4618      	movlt	r0, r3
 8007364:	e7a6      	b.n	80072b4 <_printf_i+0x160>
 8007366:	2301      	movs	r3, #1
 8007368:	4632      	mov	r2, r6
 800736a:	4649      	mov	r1, r9
 800736c:	4640      	mov	r0, r8
 800736e:	47d0      	blx	sl
 8007370:	3001      	adds	r0, #1
 8007372:	d09d      	beq.n	80072b0 <_printf_i+0x15c>
 8007374:	3501      	adds	r5, #1
 8007376:	68e3      	ldr	r3, [r4, #12]
 8007378:	9903      	ldr	r1, [sp, #12]
 800737a:	1a5b      	subs	r3, r3, r1
 800737c:	42ab      	cmp	r3, r5
 800737e:	dcf2      	bgt.n	8007366 <_printf_i+0x212>
 8007380:	e7eb      	b.n	800735a <_printf_i+0x206>
 8007382:	2500      	movs	r5, #0
 8007384:	f104 0619 	add.w	r6, r4, #25
 8007388:	e7f5      	b.n	8007376 <_printf_i+0x222>
 800738a:	bf00      	nop
 800738c:	08008695 	.word	0x08008695
 8007390:	080086a6 	.word	0x080086a6

08007394 <memmove>:
 8007394:	4288      	cmp	r0, r1
 8007396:	b510      	push	{r4, lr}
 8007398:	eb01 0402 	add.w	r4, r1, r2
 800739c:	d902      	bls.n	80073a4 <memmove+0x10>
 800739e:	4284      	cmp	r4, r0
 80073a0:	4623      	mov	r3, r4
 80073a2:	d807      	bhi.n	80073b4 <memmove+0x20>
 80073a4:	1e43      	subs	r3, r0, #1
 80073a6:	42a1      	cmp	r1, r4
 80073a8:	d008      	beq.n	80073bc <memmove+0x28>
 80073aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073b2:	e7f8      	b.n	80073a6 <memmove+0x12>
 80073b4:	4402      	add	r2, r0
 80073b6:	4601      	mov	r1, r0
 80073b8:	428a      	cmp	r2, r1
 80073ba:	d100      	bne.n	80073be <memmove+0x2a>
 80073bc:	bd10      	pop	{r4, pc}
 80073be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073c6:	e7f7      	b.n	80073b8 <memmove+0x24>

080073c8 <_sbrk_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4d06      	ldr	r5, [pc, #24]	@ (80073e4 <_sbrk_r+0x1c>)
 80073cc:	2300      	movs	r3, #0
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	602b      	str	r3, [r5, #0]
 80073d4:	f7fb fefe 	bl	80031d4 <_sbrk>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d102      	bne.n	80073e2 <_sbrk_r+0x1a>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	b103      	cbz	r3, 80073e2 <_sbrk_r+0x1a>
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	20025e08 	.word	0x20025e08

080073e8 <memcpy>:
 80073e8:	440a      	add	r2, r1
 80073ea:	4291      	cmp	r1, r2
 80073ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80073f0:	d100      	bne.n	80073f4 <memcpy+0xc>
 80073f2:	4770      	bx	lr
 80073f4:	b510      	push	{r4, lr}
 80073f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073fe:	4291      	cmp	r1, r2
 8007400:	d1f9      	bne.n	80073f6 <memcpy+0xe>
 8007402:	bd10      	pop	{r4, pc}

08007404 <_realloc_r>:
 8007404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007408:	4680      	mov	r8, r0
 800740a:	4615      	mov	r5, r2
 800740c:	460c      	mov	r4, r1
 800740e:	b921      	cbnz	r1, 800741a <_realloc_r+0x16>
 8007410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007414:	4611      	mov	r1, r2
 8007416:	f7ff bc4b 	b.w	8006cb0 <_malloc_r>
 800741a:	b92a      	cbnz	r2, 8007428 <_realloc_r+0x24>
 800741c:	f7ff fbdc 	bl	8006bd8 <_free_r>
 8007420:	2400      	movs	r4, #0
 8007422:	4620      	mov	r0, r4
 8007424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007428:	f000 f81a 	bl	8007460 <_malloc_usable_size_r>
 800742c:	4285      	cmp	r5, r0
 800742e:	4606      	mov	r6, r0
 8007430:	d802      	bhi.n	8007438 <_realloc_r+0x34>
 8007432:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007436:	d8f4      	bhi.n	8007422 <_realloc_r+0x1e>
 8007438:	4629      	mov	r1, r5
 800743a:	4640      	mov	r0, r8
 800743c:	f7ff fc38 	bl	8006cb0 <_malloc_r>
 8007440:	4607      	mov	r7, r0
 8007442:	2800      	cmp	r0, #0
 8007444:	d0ec      	beq.n	8007420 <_realloc_r+0x1c>
 8007446:	42b5      	cmp	r5, r6
 8007448:	462a      	mov	r2, r5
 800744a:	4621      	mov	r1, r4
 800744c:	bf28      	it	cs
 800744e:	4632      	movcs	r2, r6
 8007450:	f7ff ffca 	bl	80073e8 <memcpy>
 8007454:	4621      	mov	r1, r4
 8007456:	4640      	mov	r0, r8
 8007458:	f7ff fbbe 	bl	8006bd8 <_free_r>
 800745c:	463c      	mov	r4, r7
 800745e:	e7e0      	b.n	8007422 <_realloc_r+0x1e>

08007460 <_malloc_usable_size_r>:
 8007460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007464:	1f18      	subs	r0, r3, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfbc      	itt	lt
 800746a:	580b      	ldrlt	r3, [r1, r0]
 800746c:	18c0      	addlt	r0, r0, r3
 800746e:	4770      	bx	lr

08007470 <_init>:
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007472:	bf00      	nop
 8007474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007476:	bc08      	pop	{r3}
 8007478:	469e      	mov	lr, r3
 800747a:	4770      	bx	lr

0800747c <_fini>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	bf00      	nop
 8007480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007482:	bc08      	pop	{r3}
 8007484:	469e      	mov	lr, r3
 8007486:	4770      	bx	lr
