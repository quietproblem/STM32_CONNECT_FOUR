
ECEN2370_StarterCode_SP25.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055ac  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e8  08005758  08005758  00006758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006940  08006940  0000801c  2**0
                  CONTENTS
  4 .ARM          00000008  08006940  08006940  00007940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006948  08006948  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006948  08006948  00007948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800694c  0800694c  0000794c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006950  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          00025a98  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20025ab4  20025ab4  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f325  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a33  00000000  00000000  00017371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00019da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ace  00000000  00000000  0001abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002676b  00000000  00000000  0001b6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c0c  00000000  00000000  00041e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1955  00000000  00000000  00054a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013638a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003980  00000000  00000000  001363d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00139d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005740 	.word	0x08005740

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000020 	.word	0x20000020
 80001e8:	08005740 	.word	0x08005740

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ApplicationInit>:
#if COMPILE_TOUCH_FUNCTIONS == 1
static STMPE811_TouchData StaticTouchData;
#endif // COMPILE_TOUCH_FUNCTIONS

void ApplicationInit(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80004e0:	f002 f856 	bl	8002590 <initialise_monitor_handles>
	buttonInitInterrupt();
 80004e4:	f000 fb3c 	bl	8000b60 <buttonInitInterrupt>
	LTCD__Init();
 80004e8:	f000 fcc6 	bl	8000e78 <LTCD__Init>
	LTCD_Layer_Init(0);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fc83 	bl	8000df8 <LTCD_Layer_Init>
	LCD_Clear(0,LCD_COLOR_WHITE);
 80004f2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 fde4 	bl	80010c4 <LCD_Clear>

#if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80004fc:	f000 fee6 	bl	80012cc <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 8000500:	4b02      	ldr	r3, [pc, #8]	@ (800050c <ApplicationInit+0x30>)
 8000502:	2201      	movs	r2, #1
 8000504:	719a      	strb	r2, [r3, #6]

#endif // COMPILE_TOUCH_FUNCTIONS
}
 8000506:	bf00      	nop
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000114 	.word	0x20000114

08000510 <game_init>:

void game_init()
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
	for(int i=0; i<BOARD_COLUMNS;i++)
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	e016      	b.n	800054a <game_init+0x3a>
	{
		for(int j=0; j<BOARD_ROWS; j++)
 800051c:	2300      	movs	r3, #0
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	e00d      	b.n	800053e <game_init+0x2e>
		{
			game.board[i][j]=0;
 8000522:	4912      	ldr	r1, [pc, #72]	@ (800056c <game_init+0x5c>)
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4613      	mov	r3, r2
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	1a9b      	subs	r3, r3, r2
 800052c:	683a      	ldr	r2, [r7, #0]
 800052e:	4413      	add	r3, r2
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	440b      	add	r3, r1
 8000534:	2200      	movs	r2, #0
 8000536:	605a      	str	r2, [r3, #4]
		for(int j=0; j<BOARD_ROWS; j++)
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	3301      	adds	r3, #1
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	2b05      	cmp	r3, #5
 8000542:	ddee      	ble.n	8000522 <game_init+0x12>
	for(int i=0; i<BOARD_COLUMNS;i++)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	3301      	adds	r3, #1
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b06      	cmp	r3, #6
 800054e:	dde5      	ble.n	800051c <game_init+0xc>
		}
	}
	game.remaining_moves=MAX_MOVES;
 8000550:	4b06      	ldr	r3, [pc, #24]	@ (800056c <game_init+0x5c>)
 8000552:	222a      	movs	r2, #42	@ 0x2a
 8000554:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	game.player_cnt=-1;
 8000558:	4b04      	ldr	r3, [pc, #16]	@ (800056c <game_init+0x5c>)
 800055a:	f04f 32ff 	mov.w	r2, #4294967295
 800055e:	601a      	str	r2, [r3, #0]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	20000038 	.word	0x20000038

08000570 <update_game_board>:
void update_game_board()
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
	game.remaining_moves--;
 8000576:	4b33      	ldr	r3, [pc, #204]	@ (8000644 <update_game_board+0xd4>)
 8000578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800057c:	3b01      	subs	r3, #1
 800057e:	4a31      	ldr	r2, [pc, #196]	@ (8000644 <update_game_board+0xd4>)
 8000580:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
	int column_position=game.current_position;
 8000584:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <update_game_board+0xd4>)
 8000586:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800058a:	603b      	str	r3, [r7, #0]
	if(game.column_count[column_position]+1>6)
 800058c:	4a2d      	ldr	r2, [pc, #180]	@ (8000644 <update_game_board+0xd4>)
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	332a      	adds	r3, #42	@ 0x2a
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4413      	add	r3, r2
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	2b05      	cmp	r3, #5
 800059a:	dc4b      	bgt.n	8000634 <update_game_board+0xc4>
	{
		return;
	}
	game.column_count[column_position]++;
 800059c:	4a29      	ldr	r2, [pc, #164]	@ (8000644 <update_game_board+0xd4>)
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	332a      	adds	r3, #42	@ 0x2a
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	4413      	add	r3, r2
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	1c5a      	adds	r2, r3, #1
 80005aa:	4926      	ldr	r1, [pc, #152]	@ (8000644 <update_game_board+0xd4>)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	332a      	adds	r3, #42	@ 0x2a
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	440b      	add	r3, r1
 80005b4:	605a      	str	r2, [r3, #4]
	int current_row_pos=5;
 80005b6:	2305      	movs	r3, #5
 80005b8:	607b      	str	r3, [r7, #4]
	while(game.board[current_row_pos][column_position]!=0)
 80005ba:	e002      	b.n	80005c2 <update_game_board+0x52>
	{
		current_row_pos--;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3b01      	subs	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
	while(game.board[current_row_pos][column_position]!=0)
 80005c2:	4920      	ldr	r1, [pc, #128]	@ (8000644 <update_game_board+0xd4>)
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	4613      	mov	r3, r2
 80005c8:	00db      	lsls	r3, r3, #3
 80005ca:	1a9b      	subs	r3, r3, r2
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	4413      	add	r3, r2
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	440b      	add	r3, r1
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f0      	bne.n	80005bc <update_game_board+0x4c>
	}
	game.board[current_row_pos][column_position]=game.player;
 80005da:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <update_game_board+0xd4>)
 80005dc:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 80005e0:	4818      	ldr	r0, [pc, #96]	@ (8000644 <update_game_board+0xd4>)
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	4613      	mov	r3, r2
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	4413      	add	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4403      	add	r3, r0
 80005f2:	6059      	str	r1, [r3, #4]
	game.last_drop.row=current_row_pos;
 80005f4:	4a13      	ldr	r2, [pc, #76]	@ (8000644 <update_game_board+0xd4>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
	game.last_drop.column=column_position;
 80005fc:	4a11      	ldr	r2, [pc, #68]	@ (8000644 <update_game_board+0xd4>)
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
	game.current_position=0;
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <update_game_board+0xd4>)
 8000606:	2200      	movs	r2, #0
 8000608:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	if(game.player==1)
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <update_game_board+0xd4>)
 800060e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000612:	2b01      	cmp	r3, #1
 8000614:	d104      	bne.n	8000620 <update_game_board+0xb0>
	{
		game.player=2;
 8000616:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <update_game_board+0xd4>)
 8000618:	2202      	movs	r2, #2
 800061a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	{
		game.player=1;
	}


	return;
 800061e:	e00b      	b.n	8000638 <update_game_board+0xc8>
	else if(game.player==2)
 8000620:	4b08      	ldr	r3, [pc, #32]	@ (8000644 <update_game_board+0xd4>)
 8000622:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000626:	2b02      	cmp	r3, #2
 8000628:	d106      	bne.n	8000638 <update_game_board+0xc8>
		game.player=1;
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <update_game_board+0xd4>)
 800062c:	2201      	movs	r2, #1
 800062e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	return;
 8000632:	e001      	b.n	8000638 <update_game_board+0xc8>
		return;
 8000634:	bf00      	nop
 8000636:	e000      	b.n	800063a <update_game_board+0xca>
	return;
 8000638:	bf00      	nop
}
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	20000038 	.word	0x20000038

08000648 <check_for_win>:

int check_for_win()
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0

	int old_player;

	if(game.player==1)
 800064e:	4b95      	ldr	r3, [pc, #596]	@ (80008a4 <check_for_win+0x25c>)
 8000650:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000654:	2b01      	cmp	r3, #1
 8000656:	d101      	bne.n	800065c <check_for_win+0x14>
	{
		old_player=2;
 8000658:	2302      	movs	r3, #2
 800065a:	60fb      	str	r3, [r7, #12]
	}

	if(game.player==2)
 800065c:	4b91      	ldr	r3, [pc, #580]	@ (80008a4 <check_for_win+0x25c>)
 800065e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8000662:	2b02      	cmp	r3, #2
 8000664:	d101      	bne.n	800066a <check_for_win+0x22>
	{
		old_player=1;
 8000666:	2301      	movs	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
	}
	if(game.remaining_moves==0)
 800066a:	4b8e      	ldr	r3, [pc, #568]	@ (80008a4 <check_for_win+0x25c>)
 800066c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000670:	2b00      	cmp	r3, #0
 8000672:	d101      	bne.n	8000678 <check_for_win+0x30>
	{
		return TIE;
 8000674:	2302      	movs	r3, #2
 8000676:	e13b      	b.n	80008f0 <check_for_win+0x2a8>
	}
	int current_count=1;
 8000678:	2301      	movs	r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
	int current_row=game.last_drop.row;
 800067c:	4b89      	ldr	r3, [pc, #548]	@ (80008a4 <check_for_win+0x25c>)
 800067e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000682:	607b      	str	r3, [r7, #4]
	int current_col=game.last_drop.column;
 8000684:	4b87      	ldr	r3, [pc, #540]	@ (80008a4 <check_for_win+0x25c>)
 8000686:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800068a:	603b      	str	r3, [r7, #0]
	//work up until different color or boundary

	while(current_row-1>=0&&game.board[current_row-1][current_col]==old_player)
 800068c:	e005      	b.n	800069a <check_for_win+0x52>
	{
		current_count++;
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	3301      	adds	r3, #1
 8000692:	60bb      	str	r3, [r7, #8]
		current_row--;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
	while(current_row-1>=0&&game.board[current_row-1][current_col]==old_player)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	dd0d      	ble.n	80006bc <check_for_win+0x74>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	1e5a      	subs	r2, r3, #1
 80006a4:	497f      	ldr	r1, [pc, #508]	@ (80008a4 <check_for_win+0x25c>)
 80006a6:	4613      	mov	r3, r2
 80006a8:	00db      	lsls	r3, r3, #3
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	683a      	ldr	r2, [r7, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	440b      	add	r3, r1
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d0e8      	beq.n	800068e <check_for_win+0x46>
	}

	//reset back to original starting location
	current_row=game.last_drop.row;
 80006bc:	4b79      	ldr	r3, [pc, #484]	@ (80008a4 <check_for_win+0x25c>)
 80006be:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80006c2:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 80006c4:	4b77      	ldr	r3, [pc, #476]	@ (80008a4 <check_for_win+0x25c>)
 80006c6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80006ca:	603b      	str	r3, [r7, #0]
	while(current_row+1<=5&&game.board[current_row+1][current_col]==old_player)
 80006cc:	e005      	b.n	80006da <check_for_win+0x92>
	{
		current_count++;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60bb      	str	r3, [r7, #8]
		current_row++;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3301      	adds	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
	while(current_row+1<=5&&game.board[current_row+1][current_col]==old_player)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b04      	cmp	r3, #4
 80006de:	dc0d      	bgt.n	80006fc <check_for_win+0xb4>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	496f      	ldr	r1, [pc, #444]	@ (80008a4 <check_for_win+0x25c>)
 80006e6:	4613      	mov	r3, r2
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	1a9b      	subs	r3, r3, r2
 80006ec:	683a      	ldr	r2, [r7, #0]
 80006ee:	4413      	add	r3, r2
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	440b      	add	r3, r1
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d0e8      	beq.n	80006ce <check_for_win+0x86>
	}

	//WIN
	if(current_count>=4)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	2b03      	cmp	r3, #3
 8000700:	dd01      	ble.n	8000706 <check_for_win+0xbe>
	{
		return WIN;
 8000702:	2301      	movs	r3, #1
 8000704:	e0f4      	b.n	80008f0 <check_for_win+0x2a8>
	}

	current_row=game.last_drop.row;
 8000706:	4b67      	ldr	r3, [pc, #412]	@ (80008a4 <check_for_win+0x25c>)
 8000708:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800070c:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 800070e:	4b65      	ldr	r3, [pc, #404]	@ (80008a4 <check_for_win+0x25c>)
 8000710:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000714:	603b      	str	r3, [r7, #0]
	current_count=1;
 8000716:	2301      	movs	r3, #1
 8000718:	60bb      	str	r3, [r7, #8]

	while(current_col-1>=0&&game.board[current_row][current_col-1]==old_player)
 800071a:	e005      	b.n	8000728 <check_for_win+0xe0>
	{
		current_count++;
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	3301      	adds	r3, #1
 8000720:	60bb      	str	r3, [r7, #8]
		current_col--;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	3b01      	subs	r3, #1
 8000726:	603b      	str	r3, [r7, #0]
	while(current_col-1>=0&&game.board[current_row][current_col-1]==old_player)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	dd0d      	ble.n	800074a <check_for_win+0x102>
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	1e59      	subs	r1, r3, #1
 8000732:	485c      	ldr	r0, [pc, #368]	@ (80008a4 <check_for_win+0x25c>)
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	4613      	mov	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	440b      	add	r3, r1
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4403      	add	r3, r0
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	429a      	cmp	r2, r3
 8000748:	d0e8      	beq.n	800071c <check_for_win+0xd4>
	}
	current_row=game.last_drop.row;
 800074a:	4b56      	ldr	r3, [pc, #344]	@ (80008a4 <check_for_win+0x25c>)
 800074c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000750:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 8000752:	4b54      	ldr	r3, [pc, #336]	@ (80008a4 <check_for_win+0x25c>)
 8000754:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8000758:	603b      	str	r3, [r7, #0]

	while(current_col+1<=6&&game.board[current_row][current_col+1]==old_player)
 800075a:	e005      	b.n	8000768 <check_for_win+0x120>
	{
		current_count++;
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	3301      	adds	r3, #1
 8000760:	60bb      	str	r3, [r7, #8]
		current_col++;
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
	while(current_col+1<=6&&game.board[current_row][current_col+1]==old_player)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	2b05      	cmp	r3, #5
 800076c:	dc0d      	bgt.n	800078a <check_for_win+0x142>
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	1c59      	adds	r1, r3, #1
 8000772:	484c      	ldr	r0, [pc, #304]	@ (80008a4 <check_for_win+0x25c>)
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4613      	mov	r3, r2
 8000778:	00db      	lsls	r3, r3, #3
 800077a:	1a9b      	subs	r3, r3, r2
 800077c:	440b      	add	r3, r1
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4403      	add	r3, r0
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	68fa      	ldr	r2, [r7, #12]
 8000786:	429a      	cmp	r2, r3
 8000788:	d0e8      	beq.n	800075c <check_for_win+0x114>
	}

	if(current_count>=4)
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	2b03      	cmp	r3, #3
 800078e:	dd01      	ble.n	8000794 <check_for_win+0x14c>
	{
		return WIN;
 8000790:	2301      	movs	r3, #1
 8000792:	e0ad      	b.n	80008f0 <check_for_win+0x2a8>
	}

	current_row=game.last_drop.row;
 8000794:	4b43      	ldr	r3, [pc, #268]	@ (80008a4 <check_for_win+0x25c>)
 8000796:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800079a:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 800079c:	4b41      	ldr	r3, [pc, #260]	@ (80008a4 <check_for_win+0x25c>)
 800079e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80007a2:	603b      	str	r3, [r7, #0]
	current_count=1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60bb      	str	r3, [r7, #8]

	while(current_col-1>=0 && current_row-1>=0 &&game.board[current_row-1][current_col-1]==old_player)
 80007a8:	e008      	b.n	80007bc <check_for_win+0x174>
	{
		current_count++;
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	3301      	adds	r3, #1
 80007ae:	60bb      	str	r3, [r7, #8]
		current_col--;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	603b      	str	r3, [r7, #0]
		current_row--;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
	while(current_col-1>=0 && current_row-1>=0 &&game.board[current_row-1][current_col-1]==old_player)
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	dd11      	ble.n	80007e6 <check_for_win+0x19e>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	dd0e      	ble.n	80007e6 <check_for_win+0x19e>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	1e5a      	subs	r2, r3, #1
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	1e59      	subs	r1, r3, #1
 80007d0:	4834      	ldr	r0, [pc, #208]	@ (80008a4 <check_for_win+0x25c>)
 80007d2:	4613      	mov	r3, r2
 80007d4:	00db      	lsls	r3, r3, #3
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	440b      	add	r3, r1
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4403      	add	r3, r0
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d0e1      	beq.n	80007aa <check_for_win+0x162>
	}

	current_row=game.last_drop.row;
 80007e6:	4b2f      	ldr	r3, [pc, #188]	@ (80008a4 <check_for_win+0x25c>)
 80007e8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80007ec:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 80007ee:	4b2d      	ldr	r3, [pc, #180]	@ (80008a4 <check_for_win+0x25c>)
 80007f0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80007f4:	603b      	str	r3, [r7, #0]

	while(current_col+1<=6 &&current_row+1<=5 &&game.board[current_row+1][current_col+1]==old_player)
 80007f6:	e008      	b.n	800080a <check_for_win+0x1c2>
	{
		current_count++;
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
		current_col++;
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	603b      	str	r3, [r7, #0]
		current_row++;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3301      	adds	r3, #1
 8000808:	607b      	str	r3, [r7, #4]
	while(current_col+1<=6 &&current_row+1<=5 &&game.board[current_row+1][current_col+1]==old_player)
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	2b05      	cmp	r3, #5
 800080e:	dc11      	bgt.n	8000834 <check_for_win+0x1ec>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b04      	cmp	r3, #4
 8000814:	dc0e      	bgt.n	8000834 <check_for_win+0x1ec>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	1c59      	adds	r1, r3, #1
 800081e:	4821      	ldr	r0, [pc, #132]	@ (80008a4 <check_for_win+0x25c>)
 8000820:	4613      	mov	r3, r2
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	1a9b      	subs	r3, r3, r2
 8000826:	440b      	add	r3, r1
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4403      	add	r3, r0
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d0e1      	beq.n	80007f8 <check_for_win+0x1b0>
	}

	if(current_count>=4)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	2b03      	cmp	r3, #3
 8000838:	dd01      	ble.n	800083e <check_for_win+0x1f6>
	{
		return WIN;
 800083a:	2301      	movs	r3, #1
 800083c:	e058      	b.n	80008f0 <check_for_win+0x2a8>
	}


	current_row=game.last_drop.row;
 800083e:	4b19      	ldr	r3, [pc, #100]	@ (80008a4 <check_for_win+0x25c>)
 8000840:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000844:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 8000846:	4b17      	ldr	r3, [pc, #92]	@ (80008a4 <check_for_win+0x25c>)
 8000848:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800084c:	603b      	str	r3, [r7, #0]
	current_count=1;
 800084e:	2301      	movs	r3, #1
 8000850:	60bb      	str	r3, [r7, #8]

	while(current_col+1>=6 && current_row-1>=0 &&game.board[current_row-1][current_col+1]==old_player)
 8000852:	e008      	b.n	8000866 <check_for_win+0x21e>
	{
		current_count++;
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	3301      	adds	r3, #1
 8000858:	60bb      	str	r3, [r7, #8]

		current_col++;
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	603b      	str	r3, [r7, #0]
		current_row--;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	607b      	str	r3, [r7, #4]
	while(current_col+1>=6 && current_row-1>=0 &&game.board[current_row-1][current_col+1]==old_player)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	2b04      	cmp	r3, #4
 800086a:	dd11      	ble.n	8000890 <check_for_win+0x248>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	dd0e      	ble.n	8000890 <check_for_win+0x248>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	1c59      	adds	r1, r3, #1
 800087a:	480a      	ldr	r0, [pc, #40]	@ (80008a4 <check_for_win+0x25c>)
 800087c:	4613      	mov	r3, r2
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	1a9b      	subs	r3, r3, r2
 8000882:	440b      	add	r3, r1
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	4403      	add	r3, r0
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	429a      	cmp	r2, r3
 800088e:	d0e1      	beq.n	8000854 <check_for_win+0x20c>
	}

	current_row=game.last_drop.row;
 8000890:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <check_for_win+0x25c>)
 8000892:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8000896:	607b      	str	r3, [r7, #4]
	current_col=game.last_drop.column;
 8000898:	4b02      	ldr	r3, [pc, #8]	@ (80008a4 <check_for_win+0x25c>)
 800089a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800089e:	603b      	str	r3, [r7, #0]

	while(current_col-1>=0 &&current_row+1<=5 &&game.board[current_row+1][current_col-1]==old_player)
 80008a0:	e00b      	b.n	80008ba <check_for_win+0x272>
 80008a2:	bf00      	nop
 80008a4:	20000038 	.word	0x20000038
	{
		current_count++;
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]

		current_col--;
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	3b01      	subs	r3, #1
 80008b2:	603b      	str	r3, [r7, #0]
		current_row++;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3301      	adds	r3, #1
 80008b8:	607b      	str	r3, [r7, #4]
	while(current_col-1>=0 &&current_row+1<=5 &&game.board[current_row+1][current_col-1]==old_player)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	dd11      	ble.n	80008e4 <check_for_win+0x29c>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	dc0e      	bgt.n	80008e4 <check_for_win+0x29c>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	1c5a      	adds	r2, r3, #1
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	1e59      	subs	r1, r3, #1
 80008ce:	480b      	ldr	r0, [pc, #44]	@ (80008fc <check_for_win+0x2b4>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	440b      	add	r3, r1
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4403      	add	r3, r0
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d0e1      	beq.n	80008a8 <check_for_win+0x260>
	}

	if(current_count>=4)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	dd01      	ble.n	80008ee <check_for_win+0x2a6>
	{
		return WIN;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <check_for_win+0x2a8>
	//work right and down until different color or boundary

	//work right and up until different color or boundary
	//work left and down until different color or boundary

	return NOT_FINISHED;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	20000038 	.word	0x20000038

08000900 <LCD_Touch_Move_Chip>:
}

#if COMPILE_TOUCH_FUNCTIONS == 1

int LCD_Touch_Move_Chip()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
//	LCD_Clear(0,LCD_COLOR_WHITE);
	LCD_Print_Chip(game.current_position,game.player);
 8000904:	4b2b      	ldr	r3, [pc, #172]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 8000906:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800090a:	4a2a      	ldr	r2, [pc, #168]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 800090c:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8000910:	4611      	mov	r1, r2
 8000912:	4618      	mov	r0, r3
 8000914:	f000 fca8 	bl	8001268 <LCD_Print_Chip>
		if ((returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) ){
 8000918:	4827      	ldr	r0, [pc, #156]	@ (80009b8 <LCD_Touch_Move_Chip+0xb8>)
 800091a:	f000 fce2 	bl	80012e2 <returnTouchStateAndLocation>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d144      	bne.n	80009ae <LCD_Touch_Move_Chip+0xae>
			/* Touch valid */
			HAL_Delay(250);
 8000924:	20fa      	movs	r0, #250	@ 0xfa
 8000926:	f001 fee9 	bl	80026fc <HAL_Delay>
//			LCD_Clear(0,LCD_COLOR_WHITE);
			if(StaticTouchData.x<=120)
 800092a:	4b23      	ldr	r3, [pc, #140]	@ (80009b8 <LCD_Touch_Move_Chip+0xb8>)
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	2b78      	cmp	r3, #120	@ 0x78
 8000930:	d81c      	bhi.n	800096c <LCD_Touch_Move_Chip+0x6c>
			{
				if(game.current_position-1>=0)
 8000932:	4b20      	ldr	r3, [pc, #128]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 8000934:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000938:	2b00      	cmp	r3, #0
 800093a:	dd06      	ble.n	800094a <LCD_Touch_Move_Chip+0x4a>
				{
					game.current_position--;
 800093c:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 800093e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000942:	3b01      	subs	r3, #1
 8000944:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 8000946:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
				}
				LCD_Clear(0,LCD_COLOR_WHITE);
 800094a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800094e:	2000      	movs	r0, #0
 8000950:	f000 fbb8 	bl	80010c4 <LCD_Clear>
				LCD_Print_Chip(game.current_position,game.player);
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 8000956:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800095a:	4a16      	ldr	r2, [pc, #88]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 800095c:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fc80 	bl	8001268 <LCD_Print_Chip>
				return 1;
 8000968:	2301      	movs	r3, #1
 800096a:	e021      	b.n	80009b0 <LCD_Touch_Move_Chip+0xb0>
			}

			else if(StaticTouchData.x>120)
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <LCD_Touch_Move_Chip+0xb8>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	2b78      	cmp	r3, #120	@ 0x78
 8000972:	d91c      	bls.n	80009ae <LCD_Touch_Move_Chip+0xae>
			{
				if((game.current_position+1<=6))
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 8000976:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800097a:	2b05      	cmp	r3, #5
 800097c:	dc06      	bgt.n	800098c <LCD_Touch_Move_Chip+0x8c>
				{
					game.current_position++;
 800097e:	4b0d      	ldr	r3, [pc, #52]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 8000980:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000984:	3301      	adds	r3, #1
 8000986:	4a0b      	ldr	r2, [pc, #44]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 8000988:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
				}
				LCD_Clear(0,LCD_COLOR_WHITE);
 800098c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000990:	2000      	movs	r0, #0
 8000992:	f000 fb97 	bl	80010c4 <LCD_Clear>
				LCD_Print_Chip(game.current_position,game.player);
 8000996:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 8000998:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800099c:	4a05      	ldr	r2, [pc, #20]	@ (80009b4 <LCD_Touch_Move_Chip+0xb4>)
 800099e:	f8d2 20c8 	ldr.w	r2, [r2, #200]	@ 0xc8
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fc5f 	bl	8001268 <LCD_Print_Chip>
				return 1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e000      	b.n	80009b0 <LCD_Touch_Move_Chip+0xb0>
			}

		}
	return 0;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000038 	.word	0x20000038
 80009b8:	20000114 	.word	0x20000114

080009bc <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	disableIRQInterrupt(EXTI0_IRQn);
 80009c0:	2006      	movs	r0, #6
 80009c2:	f000 f90d 	bl	8000be0 <disableIRQInterrupt>
	//clearIRQPendingInterrupt(GPIO_PIN_0);
	clearIRQPendingInterrupt(EXTI0_IRQn);
 80009c6:	2006      	movs	r0, #6
 80009c8:	f000 f920 	bl	8000c0c <clearIRQPendingInterrupt>
	clearEXTIPendingInterrupt(EXTI0);
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 f933 	bl	8000c38 <clearEXTIPendingInterrupt>
	addScheduleEvent(DROP_CHIP_EVENT);
 80009d2:	2002      	movs	r0, #2
 80009d4:	f000 fc9e 	bl	8001314 <addScheduleEvent>
	enableIRQInterrupt(EXTI0_IRQn);
 80009d8:	2006      	movs	r0, #6
 80009da:	f000 f8eb 	bl	8000bb4 <enableIRQInterrupt>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <LCD_Touch_Player_Count>:


void LCD_Touch_Player_Count(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_BLUE);
 80009e8:	211f      	movs	r1, #31
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 fb6a 	bl	80010c4 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_BLACK);
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fb89 	bl	8001108 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80009f6:	4819      	ldr	r0, [pc, #100]	@ (8000a5c <LCD_Touch_Player_Count+0x78>)
 80009f8:	f000 fb96 	bl	8001128 <LCD_SetFont>

	LCD_DisplayChar(40,140,'1');
 80009fc:	2231      	movs	r2, #49	@ 0x31
 80009fe:	218c      	movs	r1, #140	@ 0x8c
 8000a00:	2028      	movs	r0, #40	@ 0x28
 8000a02:	f000 fc0f 	bl	8001224 <LCD_DisplayChar>
	LCD_DisplayChar(180,140,'2');
 8000a06:	2232      	movs	r2, #50	@ 0x32
 8000a08:	218c      	movs	r1, #140	@ 0x8c
 8000a0a:	20b4      	movs	r0, #180	@ 0xb4
 8000a0c:	f000 fc0a 	bl	8001224 <LCD_DisplayChar>

	while(game.player_cnt==-1)
 8000a10:	e018      	b.n	8000a44 <LCD_Touch_Player_Count+0x60>
	{
		if (returnTouchStateAndLocation(&StaticTouchData) == STMPE811_State_Pressed) {
 8000a12:	4813      	ldr	r0, [pc, #76]	@ (8000a60 <LCD_Touch_Player_Count+0x7c>)
 8000a14:	f000 fc65 	bl	80012e2 <returnTouchStateAndLocation>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d112      	bne.n	8000a44 <LCD_Touch_Player_Count+0x60>
			/* Touch valid */
			if(StaticTouchData.x<=120)
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <LCD_Touch_Player_Count+0x7c>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	2b78      	cmp	r3, #120	@ 0x78
 8000a24:	d807      	bhi.n	8000a36 <LCD_Touch_Player_Count+0x52>
			{
				game.player_cnt=1;
 8000a26:	4b0f      	ldr	r3, [pc, #60]	@ (8000a64 <LCD_Touch_Player_Count+0x80>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]
				game.player=1;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <LCD_Touch_Player_Count+0x80>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 8000a34:	e006      	b.n	8000a44 <LCD_Touch_Player_Count+0x60>
			}

			else
			{
				game.player_cnt=2;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <LCD_Touch_Player_Count+0x80>)
 8000a38:	2202      	movs	r2, #2
 8000a3a:	601a      	str	r2, [r3, #0]
				game.player=1;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <LCD_Touch_Player_Count+0x80>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
	while(game.player_cnt==-1)
 8000a44:	4b07      	ldr	r3, [pc, #28]	@ (8000a64 <LCD_Touch_Player_Count+0x80>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a4c:	d0e1      	beq.n	8000a12 <LCD_Touch_Player_Count+0x2e>
			}
		}
	}
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000a4e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 fb36 	bl	80010c4 <LCD_Clear>
	return;
 8000a58:	bf00      	nop
}
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	20000114 	.word	0x20000114
 8000a64:	20000038 	.word	0x20000038

08000a68 <LCD_PrintBoard>:

void LCD_PrintBoard()
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000a6e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 fb26 	bl	80010c4 <LCD_Clear>
	for(int i=80;i<320;i+=40)
 8000a78:	2350      	movs	r3, #80	@ 0x50
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	e009      	b.n	8000a92 <LCD_PrintBoard+0x2a>
	{
		LCD_Draw_Horizontal_Line(0,i,240,LCD_COLOR_BLACK);
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	b299      	uxth	r1, r3
 8000a82:	2300      	movs	r3, #0
 8000a84:	22f0      	movs	r2, #240	@ 0xf0
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 faf4 	bl	8001074 <LCD_Draw_Horizontal_Line>
	for(int i=80;i<320;i+=40)
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	3328      	adds	r3, #40	@ 0x28
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a98:	dbf1      	blt.n	8000a7e <LCD_PrintBoard+0x16>
	}

	for(int i=0;i<240;i+=35)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	e009      	b.n	8000ab4 <LCD_PrintBoard+0x4c>
	{
		LCD_Draw_Vertical_Line(i,80,250,LCD_COLOR_BLACK);
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	b298      	uxth	r0, r3
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	22fa      	movs	r2, #250	@ 0xfa
 8000aa8:	2150      	movs	r1, #80	@ 0x50
 8000aaa:	f000 fabc 	bl	8001026 <LCD_Draw_Vertical_Line>
	for(int i=0;i<240;i+=35)
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	3323      	adds	r3, #35	@ 0x23
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	2bef      	cmp	r3, #239	@ 0xef
 8000ab8:	ddf2      	ble.n	8000aa0 <LCD_PrintBoard+0x38>
	}
	for(int j=0;j<7;j++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	e045      	b.n	8000b4c <LCD_PrintBoard+0xe4>
	{
		for(int i=0;i<6;i++)
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	e03c      	b.n	8000b40 <LCD_PrintBoard+0xd8>
		{
			int x_pos=(35*j)+17;
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4613      	mov	r3, r2
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	4413      	add	r3, r2
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	3311      	adds	r3, #17
 8000ad4:	607b      	str	r3, [r7, #4]
			int y_pos=(40*i)+100; //was sixty
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	3364      	adds	r3, #100	@ 0x64
 8000ae2:	603b      	str	r3, [r7, #0]
			if(game.board[i][j]==1)
 8000ae4:	491d      	ldr	r1, [pc, #116]	@ (8000b5c <LCD_PrintBoard+0xf4>)
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	1a9b      	subs	r3, r3, r2
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4413      	add	r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	440b      	add	r3, r1
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d109      	bne.n	8000b10 <LCD_PrintBoard+0xa8>
			{
				LCD_Draw_Circle_Fill(x_pos,y_pos,10,LCD_COLOR_YELLOW);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	b298      	uxth	r0, r3
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	b299      	uxth	r1, r3
 8000b04:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000b08:	220a      	movs	r2, #10
 8000b0a:	f000 fa39 	bl	8000f80 <LCD_Draw_Circle_Fill>
 8000b0e:	e014      	b.n	8000b3a <LCD_PrintBoard+0xd2>
			}



			else if(game.board[i][j]==2)
 8000b10:	4912      	ldr	r1, [pc, #72]	@ (8000b5c <LCD_PrintBoard+0xf4>)
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	4613      	mov	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	1a9b      	subs	r3, r3, r2
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	440b      	add	r3, r1
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d108      	bne.n	8000b3a <LCD_PrintBoard+0xd2>
			{
				LCD_Draw_Circle_Fill(x_pos,y_pos,10,LCD_COLOR_RED);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	b298      	uxth	r0, r3
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b299      	uxth	r1, r3
 8000b30:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b34:	220a      	movs	r2, #10
 8000b36:	f000 fa23 	bl	8000f80 <LCD_Draw_Circle_Fill>
		for(int i=0;i<6;i++)
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b05      	cmp	r3, #5
 8000b44:	ddbf      	ble.n	8000ac6 <LCD_PrintBoard+0x5e>
	for(int j=0;j<7;j++)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2b06      	cmp	r3, #6
 8000b50:	ddb6      	ble.n	8000ac0 <LCD_PrintBoard+0x58>
			}
		}
	}
	return;
 8000b52:	bf00      	nop
}
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000038 	.word	0x20000038

08000b60 <buttonInitInterrupt>:
	uint8_t value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
	return BUTTON_PRESSED&(value);

}
void buttonInitInterrupt()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <buttonInitInterrupt+0x4c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bac <buttonInitInterrupt+0x4c>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <buttonInitInterrupt+0x4c>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef GPIO_BUTTON;
	GPIO_BUTTON.Pin=GPIO_PIN_0;
 8000b82:	2301      	movs	r3, #1
 8000b84:	607b      	str	r3, [r7, #4]
	GPIO_BUTTON.Mode=GPIO_MODE_IT_RISING;
 8000b86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b8a:	60bb      	str	r3, [r7, #8]
	GPIO_BUTTON.Speed=GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	613b      	str	r3, [r7, #16]
	GPIO_BUTTON.Pull=GPIO_MODE_INPUT;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&GPIO_BUTTON);
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <buttonInitInterrupt+0x50>)
 8000b9a:	f001 fee5 	bl	8002968 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b9e:	2006      	movs	r0, #6
 8000ba0:	f001 fec7 	bl	8002932 <HAL_NVIC_EnableIRQ>


}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <enableIRQInterrupt>:
#include "InterruptControl.h"

void enableIRQInterrupt(uint8_t IRQ_NUMBER)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	if(IRQ_NUMBER<32)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b1f      	cmp	r3, #31
 8000bc2:	d804      	bhi.n	8000bce <enableIRQInterrupt+0x1a>
	{
		*NVIC_ISER0=(1<<IRQ_NUMBER);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <enableIRQInterrupt+0x28>)
 8000bcc:	601a      	str	r2, [r3, #0]
	}
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <disableIRQInterrupt>:

void disableIRQInterrupt(uint8_t IRQ_NUMBER)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
	if(IRQ_NUMBER<32)
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b1f      	cmp	r3, #31
 8000bee:	d804      	bhi.n	8000bfa <disableIRQInterrupt+0x1a>
	{
		*NVIC_ISER0=(1<<IRQ_NUMBER);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <disableIRQInterrupt+0x28>)
 8000bf8:	601a      	str	r2, [r3, #0]
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <clearIRQPendingInterrupt>:

void clearIRQPendingInterrupt(uint8_t IRQ_NUMBER)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	if(IRQ_NUMBER<32)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b1f      	cmp	r3, #31
 8000c1a:	d804      	bhi.n	8000c26 <clearIRQPendingInterrupt+0x1a>
	{
		*NVIC_ISER0=(1<<IRQ_NUMBER);
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	409a      	lsls	r2, r3
 8000c22:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <clearIRQPendingInterrupt+0x28>)
 8000c24:	601a      	str	r2, [r3, #0]
	}
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <clearEXTIPendingInterrupt>:


void clearEXTIPendingInterrupt(uint8_t PIN_NUMBER)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	EXTI->PR|=(1<<PIN_NUMBER);
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <clearEXTIPendingInterrupt+0x2c>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <clearEXTIPendingInterrupt+0x2c>)
 8000c52:	430b      	orrs	r3, r1
 8000c54:	6153      	str	r3, [r2, #20]

}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40013c00 	.word	0x40013c00

08000c68 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	@ 0x30
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	4b5a      	ldr	r3, [pc, #360]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	4a59      	ldr	r2, [pc, #356]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000c78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7e:	4b57      	ldr	r3, [pc, #348]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	4b53      	ldr	r3, [pc, #332]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a52      	ldr	r2, [pc, #328]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b50      	ldr	r3, [pc, #320]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b4c      	ldr	r3, [pc, #304]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a4b      	ldr	r2, [pc, #300]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000cb0:	f043 0302 	orr.w	r3, r3, #2
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b49      	ldr	r3, [pc, #292]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b45      	ldr	r3, [pc, #276]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a44      	ldr	r2, [pc, #272]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b42      	ldr	r3, [pc, #264]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a3d      	ldr	r2, [pc, #244]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b3b      	ldr	r3, [pc, #236]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b37      	ldr	r3, [pc, #220]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a36      	ldr	r2, [pc, #216]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000d04:	f043 0320 	orr.w	r3, r3, #32
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b34      	ldr	r3, [pc, #208]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0320 	and.w	r3, r3, #32
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b2d      	ldr	r3, [pc, #180]	@ (8000ddc <LCD_GPIO_Init+0x174>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000d32:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000d36:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000d40:	2302      	movs	r3, #2
 8000d42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000d44:	230e      	movs	r3, #14
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4824      	ldr	r0, [pc, #144]	@ (8000de0 <LCD_GPIO_Init+0x178>)
 8000d50:	f001 fe0a 	bl	8002968 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000d54:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000d58:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4820      	ldr	r0, [pc, #128]	@ (8000de4 <LCD_GPIO_Init+0x17c>)
 8000d62:	f001 fe01 	bl	8002968 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000d66:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	4619      	mov	r1, r3
 8000d72:	481d      	ldr	r0, [pc, #116]	@ (8000de8 <LCD_GPIO_Init+0x180>)
 8000d74:	f001 fdf8 	bl	8002968 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000d78:	2348      	movs	r3, #72	@ 0x48
 8000d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	481a      	ldr	r0, [pc, #104]	@ (8000dec <LCD_GPIO_Init+0x184>)
 8000d84:	f001 fdf0 	bl	8002968 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000d88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	4619      	mov	r1, r3
 8000d94:	4816      	ldr	r0, [pc, #88]	@ (8000df0 <LCD_GPIO_Init+0x188>)
 8000d96:	f001 fde7 	bl	8002968 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000d9a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000d9e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4813      	ldr	r0, [pc, #76]	@ (8000df4 <LCD_GPIO_Init+0x18c>)
 8000da8:	f001 fdde 	bl	8002968 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000dac:	2303      	movs	r3, #3
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000db0:	2309      	movs	r3, #9
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	480a      	ldr	r0, [pc, #40]	@ (8000de4 <LCD_GPIO_Init+0x17c>)
 8000dbc:	f001 fdd4 	bl	8002968 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000dc0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <LCD_GPIO_Init+0x18c>)
 8000dce:	f001 fdcb 	bl	8002968 <HAL_GPIO_Init>
}
 8000dd2:	bf00      	nop
 8000dd4:	3730      	adds	r7, #48	@ 0x30
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020400 	.word	0x40020400
 8000de8:	40020800 	.word	0x40020800
 8000dec:	40020c00 	.word	0x40020c00
 8000df0:	40021400 	.word	0x40021400
 8000df4:	40021800 	.word	0x40021800

08000df8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b090      	sub	sp, #64	@ 0x40
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000e06:	23f0      	movs	r3, #240	@ 0xf0
 8000e08:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000e0e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e12:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000e14:	2302      	movs	r3, #2
 8000e16:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000e18:	23ff      	movs	r3, #255	@ 0xff
 8000e1a:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000e26:	2305      	movs	r3, #5
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d101      	bne.n	8000e34 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <LTCD_Layer_Init+0x78>)
 8000e32:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000e34:	23f0      	movs	r3, #240	@ 0xf0
 8000e36:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000e38:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000e50:	79fa      	ldrb	r2, [r7, #7]
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	4619      	mov	r1, r3
 8000e58:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <LTCD_Layer_Init+0x7c>)
 8000e5a:	f003 f94b 	bl	80040f4 <HAL_LTDC_ConfigLayer>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000e64:	f000 fa2c 	bl	80012c0 <LCD_Error_Handler>
	}
}
 8000e68:	bf00      	nop
 8000e6a:	3740      	adds	r7, #64	@ 0x40
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200001f8 	.word	0x200001f8
 8000e74:	2000011c 	.word	0x2000011c

08000e78 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <LTCD__Init+0xb0>)
 8000e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8000f2c <LTCD__Init+0xb4>)
 8000e80:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000e82:	4b29      	ldr	r3, [pc, #164]	@ (8000f28 <LTCD__Init+0xb0>)
 8000e84:	2209      	movs	r2, #9
 8000e86:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000e88:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <LTCD__Init+0xb0>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000e8e:	4b26      	ldr	r3, [pc, #152]	@ (8000f28 <LTCD__Init+0xb0>)
 8000e90:	221d      	movs	r2, #29
 8000e92:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000e94:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <LTCD__Init+0xb0>)
 8000e96:	2203      	movs	r2, #3
 8000e98:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000e9a:	4b23      	ldr	r3, [pc, #140]	@ (8000f28 <LTCD__Init+0xb0>)
 8000e9c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000ea0:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <LTCD__Init+0xb0>)
 8000ea4:	f240 1243 	movw	r2, #323	@ 0x143
 8000ea8:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <LTCD__Init+0xb0>)
 8000eac:	f240 1217 	movw	r2, #279	@ 0x117
 8000eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <LTCD__Init+0xb0>)
 8000eb4:	f240 1247 	movw	r2, #327	@ 0x147
 8000eb8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <LTCD__Init+0xb0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <LTCD__Init+0xb0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <LTCD__Init+0xb0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <LTCD__Init+0xb8>)
 8000ed4:	2208      	movs	r2, #8
 8000ed6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <LTCD__Init+0xb8>)
 8000eda:	22c0      	movs	r2, #192	@ 0xc0
 8000edc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <LTCD__Init+0xb8>)
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <LTCD__Init+0xb8>)
 8000ee6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eea:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000eec:	4810      	ldr	r0, [pc, #64]	@ (8000f30 <LTCD__Init+0xb8>)
 8000eee:	f003 ff5b 	bl	8004da8 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f28 <LTCD__Init+0xb0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <LTCD__Init+0xb0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <LTCD__Init+0xb0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <LTCD__Init+0xb0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000f0a:	f7ff fead 	bl	8000c68 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f0e:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <LTCD__Init+0xb0>)
 8000f10:	f003 f820 	bl	8003f54 <HAL_LTDC_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000f1a:	f000 f9d1 	bl	80012c0 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000f1e:	f000 fa1f 	bl	8001360 <ili9341_Init>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2000011c 	.word	0x2000011c
 8000f2c:	40016800 	.word	0x40016800
 8000f30:	200001c4 	.word	0x200001c4

08000f34 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	80bb      	strh	r3, [r7, #4]
 8000f42:	4613      	mov	r3, r2
 8000f44:	807b      	strh	r3, [r7, #2]
	if(x>239 || y>319)
 8000f46:	88fb      	ldrh	r3, [r7, #6]
 8000f48:	2bef      	cmp	r3, #239	@ 0xef
 8000f4a:	d810      	bhi.n	8000f6e <LCD_Draw_Pixel+0x3a>
 8000f4c:	88bb      	ldrh	r3, [r7, #4]
 8000f4e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f52:	d20c      	bcs.n	8000f6e <LCD_Draw_Pixel+0x3a>
	{
		return;
	}
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000f54:	88ba      	ldrh	r2, [r7, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	1a9b      	subs	r3, r3, r2
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	461a      	mov	r2, r3
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	4413      	add	r3, r2
 8000f64:	4905      	ldr	r1, [pc, #20]	@ (8000f7c <LCD_Draw_Pixel+0x48>)
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000f6c:	e000      	b.n	8000f70 <LCD_Draw_Pixel+0x3c>
		return;
 8000f6e:	bf00      	nop
}
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200001f8 	.word	0x200001f8

08000f80 <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4623      	mov	r3, r4
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	4603      	mov	r3, r0
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	460b      	mov	r3, r1
 8000f98:	807b      	strh	r3, [r7, #2]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000f9e:	887b      	ldrh	r3, [r7, #2]
 8000fa0:	425b      	negs	r3, r3
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	81fb      	strh	r3, [r7, #14]
 8000fa6:	e034      	b.n	8001012 <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	425b      	negs	r3, r3
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	81bb      	strh	r3, [r7, #12]
 8000fb0:	e024      	b.n	8000ffc <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000fb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fb6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000fba:	fb03 f202 	mul.w	r2, r3, r2
 8000fbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fc2:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000fc6:	fb01 f303 	mul.w	r3, r1, r3
 8000fca:	441a      	add	r2, r3
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	8879      	ldrh	r1, [r7, #2]
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dc0b      	bgt.n	8000ff0 <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000fd8:	89ba      	ldrh	r2, [r7, #12]
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	4413      	add	r3, r2
 8000fde:	b298      	uxth	r0, r3
 8000fe0:	89fa      	ldrh	r2, [r7, #14]
 8000fe2:	88bb      	ldrh	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	883a      	ldrh	r2, [r7, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff ffa2 	bl	8000f34 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000ff0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	81bb      	strh	r3, [r7, #12]
 8000ffc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	429a      	cmp	r2, r3
 8001004:	ddd5      	ble.n	8000fb2 <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8001006:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800100a:	b29b      	uxth	r3, r3
 800100c:	3301      	adds	r3, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	81fb      	strh	r3, [r7, #14]
 8001012:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	429a      	cmp	r2, r3
 800101a:	ddc5      	ble.n	8000fa8 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bd90      	pop	{r4, r7, pc}

08001026 <LCD_Draw_Vertical_Line>:

void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001026:	b590      	push	{r4, r7, lr}
 8001028:	b085      	sub	sp, #20
 800102a:	af00      	add	r7, sp, #0
 800102c:	4604      	mov	r4, r0
 800102e:	4608      	mov	r0, r1
 8001030:	4611      	mov	r1, r2
 8001032:	461a      	mov	r2, r3
 8001034:	4623      	mov	r3, r4
 8001036:	80fb      	strh	r3, [r7, #6]
 8001038:	4603      	mov	r3, r0
 800103a:	80bb      	strh	r3, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
 8001040:	4613      	mov	r3, r2
 8001042:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001044:	2300      	movs	r3, #0
 8001046:	81fb      	strh	r3, [r7, #14]
 8001048:	e00b      	b.n	8001062 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 800104a:	89fa      	ldrh	r2, [r7, #14]
 800104c:	88bb      	ldrh	r3, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	b299      	uxth	r1, r3
 8001052:	883a      	ldrh	r2, [r7, #0]
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff6c 	bl	8000f34 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	3301      	adds	r3, #1
 8001060:	81fb      	strh	r3, [r7, #14]
 8001062:	89fa      	ldrh	r2, [r7, #14]
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	429a      	cmp	r2, r3
 8001068:	d3ef      	bcc.n	800104a <LCD_Draw_Vertical_Line+0x24>
  }
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bd90      	pop	{r4, r7, pc}

08001074 <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	4604      	mov	r4, r0
 800107c:	4608      	mov	r0, r1
 800107e:	4611      	mov	r1, r2
 8001080:	461a      	mov	r2, r3
 8001082:	4623      	mov	r3, r4
 8001084:	80fb      	strh	r3, [r7, #6]
 8001086:	4603      	mov	r3, r0
 8001088:	80bb      	strh	r3, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	807b      	strh	r3, [r7, #2]
 800108e:	4613      	mov	r3, r2
 8001090:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001092:	2300      	movs	r3, #0
 8001094:	81fb      	strh	r3, [r7, #14]
 8001096:	e00b      	b.n	80010b0 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(x+i, y, color);
 8001098:	88fa      	ldrh	r2, [r7, #6]
 800109a:	89fb      	ldrh	r3, [r7, #14]
 800109c:	4413      	add	r3, r2
 800109e:	b29b      	uxth	r3, r3
 80010a0:	883a      	ldrh	r2, [r7, #0]
 80010a2:	88b9      	ldrh	r1, [r7, #4]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff45 	bl	8000f34 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 80010aa:	89fb      	ldrh	r3, [r7, #14]
 80010ac:	3301      	adds	r3, #1
 80010ae:	81fb      	strh	r3, [r7, #14]
 80010b0:	89fa      	ldrh	r2, [r7, #14]
 80010b2:	887b      	ldrh	r3, [r7, #2]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3ef      	bcc.n	8001098 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd90      	pop	{r4, r7, pc}
	...

080010c4 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10e      	bne.n	80010f8 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	e007      	b.n	80010f0 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 80010e0:	4908      	ldr	r1, [pc, #32]	@ (8001104 <LCD_Clear+0x40>)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	88ba      	ldrh	r2, [r7, #4]
 80010e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3301      	adds	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80010f6:	d3f3      	bcc.n	80010e0 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	200001f8 	.word	0x200001f8

08001108 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8001112:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <LCD_SetTextColor+0x1c>)
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	8013      	strh	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20000000 	.word	0x20000000

08001128 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <LCD_SetFont+0x1c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200001f4 	.word	0x200001f4

08001148 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	603a      	str	r2, [r7, #0]
 8001152:	80fb      	strh	r3, [r7, #6]
 8001154:	460b      	mov	r3, r1
 8001156:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	e04c      	b.n	8001200 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	e03f      	b.n	80011ec <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	4413      	add	r3, r2
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	4619      	mov	r1, r3
 8001178:	4b27      	ldr	r3, [pc, #156]	@ (8001218 <LCD_Draw_Char+0xd0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	889b      	ldrh	r3, [r3, #4]
 800117e:	4a27      	ldr	r2, [pc, #156]	@ (800121c <LCD_Draw_Char+0xd4>)
 8001180:	fba2 2303 	umull	r2, r3, r2, r3
 8001184:	08db      	lsrs	r3, r3, #3
 8001186:	b29b      	uxth	r3, r3
 8001188:	00db      	lsls	r3, r3, #3
 800118a:	2280      	movs	r2, #128	@ 0x80
 800118c:	409a      	lsls	r2, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	fa42 f303 	asr.w	r3, r2, r3
 8001194:	400b      	ands	r3, r1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d104      	bne.n	80011a4 <LCD_Draw_Char+0x5c>
 800119a:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <LCD_Draw_Char+0xd0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	889b      	ldrh	r3, [r3, #4]
 80011a0:	2b0c      	cmp	r3, #12
 80011a2:	d920      	bls.n	80011e6 <LCD_Draw_Char+0x9e>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	4413      	add	r3, r2
 80011ac:	881b      	ldrh	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	fa42 f303 	asr.w	r3, r2, r3
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d104      	bne.n	80011c8 <LCD_Draw_Char+0x80>
 80011be:	4b16      	ldr	r3, [pc, #88]	@ (8001218 <LCD_Draw_Char+0xd0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	889b      	ldrh	r3, [r3, #4]
 80011c4:	2b0c      	cmp	r3, #12
 80011c6:	d80e      	bhi.n	80011e6 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	88fb      	ldrh	r3, [r7, #6]
 80011ce:	4413      	add	r3, r2
 80011d0:	b298      	uxth	r0, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	88bb      	ldrh	r3, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4a10      	ldr	r2, [pc, #64]	@ (8001220 <LCD_Draw_Char+0xd8>)
 80011de:	8812      	ldrh	r2, [r2, #0]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff fea7 	bl	8000f34 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3301      	adds	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <LCD_Draw_Char+0xd0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	889b      	ldrh	r3, [r3, #4]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d3b8      	bcc.n	800116c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3301      	adds	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <LCD_Draw_Char+0xd0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	88db      	ldrh	r3, [r3, #6]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4293      	cmp	r3, r2
 800120c:	d3ab      	bcc.n	8001166 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200001f4 	.word	0x200001f4
 800121c:	aaaaaaab 	.word	0xaaaaaaab
 8001220:	20000000 	.word	0x20000000

08001224 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
 800122e:	460b      	mov	r3, r1
 8001230:	80bb      	strh	r3, [r7, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	3b20      	subs	r3, #32
 800123a:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <LCD_DisplayChar+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	4907      	ldr	r1, [pc, #28]	@ (8001264 <LCD_DisplayChar+0x40>)
 8001246:	6809      	ldr	r1, [r1, #0]
 8001248:	88c9      	ldrh	r1, [r1, #6]
 800124a:	fb01 f303 	mul.w	r3, r1, r3
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	441a      	add	r2, r3
 8001252:	88b9      	ldrh	r1, [r7, #4]
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff76 	bl	8001148 <LCD_Draw_Char>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200001f4 	.word	0x200001f4

08001268 <LCD_Print_Chip>:
		LCD_Draw_Vertical_Line(i,80,250,LCD_COLOR_BLACK);
	}
}

void LCD_Print_Chip(int position, int color)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	int y_position=60;
 8001272:	233c      	movs	r3, #60	@ 0x3c
 8001274:	60fb      	str	r3, [r7, #12]
	int x_position=(35*position)+17;
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	00da      	lsls	r2, r3, #3
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	3311      	adds	r3, #17
 8001284:	60bb      	str	r3, [r7, #8]

	if(color==1)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d109      	bne.n	80012a0 <LCD_Print_Chip+0x38>
	{
		LCD_Draw_Circle_Fill(x_position,y_position,10,LCD_COLOR_YELLOW);
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	b298      	uxth	r0, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	b299      	uxth	r1, r3
 8001294:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001298:	220a      	movs	r2, #10
 800129a:	f7ff fe71 	bl	8000f80 <LCD_Draw_Circle_Fill>
	else if(color==2)
	{
		LCD_Draw_Circle_Fill(x_position,y_position,10,LCD_COLOR_RED);
	}

}
 800129e:	e00b      	b.n	80012b8 <LCD_Print_Chip+0x50>
	else if(color==2)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d108      	bne.n	80012b8 <LCD_Print_Chip+0x50>
		LCD_Draw_Circle_Fill(x_position,y_position,10,LCD_COLOR_RED);
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	b298      	uxth	r0, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	b299      	uxth	r1, r3
 80012ae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80012b2:	220a      	movs	r2, #10
 80012b4:	f7ff fe64 	bl	8000f80 <LCD_Draw_Circle_Fill>
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <LCD_Error_Handler+0x8>

080012cc <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 80012d0:	f000 fe15 	bl	8001efe <STMPE811_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d001      	beq.n	80012de <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 80012da:	bf00      	nop
 80012dc:	e7fd      	b.n	80012da <InitializeLCDTouch+0xe>
  }
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 febf 	bl	800206e <STMPE811_ReadTouch>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <getScheduledEvents>:
uint32_t scheduledEvents;



uint32_t getScheduledEvents ()
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	return scheduledEvents;
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <getScheduledEvents+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	200259f8 	.word	0x200259f8

08001314 <addScheduleEvent>:
void addScheduleEvent (uint32_t event)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	scheduledEvents|=event;
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <addScheduleEvent+0x20>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4313      	orrs	r3, r2
 8001324:	4a03      	ldr	r2, [pc, #12]	@ (8001334 <addScheduleEvent+0x20>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	200259f8 	.word	0x200259f8

08001338 <removeSchedulerEvent>:
void removeSchedulerEvent (uint32_t event)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	scheduledEvents&=~(event);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	43da      	mvns	r2, r3
 8001344:	4b05      	ldr	r3, [pc, #20]	@ (800135c <removeSchedulerEvent+0x24>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4013      	ands	r3, r2
 800134a:	4a04      	ldr	r2, [pc, #16]	@ (800135c <removeSchedulerEvent+0x24>)
 800134c:	6013      	str	r3, [r2, #0]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	200259f8 	.word	0x200259f8

08001360 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001364:	f000 f9fe 	bl	8001764 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001368:	20ca      	movs	r0, #202	@ 0xca
 800136a:	f000 f943 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 800136e:	20c3      	movs	r0, #195	@ 0xc3
 8001370:	f000 f94d 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001374:	2008      	movs	r0, #8
 8001376:	f000 f94a 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 800137a:	2050      	movs	r0, #80	@ 0x50
 800137c:	f000 f947 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001380:	20cf      	movs	r0, #207	@ 0xcf
 8001382:	f000 f937 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001386:	2000      	movs	r0, #0
 8001388:	f000 f941 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 800138c:	20c1      	movs	r0, #193	@ 0xc1
 800138e:	f000 f93e 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001392:	2030      	movs	r0, #48	@ 0x30
 8001394:	f000 f93b 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001398:	20ed      	movs	r0, #237	@ 0xed
 800139a:	f000 f92b 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 800139e:	2064      	movs	r0, #100	@ 0x64
 80013a0:	f000 f935 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f932 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80013aa:	2012      	movs	r0, #18
 80013ac:	f000 f92f 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80013b0:	2081      	movs	r0, #129	@ 0x81
 80013b2:	f000 f92c 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80013b6:	20e8      	movs	r0, #232	@ 0xe8
 80013b8:	f000 f91c 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80013bc:	2085      	movs	r0, #133	@ 0x85
 80013be:	f000 f926 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f923 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80013c8:	2078      	movs	r0, #120	@ 0x78
 80013ca:	f000 f920 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80013ce:	20cb      	movs	r0, #203	@ 0xcb
 80013d0:	f000 f910 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80013d4:	2039      	movs	r0, #57	@ 0x39
 80013d6:	f000 f91a 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 80013da:	202c      	movs	r0, #44	@ 0x2c
 80013dc:	f000 f917 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 f914 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 80013e6:	2034      	movs	r0, #52	@ 0x34
 80013e8:	f000 f911 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 80013ec:	2002      	movs	r0, #2
 80013ee:	f000 f90e 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 80013f2:	20f7      	movs	r0, #247	@ 0xf7
 80013f4:	f000 f8fe 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 80013f8:	2020      	movs	r0, #32
 80013fa:	f000 f908 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 80013fe:	20ea      	movs	r0, #234	@ 0xea
 8001400:	f000 f8f8 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001404:	2000      	movs	r0, #0
 8001406:	f000 f902 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800140a:	2000      	movs	r0, #0
 800140c:	f000 f8ff 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001410:	20b1      	movs	r0, #177	@ 0xb1
 8001412:	f000 f8ef 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001416:	2000      	movs	r0, #0
 8001418:	f000 f8f9 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800141c:	201b      	movs	r0, #27
 800141e:	f000 f8f6 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001422:	20b6      	movs	r0, #182	@ 0xb6
 8001424:	f000 f8e6 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001428:	200a      	movs	r0, #10
 800142a:	f000 f8f0 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 800142e:	20a2      	movs	r0, #162	@ 0xa2
 8001430:	f000 f8ed 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001434:	20c0      	movs	r0, #192	@ 0xc0
 8001436:	f000 f8dd 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800143a:	2010      	movs	r0, #16
 800143c:	f000 f8e7 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001440:	20c1      	movs	r0, #193	@ 0xc1
 8001442:	f000 f8d7 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001446:	2010      	movs	r0, #16
 8001448:	f000 f8e1 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 800144c:	20c5      	movs	r0, #197	@ 0xc5
 800144e:	f000 f8d1 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001452:	2045      	movs	r0, #69	@ 0x45
 8001454:	f000 f8db 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001458:	2015      	movs	r0, #21
 800145a:	f000 f8d8 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 800145e:	20c7      	movs	r0, #199	@ 0xc7
 8001460:	f000 f8c8 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001464:	2090      	movs	r0, #144	@ 0x90
 8001466:	f000 f8d2 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800146a:	2036      	movs	r0, #54	@ 0x36
 800146c:	f000 f8c2 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001470:	20c8      	movs	r0, #200	@ 0xc8
 8001472:	f000 f8cc 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001476:	20f2      	movs	r0, #242	@ 0xf2
 8001478:	f000 f8bc 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800147c:	2000      	movs	r0, #0
 800147e:	f000 f8c6 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001482:	20b0      	movs	r0, #176	@ 0xb0
 8001484:	f000 f8b6 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001488:	20c2      	movs	r0, #194	@ 0xc2
 800148a:	f000 f8c0 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800148e:	20b6      	movs	r0, #182	@ 0xb6
 8001490:	f000 f8b0 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001494:	200a      	movs	r0, #10
 8001496:	f000 f8ba 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800149a:	20a7      	movs	r0, #167	@ 0xa7
 800149c:	f000 f8b7 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80014a0:	2027      	movs	r0, #39	@ 0x27
 80014a2:	f000 f8b4 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80014a6:	2004      	movs	r0, #4
 80014a8:	f000 f8b1 	bl	800160e <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80014ac:	202a      	movs	r0, #42	@ 0x2a
 80014ae:	f000 f8a1 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 f8ab 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 f8a8 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f8a5 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80014c4:	20ef      	movs	r0, #239	@ 0xef
 80014c6:	f000 f8a2 	bl	800160e <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80014ca:	202b      	movs	r0, #43	@ 0x2b
 80014cc:	f000 f892 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 f89c 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f899 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 80014dc:	2001      	movs	r0, #1
 80014de:	f000 f896 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 80014e2:	203f      	movs	r0, #63	@ 0x3f
 80014e4:	f000 f893 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 80014e8:	20f6      	movs	r0, #246	@ 0xf6
 80014ea:	f000 f883 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 f88d 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f88a 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80014fa:	2006      	movs	r0, #6
 80014fc:	f000 f887 	bl	800160e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001500:	202c      	movs	r0, #44	@ 0x2c
 8001502:	f000 f877 	bl	80015f4 <ili9341_Write_Reg>
  LCD_Delay(200);
 8001506:	20c8      	movs	r0, #200	@ 0xc8
 8001508:	f000 f9e8 	bl	80018dc <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 800150c:	2026      	movs	r0, #38	@ 0x26
 800150e:	f000 f871 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001512:	2001      	movs	r0, #1
 8001514:	f000 f87b 	bl	800160e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001518:	20e0      	movs	r0, #224	@ 0xe0
 800151a:	f000 f86b 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 800151e:	200f      	movs	r0, #15
 8001520:	f000 f875 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001524:	2029      	movs	r0, #41	@ 0x29
 8001526:	f000 f872 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 800152a:	2024      	movs	r0, #36	@ 0x24
 800152c:	f000 f86f 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001530:	200c      	movs	r0, #12
 8001532:	f000 f86c 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001536:	200e      	movs	r0, #14
 8001538:	f000 f869 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800153c:	2009      	movs	r0, #9
 800153e:	f000 f866 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001542:	204e      	movs	r0, #78	@ 0x4e
 8001544:	f000 f863 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001548:	2078      	movs	r0, #120	@ 0x78
 800154a:	f000 f860 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 800154e:	203c      	movs	r0, #60	@ 0x3c
 8001550:	f000 f85d 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001554:	2009      	movs	r0, #9
 8001556:	f000 f85a 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 800155a:	2013      	movs	r0, #19
 800155c:	f000 f857 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001560:	2005      	movs	r0, #5
 8001562:	f000 f854 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8001566:	2017      	movs	r0, #23
 8001568:	f000 f851 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800156c:	2011      	movs	r0, #17
 800156e:	f000 f84e 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001572:	2000      	movs	r0, #0
 8001574:	f000 f84b 	bl	800160e <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8001578:	20e1      	movs	r0, #225	@ 0xe1
 800157a:	f000 f83b 	bl	80015f4 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800157e:	2000      	movs	r0, #0
 8001580:	f000 f845 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8001584:	2016      	movs	r0, #22
 8001586:	f000 f842 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800158a:	201b      	movs	r0, #27
 800158c:	f000 f83f 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001590:	2004      	movs	r0, #4
 8001592:	f000 f83c 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001596:	2011      	movs	r0, #17
 8001598:	f000 f839 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800159c:	2007      	movs	r0, #7
 800159e:	f000 f836 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80015a2:	2031      	movs	r0, #49	@ 0x31
 80015a4:	f000 f833 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80015a8:	2033      	movs	r0, #51	@ 0x33
 80015aa:	f000 f830 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80015ae:	2042      	movs	r0, #66	@ 0x42
 80015b0:	f000 f82d 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80015b4:	2005      	movs	r0, #5
 80015b6:	f000 f82a 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80015ba:	200c      	movs	r0, #12
 80015bc:	f000 f827 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80015c0:	200a      	movs	r0, #10
 80015c2:	f000 f824 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80015c6:	2028      	movs	r0, #40	@ 0x28
 80015c8:	f000 f821 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80015cc:	202f      	movs	r0, #47	@ 0x2f
 80015ce:	f000 f81e 	bl	800160e <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80015d2:	200f      	movs	r0, #15
 80015d4:	f000 f81b 	bl	800160e <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 80015d8:	2011      	movs	r0, #17
 80015da:	f000 f80b 	bl	80015f4 <ili9341_Write_Reg>
  LCD_Delay(200);
 80015de:	20c8      	movs	r0, #200	@ 0xc8
 80015e0:	f000 f97c 	bl	80018dc <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 80015e4:	2029      	movs	r0, #41	@ 0x29
 80015e6:	f000 f805 	bl	80015f4 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80015ea:	202c      	movs	r0, #44	@ 0x2c
 80015ec:	f000 f802 	bl	80015f4 <ili9341_Write_Reg>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f949 	bl	8001898 <LCD_IO_WriteReg>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f91a 	bl	8001854 <LCD_IO_WriteData>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800162c:	4819      	ldr	r0, [pc, #100]	@ (8001694 <SPI_Init+0x6c>)
 800162e:	f003 ff70 	bl	8005512 <HAL_SPI_GetState>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d12b      	bne.n	8001690 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001638:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <SPI_Init+0x6c>)
 800163a:	4a17      	ldr	r2, [pc, #92]	@ (8001698 <SPI_Init+0x70>)
 800163c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <SPI_Init+0x6c>)
 8001640:	2218      	movs	r2, #24
 8001642:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <SPI_Init+0x6c>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <SPI_Init+0x6c>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001650:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <SPI_Init+0x6c>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001656:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <SPI_Init+0x6c>)
 8001658:	2200      	movs	r2, #0
 800165a:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800165c:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <SPI_Init+0x6c>)
 800165e:	2207      	movs	r2, #7
 8001660:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <SPI_Init+0x6c>)
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <SPI_Init+0x6c>)
 800166a:	2200      	movs	r2, #0
 800166c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <SPI_Init+0x6c>)
 8001670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001674:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001676:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <SPI_Init+0x6c>)
 8001678:	2200      	movs	r2, #0
 800167a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <SPI_Init+0x6c>)
 800167e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001682:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8001684:	4803      	ldr	r0, [pc, #12]	@ (8001694 <SPI_Init+0x6c>)
 8001686:	f000 f833 	bl	80016f0 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800168a:	4802      	ldr	r0, [pc, #8]	@ (8001694 <SPI_Init+0x6c>)
 800168c:	f003 fd4c 	bl	8005128 <HAL_SPI_Init>
  }
}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200259fc 	.word	0x200259fc
 8001698:	40015000 	.word	0x40015000

0800169c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <SPI_Write+0x34>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	1db9      	adds	r1, r7, #6
 80016b0:	2201      	movs	r2, #1
 80016b2:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <SPI_Write+0x38>)
 80016b4:	f003 fde9 	bl	800528a <HAL_SPI_Transmit>
 80016b8:	4603      	mov	r3, r0
 80016ba:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80016c2:	f000 f809 	bl	80016d8 <SPI_Error>
  }
}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000000c 	.word	0x2000000c
 80016d4:	200259fc 	.word	0x200259fc

080016d8 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80016dc:	4803      	ldr	r0, [pc, #12]	@ (80016ec <SPI_Error+0x14>)
 80016de:	f003 fdac 	bl	800523a <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 80016e2:	f7ff ffa1 	bl	8001628 <SPI_Init>
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200259fc 	.word	0x200259fc

080016f0 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	4b17      	ldr	r3, [pc, #92]	@ (800175c <SPI_MspInit+0x6c>)
 80016fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001700:	4a16      	ldr	r2, [pc, #88]	@ (800175c <SPI_MspInit+0x6c>)
 8001702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001706:	6453      	str	r3, [r2, #68]	@ 0x44
 8001708:	4b14      	ldr	r3, [pc, #80]	@ (800175c <SPI_MspInit+0x6c>)
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4b10      	ldr	r3, [pc, #64]	@ (800175c <SPI_MspInit+0x6c>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171c:	4a0f      	ldr	r2, [pc, #60]	@ (800175c <SPI_MspInit+0x6c>)
 800171e:	f043 0320 	orr.w	r3, r3, #32
 8001722:	6313      	str	r3, [r2, #48]	@ 0x30
 8001724:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <SPI_MspInit+0x6c>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001728:	f003 0320 	and.w	r3, r3, #32
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001730:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800173a:	2302      	movs	r3, #2
 800173c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800173e:	2301      	movs	r3, #1
 8001740:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 8001742:	2305      	movs	r3, #5
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4804      	ldr	r0, [pc, #16]	@ (8001760 <SPI_MspInit+0x70>)
 800174e:	f001 f90b 	bl	8002968 <HAL_GPIO_Init>
}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	@ 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40021400 	.word	0x40021400

08001764 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800176a:	4b36      	ldr	r3, [pc, #216]	@ (8001844 <LCD_IO_Init+0xe0>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d164      	bne.n	800183c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001772:	4b34      	ldr	r3, [pc, #208]	@ (8001844 <LCD_IO_Init+0xe0>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	4b32      	ldr	r3, [pc, #200]	@ (8001848 <LCD_IO_Init+0xe4>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001780:	4a31      	ldr	r2, [pc, #196]	@ (8001848 <LCD_IO_Init+0xe4>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6313      	str	r3, [r2, #48]	@ 0x30
 8001788:	4b2f      	ldr	r3, [pc, #188]	@ (8001848 <LCD_IO_Init+0xe4>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001798:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800179a:	2301      	movs	r3, #1
 800179c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	4619      	mov	r1, r3
 80017ac:	4827      	ldr	r0, [pc, #156]	@ (800184c <LCD_IO_Init+0xe8>)
 80017ae:	f001 f8db 	bl	8002968 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <LCD_IO_Init+0xe4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a23      	ldr	r2, [pc, #140]	@ (8001848 <LCD_IO_Init+0xe4>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b21      	ldr	r3, [pc, #132]	@ (8001848 <LCD_IO_Init+0xe4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80017ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80017dc:	2302      	movs	r3, #2
 80017de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	4619      	mov	r1, r3
 80017e6:	4819      	ldr	r0, [pc, #100]	@ (800184c <LCD_IO_Init+0xe8>)
 80017e8:	f001 f8be 	bl	8002968 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <LCD_IO_Init+0xe4>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	4a14      	ldr	r2, [pc, #80]	@ (8001848 <LCD_IO_Init+0xe4>)
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <LCD_IO_Init+0xe4>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001808:	2304      	movs	r3, #4
 800180a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800180c:	2301      	movs	r3, #1
 800180e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001814:	2302      	movs	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4619      	mov	r1, r3
 800181e:	480c      	ldr	r0, [pc, #48]	@ (8001850 <LCD_IO_Init+0xec>)
 8001820:	f001 f8a2 	bl	8002968 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001824:	2200      	movs	r2, #0
 8001826:	2104      	movs	r1, #4
 8001828:	4809      	ldr	r0, [pc, #36]	@ (8001850 <LCD_IO_Init+0xec>)
 800182a:	f001 fb55 	bl	8002ed8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800182e:	2201      	movs	r2, #1
 8001830:	2104      	movs	r1, #4
 8001832:	4807      	ldr	r0, [pc, #28]	@ (8001850 <LCD_IO_Init+0xec>)
 8001834:	f001 fb50 	bl	8002ed8 <HAL_GPIO_WritePin>

    SPI_Init();
 8001838:	f7ff fef6 	bl	8001628 <SPI_Init>
  }
}
 800183c:	bf00      	nop
 800183e:	3720      	adds	r7, #32
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20025a54 	.word	0x20025a54
 8001848:	40023800 	.word	0x40023800
 800184c:	40020c00 	.word	0x40020c00
 8001850:	40020800 	.word	0x40020800

08001854 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800185e:	2201      	movs	r2, #1
 8001860:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001864:	480a      	ldr	r0, [pc, #40]	@ (8001890 <LCD_IO_WriteData+0x3c>)
 8001866:	f001 fb37 	bl	8002ed8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800186a:	2200      	movs	r2, #0
 800186c:	2104      	movs	r1, #4
 800186e:	4809      	ldr	r0, [pc, #36]	@ (8001894 <LCD_IO_WriteData+0x40>)
 8001870:	f001 fb32 	bl	8002ed8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff10 	bl	800169c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800187c:	2201      	movs	r2, #1
 800187e:	2104      	movs	r1, #4
 8001880:	4804      	ldr	r0, [pc, #16]	@ (8001894 <LCD_IO_WriteData+0x40>)
 8001882:	f001 fb29 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40020c00 	.word	0x40020c00
 8001894:	40020800 	.word	0x40020800

08001898 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018a8:	480a      	ldr	r0, [pc, #40]	@ (80018d4 <LCD_IO_WriteReg+0x3c>)
 80018aa:	f001 fb15 	bl	8002ed8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80018ae:	2200      	movs	r2, #0
 80018b0:	2104      	movs	r1, #4
 80018b2:	4809      	ldr	r0, [pc, #36]	@ (80018d8 <LCD_IO_WriteReg+0x40>)
 80018b4:	f001 fb10 	bl	8002ed8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80018b8:	79fb      	ldrb	r3, [r7, #7]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff feed 	bl	800169c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80018c2:	2201      	movs	r2, #1
 80018c4:	2104      	movs	r1, #4
 80018c6:	4804      	ldr	r0, [pc, #16]	@ (80018d8 <LCD_IO_WriteReg+0x40>)
 80018c8:	f001 fb06 	bl	8002ed8 <HAL_GPIO_WritePin>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	40020800 	.word	0x40020800

080018dc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 ff09 	bl	80026fc <HAL_Delay>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80018f8:	f000 fe8e 	bl	8002618 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80018fc:	f000 f840 	bl	8001980 <SystemClock_Config>
//	MX_RNG_Init();
//	MX_TIM2_Init();
//	MX_SPI5_Init();
//	MX_I2C3_Init();
	/* USER CODE BEGIN 2 */
	ApplicationInit(); // Initializes the LCD functionality
 8001900:	f7fe fdec 	bl	80004dc <ApplicationInit>
	game_init();
 8001904:	f7fe fe04 	bl	8000510 <game_init>
#if COMPILE_TOUCH_FUNCTIONS == 1 // This block will need to be deleted
	LCD_Touch_Player_Count();
 8001908:	f7ff f86c 	bl	80009e4 <LCD_Touch_Player_Count>
	HAL_Delay(300);
 800190c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001910:	f000 fef4 	bl	80026fc <HAL_Delay>
	LCD_PrintBoard();
 8001914:	f7ff f8a8 	bl	8000a68 <LCD_PrintBoard>
	uint32_t eventsToRun;
	bool updated_board;
	int win;
	while(1)
	{
		updated_board=LCD_Touch_Move_Chip();
 8001918:	f7fe fff2 	bl	8000900 <LCD_Touch_Move_Chip>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	73fb      	strb	r3, [r7, #15]

		if(updated_board)
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <main+0x40>
		{
			LCD_PrintBoard();
 800192e:	f7ff f89b 	bl	8000a68 <LCD_PrintBoard>
		}

		eventsToRun=getScheduledEvents();
 8001932:	f7ff fce3 	bl	80012fc <getScheduledEvents>
 8001936:	60b8      	str	r0, [r7, #8]


		if(eventsToRun&DROP_CHIP_EVENT)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ea      	beq.n	8001918 <main+0x26>
		{
			update_game_board();
 8001942:	f7fe fe15 	bl	8000570 <update_game_board>
			LCD_PrintBoard();
 8001946:	f7ff f88f 	bl	8000a68 <LCD_PrintBoard>
			removeSchedulerEvent(DROP_CHIP_EVENT);
 800194a:	2002      	movs	r0, #2
 800194c:	f7ff fcf4 	bl	8001338 <removeSchedulerEvent>
			win=check_for_win();
 8001950:	f7fe fe7a 	bl	8000648 <check_for_win>
 8001954:	6078      	str	r0, [r7, #4]

			if(win==WIN)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d104      	bne.n	8001966 <main+0x74>
			{
				LCD_Clear(0,LCD_COLOR_BLUE);
 800195c:	211f      	movs	r1, #31
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fbb0 	bl	80010c4 <LCD_Clear>
				break;
 8001964:	e007      	b.n	8001976 <main+0x84>
			}

			if(win==TIE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d1d5      	bne.n	8001918 <main+0x26>
			{
				LCD_Clear(0,LCD_COLOR_RED);
 800196c:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff fba7 	bl	80010c4 <LCD_Clear>
 8001976:	2300      	movs	r3, #0
				break;
			}
		}
	}

}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b094      	sub	sp, #80	@ 0x50
 8001984:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	2230      	movs	r2, #48	@ 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f003 feaa 	bl	80056e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <SystemClock_Config+0xcc>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	4a27      	ldr	r2, [pc, #156]	@ (8001a4c <SystemClock_Config+0xcc>)
 80019ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b4:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <SystemClock_Config+0xcc>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	4b22      	ldr	r3, [pc, #136]	@ (8001a50 <SystemClock_Config+0xd0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a21      	ldr	r2, [pc, #132]	@ (8001a50 <SystemClock_Config+0xd0>)
 80019ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <SystemClock_Config+0xd0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019dc:	2301      	movs	r3, #1
 80019de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80019f0:	2308      	movs	r3, #8
 80019f2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80019f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80019f8:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fa:	2302      	movs	r3, #2
 80019fc:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80019fe:	2307      	movs	r3, #7
 8001a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fd4a 	bl	80044a0 <HAL_RCC_OscConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8001a12:	f000 f81f 	bl	8001a54 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a16:	230f      	movs	r3, #15
 8001a18:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a22:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a26:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a2c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	2105      	movs	r1, #5
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 ffab 	bl	8004990 <HAL_RCC_ClockConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001a40:	f000 f808 	bl	8001a54 <Error_Handler>
	}
}
 8001a44:	bf00      	nop
 8001a46:	3750      	adds	r7, #80	@ 0x50
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000

08001a54 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a58:	b672      	cpsid	i
}
 8001a5a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <Error_Handler+0x8>

08001a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001aac <HAL_MspInit+0x4c>)
 8001a70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a76:	4b0d      	ldr	r3, [pc, #52]	@ (8001aac <HAL_MspInit+0x4c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4a08      	ldr	r2, [pc, #32]	@ (8001aac <HAL_MspInit+0x4c>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_MspInit+0x4c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a9e:	2007      	movs	r0, #7
 8001aa0:	f000 ff20 	bl	80028e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a29      	ldr	r2, [pc, #164]	@ (8001b74 <HAL_I2C_MspInit+0xc4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d14b      	bne.n	8001b6a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b28      	ldr	r3, [pc, #160]	@ (8001b78 <HAL_I2C_MspInit+0xc8>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	4a27      	ldr	r2, [pc, #156]	@ (8001b78 <HAL_I2C_MspInit+0xc8>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae2:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <HAL_I2C_MspInit+0xc8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <HAL_I2C_MspInit+0xc8>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a20      	ldr	r2, [pc, #128]	@ (8001b78 <HAL_I2C_MspInit+0xc8>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <HAL_I2C_MspInit+0xc8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	4815      	ldr	r0, [pc, #84]	@ (8001b7c <HAL_I2C_MspInit+0xcc>)
 8001b28:	f000 ff1e 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b32:	2312      	movs	r3, #18
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b3e:	2304      	movs	r3, #4
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <HAL_I2C_MspInit+0xd0>)
 8001b4a:	f000 ff0d 	bl	8002968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_I2C_MspInit+0xc8>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <HAL_I2C_MspInit+0xc8>)
 8001b58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_I2C_MspInit+0xc8>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3728      	adds	r7, #40	@ 0x28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40005c00 	.word	0x40005c00
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020000 	.word	0x40020000

08001b84 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b09a      	sub	sp, #104	@ 0x68
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba0:	2230      	movs	r2, #48	@ 0x30
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fd9f 	bl	80056e8 <memset>
  if(hltdc->Instance==LTDC)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a81      	ldr	r2, [pc, #516]	@ (8001db4 <HAL_LTDC_MspInit+0x230>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	f040 80fb 	bne.w	8001dac <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 200;
 8001bba:	23c8      	movs	r3, #200	@ 0xc8
 8001bbc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_16;
 8001bc2:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 f8eb 	bl	8004da8 <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8001bd8:	f7ff ff3c 	bl	8001a54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
 8001be0:	4b75      	ldr	r3, [pc, #468]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be4:	4a74      	ldr	r2, [pc, #464]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001be6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bea:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bec:	4b72      	ldr	r3, [pc, #456]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
 8001bfc:	4b6e      	ldr	r3, [pc, #440]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	4a6d      	ldr	r2, [pc, #436]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c02:	f043 0320 	orr.w	r3, r3, #32
 8001c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c08:	4b6b      	ldr	r3, [pc, #428]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	4b67      	ldr	r3, [pc, #412]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1c:	4a66      	ldr	r2, [pc, #408]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c24:	4b64      	ldr	r3, [pc, #400]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	4b60      	ldr	r3, [pc, #384]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c38:	4a5f      	ldr	r2, [pc, #380]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c3a:	f043 0302 	orr.w	r3, r3, #2
 8001c3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c40:	4b5d      	ldr	r3, [pc, #372]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	4a58      	ldr	r2, [pc, #352]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5c:	4b56      	ldr	r3, [pc, #344]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	4b52      	ldr	r3, [pc, #328]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c70:	4a51      	ldr	r2, [pc, #324]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c72:	f043 0304 	orr.w	r3, r3, #4
 8001c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c78:	4b4f      	ldr	r3, [pc, #316]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	4b4b      	ldr	r3, [pc, #300]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c8e:	f043 0308 	orr.w	r3, r3, #8
 8001c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c94:	4b48      	ldr	r3, [pc, #288]	@ (8001db8 <HAL_LTDC_MspInit+0x234>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001ca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ca4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cb2:	230e      	movs	r3, #14
 8001cb4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cba:	4619      	mov	r1, r3
 8001cbc:	483f      	ldr	r0, [pc, #252]	@ (8001dbc <HAL_LTDC_MspInit+0x238>)
 8001cbe:	f000 fe53 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001cc2:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001cc6:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cd4:	230e      	movs	r3, #14
 8001cd6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4838      	ldr	r0, [pc, #224]	@ (8001dc0 <HAL_LTDC_MspInit+0x23c>)
 8001ce0:	f000 fe42 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cf4:	2309      	movs	r3, #9
 8001cf6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4831      	ldr	r0, [pc, #196]	@ (8001dc4 <HAL_LTDC_MspInit+0x240>)
 8001d00:	f000 fe32 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001d04:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d08:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d16:	230e      	movs	r3, #14
 8001d18:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4828      	ldr	r0, [pc, #160]	@ (8001dc4 <HAL_LTDC_MspInit+0x240>)
 8001d22:	f000 fe21 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001d26:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001d2a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	2300      	movs	r3, #0
 8001d36:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d38:	230e      	movs	r3, #14
 8001d3a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d3c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d40:	4619      	mov	r1, r3
 8001d42:	4821      	ldr	r0, [pc, #132]	@ (8001dc8 <HAL_LTDC_MspInit+0x244>)
 8001d44:	f000 fe10 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001d48:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001d4c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d5a:	230e      	movs	r3, #14
 8001d5c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d62:	4619      	mov	r1, r3
 8001d64:	4819      	ldr	r0, [pc, #100]	@ (8001dcc <HAL_LTDC_MspInit+0x248>)
 8001d66:	f000 fdff 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001d6a:	2348      	movs	r3, #72	@ 0x48
 8001d6c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d7a:	230e      	movs	r3, #14
 8001d7c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d82:	4619      	mov	r1, r3
 8001d84:	4812      	ldr	r0, [pc, #72]	@ (8001dd0 <HAL_LTDC_MspInit+0x24c>)
 8001d86:	f000 fdef 	bl	8002968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001d8a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d8e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d9c:	2309      	movs	r3, #9
 8001d9e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001da0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001da4:	4619      	mov	r1, r3
 8001da6:	4808      	ldr	r0, [pc, #32]	@ (8001dc8 <HAL_LTDC_MspInit+0x244>)
 8001da8:	f000 fdde 	bl	8002968 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001dac:	bf00      	nop
 8001dae:	3768      	adds	r7, #104	@ 0x68
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40016800 	.word	0x40016800
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40021400 	.word	0x40021400
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	40021800 	.word	0x40021800
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00

08001dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	@ 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a19      	ldr	r2, [pc, #100]	@ (8001e58 <HAL_SPI_MspInit+0x84>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d12c      	bne.n	8001e50 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <HAL_SPI_MspInit+0x88>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	4a17      	ldr	r2, [pc, #92]	@ (8001e5c <HAL_SPI_MspInit+0x88>)
 8001e00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <HAL_SPI_MspInit+0x88>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <HAL_SPI_MspInit+0x88>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a10      	ldr	r2, [pc, #64]	@ (8001e5c <HAL_SPI_MspInit+0x88>)
 8001e1c:	f043 0320 	orr.w	r3, r3, #32
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_SPI_MspInit+0x88>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001e2e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e40:	2305      	movs	r3, #5
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <HAL_SPI_MspInit+0x8c>)
 8001e4c:	f000 fd8c 	bl	8002968 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	@ 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40015000 	.word	0x40015000
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40021400 	.word	0x40021400

08001e64 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a08      	ldr	r2, [pc, #32]	@ (8001e94 <HAL_SPI_MspDeInit+0x30>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10a      	bne.n	8001e8c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001e76:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <HAL_SPI_MspDeInit+0x34>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7a:	4a07      	ldr	r2, [pc, #28]	@ (8001e98 <HAL_SPI_MspDeInit+0x34>)
 8001e7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001e80:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001e82:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001e86:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <HAL_SPI_MspDeInit+0x38>)
 8001e88:	f000 ff1a 	bl	8002cc0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40015000 	.word	0x40015000
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40021400 	.word	0x40021400

08001ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <NMI_Handler+0x4>

08001ea8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <BusFault_Handler+0x4>

08001ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <UsageFault_Handler+0x4>

08001ec8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef6:	f000 fbe1 	bl	80026bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}

08001efe <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8001f04:	f000 f9ce 	bl	80022a4 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8001f08:	f000 f98e 	bl	8002228 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	2103      	movs	r1, #3
 8001f10:	2082      	movs	r0, #130	@ 0x82
 8001f12:	f000 fa1b 	bl	800234c <I2C3_Write>
    HAL_Delay(5);
 8001f16:	2005      	movs	r0, #5
 8001f18:	f000 fbf0 	bl	80026fc <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2103      	movs	r1, #3
 8001f20:	2082      	movs	r0, #130	@ 0x82
 8001f22:	f000 fa13 	bl	800234c <I2C3_Write>
    HAL_Delay(2);
 8001f26:	2002      	movs	r0, #2
 8001f28:	f000 fbe8 	bl	80026fc <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8001f2c:	1cba      	adds	r2, r7, #2
 8001f2e:	2302      	movs	r3, #2
 8001f30:	2100      	movs	r1, #0
 8001f32:	2082      	movs	r0, #130	@ 0x82
 8001f34:	f000 fa5a 	bl	80023ec <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	0a1b      	lsrs	r3, r3, #8
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	f640 0211 	movw	r2, #2065	@ 0x811
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d001      	beq.n	8001f58 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e075      	b.n	8002044 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8001f58:	2202      	movs	r2, #2
 8001f5a:	2103      	movs	r1, #3
 8001f5c:	2082      	movs	r0, #130	@ 0x82
 8001f5e:	f000 f9f5 	bl	800234c <I2C3_Write>
    HAL_Delay(5);
 8001f62:	2005      	movs	r0, #5
 8001f64:	f000 fbca 	bl	80026fc <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	2082      	movs	r0, #130	@ 0x82
 8001f6e:	f000 f9ed 	bl	800234c <I2C3_Write>
    HAL_Delay(2);
 8001f72:	2002      	movs	r0, #2
 8001f74:	f000 fbc2 	bl	80026fc <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001f78:	2004      	movs	r0, #4
 8001f7a:	f000 f867 	bl	800204c <STMPE811_Read>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8001f82:	797b      	ldrb	r3, [r7, #5]
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001f8a:	797b      	ldrb	r3, [r7, #5]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2104      	movs	r1, #4
 8001f90:	2082      	movs	r0, #130	@ 0x82
 8001f92:	f000 f9db 	bl	800234c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8001f96:	2004      	movs	r0, #4
 8001f98:	f000 f858 	bl	800204c <STMPE811_Read>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8001fa0:	797b      	ldrb	r3, [r7, #5]
 8001fa2:	f023 0302 	bic.w	r3, r3, #2
 8001fa6:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8001fa8:	797b      	ldrb	r3, [r7, #5]
 8001faa:	461a      	mov	r2, r3
 8001fac:	2104      	movs	r1, #4
 8001fae:	2082      	movs	r0, #130	@ 0x82
 8001fb0:	f000 f9cc 	bl	800234c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8001fb4:	2249      	movs	r2, #73	@ 0x49
 8001fb6:	2120      	movs	r1, #32
 8001fb8:	2082      	movs	r0, #130	@ 0x82
 8001fba:	f000 f9c7 	bl	800234c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8001fbe:	2002      	movs	r0, #2
 8001fc0:	f000 fb9c 	bl	80026fc <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2121      	movs	r1, #33	@ 0x21
 8001fc8:	2082      	movs	r0, #130	@ 0x82
 8001fca:	f000 f9bf 	bl	800234c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8001fce:	2017      	movs	r0, #23
 8001fd0:	f000 f83c 	bl	800204c <STMPE811_Read>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8001fd8:	797b      	ldrb	r3, [r7, #5]
 8001fda:	f043 031e 	orr.w	r3, r3, #30
 8001fde:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8001fe0:	797b      	ldrb	r3, [r7, #5]
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	2117      	movs	r1, #23
 8001fe6:	2082      	movs	r0, #130	@ 0x82
 8001fe8:	f000 f9b0 	bl	800234c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8001fec:	229a      	movs	r2, #154	@ 0x9a
 8001fee:	2141      	movs	r1, #65	@ 0x41
 8001ff0:	2082      	movs	r0, #130	@ 0x82
 8001ff2:	f000 f9ab 	bl	800234c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	214a      	movs	r1, #74	@ 0x4a
 8001ffa:	2082      	movs	r0, #130	@ 0x82
 8001ffc:	f000 f9a6 	bl	800234c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002000:	2201      	movs	r2, #1
 8002002:	214b      	movs	r1, #75	@ 0x4b
 8002004:	2082      	movs	r0, #130	@ 0x82
 8002006:	f000 f9a1 	bl	800234c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800200a:	2200      	movs	r2, #0
 800200c:	214b      	movs	r1, #75	@ 0x4b
 800200e:	2082      	movs	r0, #130	@ 0x82
 8002010:	f000 f99c 	bl	800234c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002014:	2201      	movs	r2, #1
 8002016:	2156      	movs	r1, #86	@ 0x56
 8002018:	2082      	movs	r0, #130	@ 0x82
 800201a:	f000 f997 	bl	800234c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 800201e:	2201      	movs	r2, #1
 8002020:	2158      	movs	r1, #88	@ 0x58
 8002022:	2082      	movs	r0, #130	@ 0x82
 8002024:	f000 f992 	bl	800234c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002028:	2203      	movs	r2, #3
 800202a:	2140      	movs	r1, #64	@ 0x40
 800202c:	2082      	movs	r0, #130	@ 0x82
 800202e:	f000 f98d 	bl	800234c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002032:	22ff      	movs	r2, #255	@ 0xff
 8002034:	210b      	movs	r1, #11
 8002036:	2082      	movs	r0, #130	@ 0x82
 8002038:	f000 f988 	bl	800234c <I2C3_Write>
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800203c:	20c8      	movs	r0, #200	@ 0xc8
 800203e:	f000 fb5d 	bl	80026fc <HAL_Delay>

    return STMPE811_State_Ok;
 8002042:	2302      	movs	r3, #2

}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002056:	f107 020f 	add.w	r2, r7, #15
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4619      	mov	r1, r3
 800205e:	2082      	movs	r0, #130	@ 0x82
 8002060:	f000 f99e 	bl	80023a0 <I2C3_Read>

    return readData;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	791a      	ldrb	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 800207e:	2040      	movs	r0, #64	@ 0x40
 8002080:	f7ff ffe4 	bl	800204c <STMPE811_Read>
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0e      	blt.n	80020ae <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002096:	2201      	movs	r2, #1
 8002098:	214b      	movs	r1, #75	@ 0x4b
 800209a:	2082      	movs	r0, #130	@ 0x82
 800209c:	f000 f956 	bl	800234c <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80020a0:	2200      	movs	r2, #0
 80020a2:	214b      	movs	r1, #75	@ 0x4b
 80020a4:	2082      	movs	r0, #130	@ 0x82
 80020a6:	f000 f951 	bl	800234c <I2C3_Write>

        return STMPE811_State_Released;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0a7      	b.n	80021fe <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	799b      	ldrb	r3, [r3, #6]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d117      	bne.n	80020e6 <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f9b8 	bl	8002430 <TM_STMPE811_ReadX>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	885b      	ldrh	r3, [r3, #2]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fa0b 	bl	80024ec <TM_STMPE811_ReadY>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 80020dc:	3301      	adds	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	805a      	strh	r2, [r3, #2]
 80020e4:	e048      	b.n	8002178 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	799b      	ldrb	r3, [r3, #6]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d112      	bne.n	8002114 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f99c 	bl	8002430 <TM_STMPE811_ReadX>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	885b      	ldrh	r3, [r3, #2]
 8002104:	4618      	mov	r0, r3
 8002106:	f000 f9f1 	bl	80024ec <TM_STMPE811_ReadY>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	805a      	strh	r2, [r3, #2]
 8002112:	e031      	b.n	8002178 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	799b      	ldrb	r3, [r3, #6]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d115      	bne.n	8002148 <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	885b      	ldrh	r3, [r3, #2]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f985 	bl	8002430 <TM_STMPE811_ReadX>
 8002126:	4603      	mov	r3, r0
 8002128:	461a      	mov	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 f9da 	bl	80024ec <TM_STMPE811_ReadY>
 8002138:	4603      	mov	r3, r0
 800213a:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800213e:	3301      	adds	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	e017      	b.n	8002178 <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	799b      	ldrb	r3, [r3, #6]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d113      	bne.n	8002178 <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f96b 	bl	8002430 <TM_STMPE811_ReadX>
 800215a:	4603      	mov	r3, r0
 800215c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002160:	b29a      	uxth	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	881b      	ldrh	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f9be 	bl	80024ec <TM_STMPE811_ReadY>
 8002170:	4603      	mov	r3, r0
 8002172:	461a      	mov	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002178:	2201      	movs	r2, #1
 800217a:	214b      	movs	r1, #75	@ 0x4b
 800217c:	2082      	movs	r0, #130	@ 0x82
 800217e:	f000 f8e5 	bl	800234c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002182:	2200      	movs	r2, #0
 8002184:	214b      	movs	r1, #75	@ 0x4b
 8002186:	2082      	movs	r0, #130	@ 0x82
 8002188:	f000 f8e0 	bl	800234c <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	799b      	ldrb	r3, [r3, #6]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <STMPE811_ReadTouch+0x12e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	799b      	ldrb	r3, [r3, #6]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d115      	bne.n	80021c8 <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d027      	beq.n	80021f4 <STMPE811_ReadTouch+0x186>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	2bee      	cmp	r3, #238	@ 0xee
 80021aa:	d823      	bhi.n	80021f4 <STMPE811_ReadTouch+0x186>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	885b      	ldrh	r3, [r3, #2]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01f      	beq.n	80021f4 <STMPE811_ReadTouch+0x186>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	885b      	ldrh	r3, [r3, #2]
 80021b8:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80021bc:	d81a      	bhi.n	80021f4 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e01a      	b.n	80021fe <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d012      	beq.n	80021f6 <STMPE811_ReadTouch+0x188>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80021d8:	d80d      	bhi.n	80021f6 <STMPE811_ReadTouch+0x188>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	885b      	ldrh	r3, [r3, #2]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <STMPE811_ReadTouch+0x188>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	885b      	ldrh	r3, [r3, #2]
 80021e6:	2bee      	cmp	r3, #238	@ 0xee
 80021e8:	d805      	bhi.n	80021f6 <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e004      	b.n	80021fe <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 80021f4:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 80021fc:	2301      	movs	r3, #1
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <verifyHAL_I2C_IS_OKAY>:
    }
    return true;
}

//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <verifyHAL_I2C_IS_OKAY+0x1c>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20025aac 	.word	0x20025aac

08002228 <I2C3_Init>:

static void I2C3_Init()
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	4b18      	ldr	r3, [pc, #96]	@ (8002294 <I2C3_Init+0x6c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	4a17      	ldr	r2, [pc, #92]	@ (8002294 <I2C3_Init+0x6c>)
 8002238:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800223c:	6413      	str	r3, [r2, #64]	@ 0x40
 800223e:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <I2C3_Init+0x6c>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002242:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800224a:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <I2C3_Init+0x70>)
 800224c:	4a13      	ldr	r2, [pc, #76]	@ (800229c <I2C3_Init+0x74>)
 800224e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002250:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <I2C3_Init+0x70>)
 8002252:	4a13      	ldr	r2, [pc, #76]	@ (80022a0 <I2C3_Init+0x78>)
 8002254:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002256:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <I2C3_Init+0x70>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 800225c:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <I2C3_Init+0x70>)
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002262:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <I2C3_Init+0x70>)
 8002264:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002268:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 800226a:	4b0b      	ldr	r3, [pc, #44]	@ (8002298 <I2C3_Init+0x70>)
 800226c:	2200      	movs	r2, #0
 800226e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002270:	4b09      	ldr	r3, [pc, #36]	@ (8002298 <I2C3_Init+0x70>)
 8002272:	2200      	movs	r2, #0
 8002274:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002276:	4808      	ldr	r0, [pc, #32]	@ (8002298 <I2C3_Init+0x70>)
 8002278:	f000 fe48 	bl	8002f0c <HAL_I2C_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002286:	bf00      	nop
 8002288:	e7fd      	b.n	8002286 <I2C3_Init+0x5e>
    }
    return;
 800228a:	bf00      	nop
}
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800
 8002298:	20025a58 	.word	0x20025a58
 800229c:	40005c00 	.word	0x40005c00
 80022a0:	000186a0 	.word	0x000186a0

080022a4 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022aa:	f107 030c 	add.w	r3, r7, #12
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <I2C3_MspInit+0x9c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002340 <I2C3_MspInit+0x9c>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <I2C3_MspInit+0x9c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <I2C3_MspInit+0x9c>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a18      	ldr	r2, [pc, #96]	@ (8002340 <I2C3_MspInit+0x9c>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b16      	ldr	r3, [pc, #88]	@ (8002340 <I2C3_MspInit+0x9c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80022f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f8:	2312      	movs	r3, #18
 80022fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002304:	2304      	movs	r3, #4
 8002306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	4619      	mov	r1, r3
 800230e:	480d      	ldr	r0, [pc, #52]	@ (8002344 <I2C3_MspInit+0xa0>)
 8002310:	f000 fb2a 	bl	8002968 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002314:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002318:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231a:	2312      	movs	r3, #18
 800231c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002326:	2304      	movs	r3, #4
 8002328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	4619      	mov	r1, r3
 8002330:	4805      	ldr	r0, [pc, #20]	@ (8002348 <I2C3_MspInit+0xa4>)
 8002332:	f000 fb19 	bl	8002968 <HAL_GPIO_Init>
    
}
 8002336:	bf00      	nop
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40020800 	.word	0x40020800
 8002348:	40020000 	.word	0x40020000

0800234c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af04      	add	r7, sp, #16
 8002352:	4603      	mov	r3, r0
 8002354:	80fb      	strh	r3, [r7, #6]
 8002356:	460b      	mov	r3, r1
 8002358:	717b      	strb	r3, [r7, #5]
 800235a:	4613      	mov	r3, r2
 800235c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 800235e:	793b      	ldrb	r3, [r7, #4]
 8002360:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002362:	797b      	ldrb	r3, [r7, #5]
 8002364:	b29a      	uxth	r2, r3
 8002366:	88f9      	ldrh	r1, [r7, #6]
 8002368:	4b0a      	ldr	r3, [pc, #40]	@ (8002394 <I2C3_Write+0x48>)
 800236a:	9302      	str	r3, [sp, #8]
 800236c:	2301      	movs	r3, #1
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	f107 030f 	add.w	r3, r7, #15
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2301      	movs	r3, #1
 8002378:	4807      	ldr	r0, [pc, #28]	@ (8002398 <I2C3_Write+0x4c>)
 800237a:	f000 ff0b 	bl	8003194 <HAL_I2C_Mem_Write>
 800237e:	4603      	mov	r3, r0
 8002380:	461a      	mov	r2, r3
 8002382:	4b06      	ldr	r3, [pc, #24]	@ (800239c <I2C3_Write+0x50>)
 8002384:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002386:	f7ff ff3f 	bl	8002208 <verifyHAL_I2C_IS_OKAY>
}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	0003d090 	.word	0x0003d090
 8002398:	20025a58 	.word	0x20025a58
 800239c:	20025aac 	.word	0x20025aac

080023a0 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af04      	add	r7, sp, #16
 80023a6:	4603      	mov	r3, r0
 80023a8:	603a      	str	r2, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
 80023ac:	460b      	mov	r3, r1
 80023ae:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	b299      	uxth	r1, r3
 80023b4:	79bb      	ldrb	r3, [r7, #6]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <I2C3_Read+0x40>)
 80023ba:	9302      	str	r3, [sp, #8]
 80023bc:	2301      	movs	r3, #1
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2301      	movs	r3, #1
 80023c6:	4807      	ldr	r0, [pc, #28]	@ (80023e4 <I2C3_Read+0x44>)
 80023c8:	f000 ffde 	bl	8003388 <HAL_I2C_Mem_Read>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <I2C3_Read+0x48>)
 80023d2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80023d4:	f7ff ff18 	bl	8002208 <verifyHAL_I2C_IS_OKAY>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	0003d090 	.word	0x0003d090
 80023e4:	20025a58 	.word	0x20025a58
 80023e8:	20025aac 	.word	0x20025aac

080023ec <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af04      	add	r7, sp, #16
 80023f2:	603a      	str	r2, [r7, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
 80023fa:	460b      	mov	r3, r1
 80023fc:	71bb      	strb	r3, [r7, #6]
 80023fe:	4613      	mov	r3, r2
 8002400:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	b299      	uxth	r1, r3
 8002406:	79bb      	ldrb	r3, [r7, #6]
 8002408:	b29a      	uxth	r2, r3
 800240a:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <I2C3_MulitByteRead+0x3c>)
 800240c:	9302      	str	r3, [sp, #8]
 800240e:	88bb      	ldrh	r3, [r7, #4]
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2301      	movs	r3, #1
 8002418:	4804      	ldr	r0, [pc, #16]	@ (800242c <I2C3_MulitByteRead+0x40>)
 800241a:	f000 ffb5 	bl	8003388 <HAL_I2C_Mem_Read>
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	0003d090 	.word	0x0003d090
 800242c:	20025a58 	.word	0x20025a58

08002430 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800243a:	204d      	movs	r0, #77	@ 0x4d
 800243c:	f7ff fe06 	bl	800204c <STMPE811_Read>
 8002440:	4603      	mov	r3, r0
 8002442:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002444:	204e      	movs	r0, #78	@ 0x4e
 8002446:	f7ff fe01 	bl	800204c <STMPE811_Read>
 800244a:	4603      	mov	r3, r0
 800244c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800244e:	7a7b      	ldrb	r3, [r7, #9]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b21a      	sxth	r2, r3
 8002454:	7a3b      	ldrb	r3, [r7, #8]
 8002456:	b21b      	sxth	r3, r3
 8002458:	4313      	orrs	r3, r2
 800245a:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 800245c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002460:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002464:	4293      	cmp	r3, r2
 8002466:	dc06      	bgt.n	8002476 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002468:	89fb      	ldrh	r3, [r7, #14]
 800246a:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 800246e:	330c      	adds	r3, #12
 8002470:	b29b      	uxth	r3, r3
 8002472:	81fb      	strh	r3, [r7, #14]
 8002474:	e005      	b.n	8002482 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002476:	89fb      	ldrh	r3, [r7, #14]
 8002478:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 800247c:	3308      	adds	r3, #8
 800247e:	b29b      	uxth	r3, r3
 8002480:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002482:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002486:	4a18      	ldr	r2, [pc, #96]	@ (80024e8 <TM_STMPE811_ReadX+0xb8>)
 8002488:	fb82 1203 	smull	r1, r2, r2, r3
 800248c:	441a      	add	r2, r3
 800248e:	10d2      	asrs	r2, r2, #3
 8002490:	17db      	asrs	r3, r3, #31
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002496:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800249a:	2bef      	cmp	r3, #239	@ 0xef
 800249c:	dd02      	ble.n	80024a4 <TM_STMPE811_ReadX+0x74>
        val = 239;
 800249e:	23ef      	movs	r3, #239	@ 0xef
 80024a0:	81fb      	strh	r3, [r7, #14]
 80024a2:	e005      	b.n	80024b0 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80024a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	da01      	bge.n	80024b0 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80024b0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	dd05      	ble.n	80024c6 <TM_STMPE811_ReadX+0x96>
 80024ba:	89fa      	ldrh	r2, [r7, #14]
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	e004      	b.n	80024d0 <TM_STMPE811_ReadX+0xa0>
 80024c6:	89fb      	ldrh	r3, [r7, #14]
 80024c8:	88fa      	ldrh	r2, [r7, #6]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 80024d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	dd01      	ble.n	80024de <TM_STMPE811_ReadX+0xae>
        return val;
 80024da:	89fb      	ldrh	r3, [r7, #14]
 80024dc:	e000      	b.n	80024e0 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 80024de:	88fb      	ldrh	r3, [r7, #6]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	88888889 	.word	0x88888889

080024ec <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 80024f6:	204f      	movs	r0, #79	@ 0x4f
 80024f8:	f7ff fda8 	bl	800204c <STMPE811_Read>
 80024fc:	4603      	mov	r3, r0
 80024fe:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002500:	2050      	movs	r0, #80	@ 0x50
 8002502:	f7ff fda3 	bl	800204c <STMPE811_Read>
 8002506:	4603      	mov	r3, r0
 8002508:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800250a:	7a7b      	ldrb	r3, [r7, #9]
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	b21a      	sxth	r2, r3
 8002510:	7a3b      	ldrb	r3, [r7, #8]
 8002512:	b21b      	sxth	r3, r3
 8002514:	4313      	orrs	r3, r2
 8002516:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002518:	89fb      	ldrh	r3, [r7, #14]
 800251a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800251e:	b29b      	uxth	r3, r3
 8002520:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002522:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002526:	4a19      	ldr	r2, [pc, #100]	@ (800258c <TM_STMPE811_ReadY+0xa0>)
 8002528:	fb82 1203 	smull	r1, r2, r2, r3
 800252c:	1052      	asrs	r2, r2, #1
 800252e:	17db      	asrs	r3, r3, #31
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002534:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002538:	2b00      	cmp	r3, #0
 800253a:	dc02      	bgt.n	8002542 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	81fb      	strh	r3, [r7, #14]
 8002540:	e007      	b.n	8002552 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002546:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800254a:	db02      	blt.n	8002552 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800254c:	f240 133f 	movw	r3, #319	@ 0x13f
 8002550:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002552:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	429a      	cmp	r2, r3
 800255a:	dd05      	ble.n	8002568 <TM_STMPE811_ReadY+0x7c>
 800255c:	89fa      	ldrh	r2, [r7, #14]
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	b29b      	uxth	r3, r3
 8002564:	b21b      	sxth	r3, r3
 8002566:	e004      	b.n	8002572 <TM_STMPE811_ReadY+0x86>
 8002568:	89fb      	ldrh	r3, [r7, #14]
 800256a:	88fa      	ldrh	r2, [r7, #6]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	b29b      	uxth	r3, r3
 8002570:	b21b      	sxth	r3, r3
 8002572:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002578:	2b04      	cmp	r3, #4
 800257a:	dd01      	ble.n	8002580 <TM_STMPE811_ReadY+0x94>
        return val;
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	e000      	b.n	8002582 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002580:	88fb      	ldrh	r3, [r7, #6]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2e8ba2e9 	.word	0x2e8ba2e9

08002590 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <SystemInit+0x20>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025aa:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <SystemInit+0x20>)
 80025ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025c8:	f7ff ffea 	bl	80025a0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025cc:	480c      	ldr	r0, [pc, #48]	@ (8002600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025ce:	490d      	ldr	r1, [pc, #52]	@ (8002604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d4:	e002      	b.n	80025dc <LoopCopyDataInit>

080025d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025da:	3304      	adds	r3, #4

080025dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e0:	d3f9      	bcc.n	80025d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e2:	4a0a      	ldr	r2, [pc, #40]	@ (800260c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e8:	e001      	b.n	80025ee <LoopFillZerobss>

080025ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ec:	3204      	adds	r2, #4

080025ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f0:	d3fb      	bcc.n	80025ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80025f2:	f003 f881 	bl	80056f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025f6:	f7ff f97c 	bl	80018f2 <main>
  bx  lr    
 80025fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002604:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002608:	08006950 	.word	0x08006950
  ldr r2, =_sbss
 800260c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002610:	20025ab4 	.word	0x20025ab4

08002614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002614:	e7fe      	b.n	8002614 <ADC_IRQHandler>
	...

08002618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800261c:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0d      	ldr	r2, [pc, #52]	@ (8002658 <HAL_Init+0x40>)
 8002622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002628:	4b0b      	ldr	r3, [pc, #44]	@ (8002658 <HAL_Init+0x40>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <HAL_Init+0x40>)
 800262e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002634:	4b08      	ldr	r3, [pc, #32]	@ (8002658 <HAL_Init+0x40>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a07      	ldr	r2, [pc, #28]	@ (8002658 <HAL_Init+0x40>)
 800263a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002640:	2003      	movs	r0, #3
 8002642:	f000 f94f 	bl	80028e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002646:	2000      	movs	r0, #0
 8002648:	f000 f808 	bl	800265c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800264c:	f7ff fa08 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023c00 	.word	0x40023c00

0800265c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002664:	4b12      	ldr	r3, [pc, #72]	@ (80026b0 <HAL_InitTick+0x54>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <HAL_InitTick+0x58>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4619      	mov	r1, r3
 800266e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002672:	fbb3 f3f1 	udiv	r3, r3, r1
 8002676:	fbb2 f3f3 	udiv	r3, r2, r3
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f967 	bl	800294e <HAL_SYSTICK_Config>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e00e      	b.n	80026a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b0f      	cmp	r3, #15
 800268e:	d80a      	bhi.n	80026a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002690:	2200      	movs	r2, #0
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	f000 f92f 	bl	80028fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800269c:	4a06      	ldr	r2, [pc, #24]	@ (80026b8 <HAL_InitTick+0x5c>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000010 	.word	0x20000010
 80026b4:	20000018 	.word	0x20000018
 80026b8:	20000014 	.word	0x20000014

080026bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c0:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <HAL_IncTick+0x20>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_IncTick+0x24>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4413      	add	r3, r2
 80026cc:	4a04      	ldr	r2, [pc, #16]	@ (80026e0 <HAL_IncTick+0x24>)
 80026ce:	6013      	str	r3, [r2, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000018 	.word	0x20000018
 80026e0:	20025ab0 	.word	0x20025ab0

080026e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return uwTick;
 80026e8:	4b03      	ldr	r3, [pc, #12]	@ (80026f8 <HAL_GetTick+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20025ab0 	.word	0x20025ab0

080026fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff ffee 	bl	80026e4 <HAL_GetTick>
 8002708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002714:	d005      	beq.n	8002722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002716:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <HAL_Delay+0x44>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4413      	add	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002722:	bf00      	nop
 8002724:	f7ff ffde 	bl	80026e4 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	429a      	cmp	r2, r3
 8002732:	d8f7      	bhi.n	8002724 <HAL_Delay+0x28>
  {
  }
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000018 	.word	0x20000018

08002744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0c      	ldr	r3, [pc, #48]	@ (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800276c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	@ (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db0b      	blt.n	80027d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4907      	ldr	r1, [pc, #28]	@ (80027e0 <__NVIC_EnableIRQ+0x38>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2001      	movs	r0, #1
 80027ca:	fa00 f202 	lsl.w	r2, r0, r2
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	@ (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	@ (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	@ 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	@ 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028b0:	d301      	bcc.n	80028b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00f      	b.n	80028d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b6:	4a0a      	ldr	r2, [pc, #40]	@ (80028e0 <SysTick_Config+0x40>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028be:	210f      	movs	r1, #15
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f7ff ff8e 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <SysTick_Config+0x40>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ce:	4b04      	ldr	r3, [pc, #16]	@ (80028e0 <SysTick_Config+0x40>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff29 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800290c:	f7ff ff3e 	bl	800278c <__NVIC_GetPriorityGrouping>
 8002910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f7ff ff8e 	bl	8002838 <NVIC_EncodePriority>
 800291c:	4602      	mov	r2, r0
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff5d 	bl	80027e4 <__NVIC_SetPriority>
}
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff31 	bl	80027a8 <__NVIC_EnableIRQ>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ffa2 	bl	80028a0 <SysTick_Config>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	@ 0x24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e177      	b.n	8002c74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002984:	2201      	movs	r2, #1
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	429a      	cmp	r2, r3
 800299e:	f040 8166 	bne.w	8002c6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d005      	beq.n	80029ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d130      	bne.n	8002a1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2203      	movs	r2, #3
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f0:	2201      	movs	r2, #1
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 0201 	and.w	r2, r3, #1
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d017      	beq.n	8002a58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d123      	bne.n	8002aac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	08da      	lsrs	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3208      	adds	r2, #8
 8002a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	220f      	movs	r2, #15
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	08da      	lsrs	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3208      	adds	r2, #8
 8002aa6:	69b9      	ldr	r1, [r7, #24]
 8002aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0203 	and.w	r2, r3, #3
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80c0 	beq.w	8002c6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b66      	ldr	r3, [pc, #408]	@ (8002c8c <HAL_GPIO_Init+0x324>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	4a65      	ldr	r2, [pc, #404]	@ (8002c8c <HAL_GPIO_Init+0x324>)
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afe:	4b63      	ldr	r3, [pc, #396]	@ (8002c8c <HAL_GPIO_Init+0x324>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b0a:	4a61      	ldr	r2, [pc, #388]	@ (8002c90 <HAL_GPIO_Init+0x328>)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	3302      	adds	r3, #2
 8002b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	220f      	movs	r2, #15
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a58      	ldr	r2, [pc, #352]	@ (8002c94 <HAL_GPIO_Init+0x32c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d037      	beq.n	8002ba6 <HAL_GPIO_Init+0x23e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a57      	ldr	r2, [pc, #348]	@ (8002c98 <HAL_GPIO_Init+0x330>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d031      	beq.n	8002ba2 <HAL_GPIO_Init+0x23a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a56      	ldr	r2, [pc, #344]	@ (8002c9c <HAL_GPIO_Init+0x334>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d02b      	beq.n	8002b9e <HAL_GPIO_Init+0x236>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a55      	ldr	r2, [pc, #340]	@ (8002ca0 <HAL_GPIO_Init+0x338>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d025      	beq.n	8002b9a <HAL_GPIO_Init+0x232>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a54      	ldr	r2, [pc, #336]	@ (8002ca4 <HAL_GPIO_Init+0x33c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01f      	beq.n	8002b96 <HAL_GPIO_Init+0x22e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a53      	ldr	r2, [pc, #332]	@ (8002ca8 <HAL_GPIO_Init+0x340>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d019      	beq.n	8002b92 <HAL_GPIO_Init+0x22a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a52      	ldr	r2, [pc, #328]	@ (8002cac <HAL_GPIO_Init+0x344>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_GPIO_Init+0x226>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a51      	ldr	r2, [pc, #324]	@ (8002cb0 <HAL_GPIO_Init+0x348>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00d      	beq.n	8002b8a <HAL_GPIO_Init+0x222>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a50      	ldr	r2, [pc, #320]	@ (8002cb4 <HAL_GPIO_Init+0x34c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <HAL_GPIO_Init+0x21e>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4f      	ldr	r2, [pc, #316]	@ (8002cb8 <HAL_GPIO_Init+0x350>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_GPIO_Init+0x21a>
 8002b7e:	2309      	movs	r3, #9
 8002b80:	e012      	b.n	8002ba8 <HAL_GPIO_Init+0x240>
 8002b82:	230a      	movs	r3, #10
 8002b84:	e010      	b.n	8002ba8 <HAL_GPIO_Init+0x240>
 8002b86:	2308      	movs	r3, #8
 8002b88:	e00e      	b.n	8002ba8 <HAL_GPIO_Init+0x240>
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	e00c      	b.n	8002ba8 <HAL_GPIO_Init+0x240>
 8002b8e:	2306      	movs	r3, #6
 8002b90:	e00a      	b.n	8002ba8 <HAL_GPIO_Init+0x240>
 8002b92:	2305      	movs	r3, #5
 8002b94:	e008      	b.n	8002ba8 <HAL_GPIO_Init+0x240>
 8002b96:	2304      	movs	r3, #4
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_Init+0x240>
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e004      	b.n	8002ba8 <HAL_GPIO_Init+0x240>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e002      	b.n	8002ba8 <HAL_GPIO_Init+0x240>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_GPIO_Init+0x240>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	f002 0203 	and.w	r2, r2, #3
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	4093      	lsls	r3, r2
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bb8:	4935      	ldr	r1, [pc, #212]	@ (8002c90 <HAL_GPIO_Init+0x328>)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cbc <HAL_GPIO_Init+0x354>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bea:	4a34      	ldr	r2, [pc, #208]	@ (8002cbc <HAL_GPIO_Init+0x354>)
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf0:	4b32      	ldr	r3, [pc, #200]	@ (8002cbc <HAL_GPIO_Init+0x354>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c14:	4a29      	ldr	r2, [pc, #164]	@ (8002cbc <HAL_GPIO_Init+0x354>)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c1a:	4b28      	ldr	r3, [pc, #160]	@ (8002cbc <HAL_GPIO_Init+0x354>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cbc <HAL_GPIO_Init+0x354>)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <HAL_GPIO_Init+0x354>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c68:	4a14      	ldr	r2, [pc, #80]	@ (8002cbc <HAL_GPIO_Init+0x354>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3301      	adds	r3, #1
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	f67f ae84 	bls.w	8002984 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	3724      	adds	r7, #36	@ 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40013800 	.word	0x40013800
 8002c94:	40020000 	.word	0x40020000
 8002c98:	40020400 	.word	0x40020400
 8002c9c:	40020800 	.word	0x40020800
 8002ca0:	40020c00 	.word	0x40020c00
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40021400 	.word	0x40021400
 8002cac:	40021800 	.word	0x40021800
 8002cb0:	40021c00 	.word	0x40021c00
 8002cb4:	40022000 	.word	0x40022000
 8002cb8:	40022400 	.word	0x40022400
 8002cbc:	40013c00 	.word	0x40013c00

08002cc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e0d9      	b.n	8002e90 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	f040 80c9 	bne.w	8002e8a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002cf8:	4a6b      	ldr	r2, [pc, #428]	@ (8002ea8 <HAL_GPIO_DeInit+0x1e8>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d04:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a63      	ldr	r2, [pc, #396]	@ (8002eac <HAL_GPIO_DeInit+0x1ec>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d037      	beq.n	8002d92 <HAL_GPIO_DeInit+0xd2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a62      	ldr	r2, [pc, #392]	@ (8002eb0 <HAL_GPIO_DeInit+0x1f0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d031      	beq.n	8002d8e <HAL_GPIO_DeInit+0xce>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a61      	ldr	r2, [pc, #388]	@ (8002eb4 <HAL_GPIO_DeInit+0x1f4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d02b      	beq.n	8002d8a <HAL_GPIO_DeInit+0xca>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a60      	ldr	r2, [pc, #384]	@ (8002eb8 <HAL_GPIO_DeInit+0x1f8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d025      	beq.n	8002d86 <HAL_GPIO_DeInit+0xc6>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a5f      	ldr	r2, [pc, #380]	@ (8002ebc <HAL_GPIO_DeInit+0x1fc>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d01f      	beq.n	8002d82 <HAL_GPIO_DeInit+0xc2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a5e      	ldr	r2, [pc, #376]	@ (8002ec0 <HAL_GPIO_DeInit+0x200>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d019      	beq.n	8002d7e <HAL_GPIO_DeInit+0xbe>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ec4 <HAL_GPIO_DeInit+0x204>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d013      	beq.n	8002d7a <HAL_GPIO_DeInit+0xba>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a5c      	ldr	r2, [pc, #368]	@ (8002ec8 <HAL_GPIO_DeInit+0x208>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00d      	beq.n	8002d76 <HAL_GPIO_DeInit+0xb6>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a5b      	ldr	r2, [pc, #364]	@ (8002ecc <HAL_GPIO_DeInit+0x20c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <HAL_GPIO_DeInit+0xb2>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed0 <HAL_GPIO_DeInit+0x210>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_GPIO_DeInit+0xae>
 8002d6a:	2309      	movs	r3, #9
 8002d6c:	e012      	b.n	8002d94 <HAL_GPIO_DeInit+0xd4>
 8002d6e:	230a      	movs	r3, #10
 8002d70:	e010      	b.n	8002d94 <HAL_GPIO_DeInit+0xd4>
 8002d72:	2308      	movs	r3, #8
 8002d74:	e00e      	b.n	8002d94 <HAL_GPIO_DeInit+0xd4>
 8002d76:	2307      	movs	r3, #7
 8002d78:	e00c      	b.n	8002d94 <HAL_GPIO_DeInit+0xd4>
 8002d7a:	2306      	movs	r3, #6
 8002d7c:	e00a      	b.n	8002d94 <HAL_GPIO_DeInit+0xd4>
 8002d7e:	2305      	movs	r3, #5
 8002d80:	e008      	b.n	8002d94 <HAL_GPIO_DeInit+0xd4>
 8002d82:	2304      	movs	r3, #4
 8002d84:	e006      	b.n	8002d94 <HAL_GPIO_DeInit+0xd4>
 8002d86:	2303      	movs	r3, #3
 8002d88:	e004      	b.n	8002d94 <HAL_GPIO_DeInit+0xd4>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e002      	b.n	8002d94 <HAL_GPIO_DeInit+0xd4>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_GPIO_DeInit+0xd4>
 8002d92:	2300      	movs	r3, #0
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	f002 0203 	and.w	r2, r2, #3
 8002d9a:	0092      	lsls	r2, r2, #2
 8002d9c:	4093      	lsls	r3, r2
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d132      	bne.n	8002e0a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002da4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed4 <HAL_GPIO_DeInit+0x214>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	4949      	ldr	r1, [pc, #292]	@ (8002ed4 <HAL_GPIO_DeInit+0x214>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002db2:	4b48      	ldr	r3, [pc, #288]	@ (8002ed4 <HAL_GPIO_DeInit+0x214>)
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	4946      	ldr	r1, [pc, #280]	@ (8002ed4 <HAL_GPIO_DeInit+0x214>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002dc0:	4b44      	ldr	r3, [pc, #272]	@ (8002ed4 <HAL_GPIO_DeInit+0x214>)
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	4942      	ldr	r1, [pc, #264]	@ (8002ed4 <HAL_GPIO_DeInit+0x214>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002dce:	4b41      	ldr	r3, [pc, #260]	@ (8002ed4 <HAL_GPIO_DeInit+0x214>)
 8002dd0:	689a      	ldr	r2, [r3, #8]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	493f      	ldr	r1, [pc, #252]	@ (8002ed4 <HAL_GPIO_DeInit+0x214>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	220f      	movs	r2, #15
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002dec:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea8 <HAL_GPIO_DeInit+0x1e8>)
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	3302      	adds	r3, #2
 8002df4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	482a      	ldr	r0, [pc, #168]	@ (8002ea8 <HAL_GPIO_DeInit+0x1e8>)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	400a      	ands	r2, r1
 8002e04:	3302      	adds	r3, #2
 8002e06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2103      	movs	r1, #3
 8002e14:	fa01 f303 	lsl.w	r3, r1, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	08da      	lsrs	r2, r3, #3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3208      	adds	r2, #8
 8002e28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	220f      	movs	r2, #15
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	08d2      	lsrs	r2, r2, #3
 8002e40:	4019      	ands	r1, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	3208      	adds	r2, #8
 8002e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2103      	movs	r1, #3
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	401a      	ands	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	2101      	movs	r1, #1
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	401a      	ands	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	2103      	movs	r1, #3
 8002e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	401a      	ands	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b0f      	cmp	r3, #15
 8002e94:	f67f af22 	bls.w	8002cdc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40013800 	.word	0x40013800
 8002eac:	40020000 	.word	0x40020000
 8002eb0:	40020400 	.word	0x40020400
 8002eb4:	40020800 	.word	0x40020800
 8002eb8:	40020c00 	.word	0x40020c00
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40021400 	.word	0x40021400
 8002ec4:	40021800 	.word	0x40021800
 8002ec8:	40021c00 	.word	0x40021c00
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	40022400 	.word	0x40022400
 8002ed4:	40013c00 	.word	0x40013c00

08002ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	807b      	strh	r3, [r7, #2]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee8:	787b      	ldrb	r3, [r7, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eee:	887a      	ldrh	r2, [r7, #2]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ef4:	e003      	b.n	8002efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ef6:	887b      	ldrh	r3, [r7, #2]
 8002ef8:	041a      	lsls	r2, r3, #16
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	619a      	str	r2, [r3, #24]
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e12b      	b.n	8003176 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fe fdbc 	bl	8001ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2224      	movs	r2, #36	@ 0x24
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f70:	f001 ff06 	bl	8004d80 <HAL_RCC_GetPCLK1Freq>
 8002f74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4a81      	ldr	r2, [pc, #516]	@ (8003180 <HAL_I2C_Init+0x274>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d807      	bhi.n	8002f90 <HAL_I2C_Init+0x84>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4a80      	ldr	r2, [pc, #512]	@ (8003184 <HAL_I2C_Init+0x278>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	bf94      	ite	ls
 8002f88:	2301      	movls	r3, #1
 8002f8a:	2300      	movhi	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e006      	b.n	8002f9e <HAL_I2C_Init+0x92>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4a7d      	ldr	r2, [pc, #500]	@ (8003188 <HAL_I2C_Init+0x27c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	bf94      	ite	ls
 8002f98:	2301      	movls	r3, #1
 8002f9a:	2300      	movhi	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0e7      	b.n	8003176 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	4a78      	ldr	r2, [pc, #480]	@ (800318c <HAL_I2C_Init+0x280>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0c9b      	lsrs	r3, r3, #18
 8002fb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a6a      	ldr	r2, [pc, #424]	@ (8003180 <HAL_I2C_Init+0x274>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d802      	bhi.n	8002fe0 <HAL_I2C_Init+0xd4>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	e009      	b.n	8002ff4 <HAL_I2C_Init+0xe8>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fe6:	fb02 f303 	mul.w	r3, r2, r3
 8002fea:	4a69      	ldr	r2, [pc, #420]	@ (8003190 <HAL_I2C_Init+0x284>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003006:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	495c      	ldr	r1, [pc, #368]	@ (8003180 <HAL_I2C_Init+0x274>)
 8003010:	428b      	cmp	r3, r1
 8003012:	d819      	bhi.n	8003048 <HAL_I2C_Init+0x13c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e59      	subs	r1, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003022:	1c59      	adds	r1, r3, #1
 8003024:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003028:	400b      	ands	r3, r1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <HAL_I2C_Init+0x138>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	1e59      	subs	r1, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fbb1 f3f3 	udiv	r3, r1, r3
 800303c:	3301      	adds	r3, #1
 800303e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003042:	e051      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 8003044:	2304      	movs	r3, #4
 8003046:	e04f      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <HAL_I2C_Init+0x168>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1e58      	subs	r0, r3, #1
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	440b      	add	r3, r1
 800305e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003062:	3301      	adds	r3, #1
 8003064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003068:	2b00      	cmp	r3, #0
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e012      	b.n	800309a <HAL_I2C_Init+0x18e>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1e58      	subs	r0, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	460b      	mov	r3, r1
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	0099      	lsls	r1, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	fbb0 f3f3 	udiv	r3, r0, r3
 800308a:	3301      	adds	r3, #1
 800308c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Init+0x196>
 800309e:	2301      	movs	r3, #1
 80030a0:	e022      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10e      	bne.n	80030c8 <HAL_I2C_Init+0x1bc>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	1e58      	subs	r0, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	460b      	mov	r3, r1
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	440b      	add	r3, r1
 80030b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030c6:	e00f      	b.n	80030e8 <HAL_I2C_Init+0x1dc>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	1e58      	subs	r0, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6859      	ldr	r1, [r3, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	0099      	lsls	r1, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	fbb0 f3f3 	udiv	r3, r0, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	6809      	ldr	r1, [r1, #0]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69da      	ldr	r2, [r3, #28]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003116:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6911      	ldr	r1, [r2, #16]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68d2      	ldr	r2, [r2, #12]
 8003122:	4311      	orrs	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	430b      	orrs	r3, r1
 800312a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	000186a0 	.word	0x000186a0
 8003184:	001e847f 	.word	0x001e847f
 8003188:	003d08ff 	.word	0x003d08ff
 800318c:	431bde83 	.word	0x431bde83
 8003190:	10624dd3 	.word	0x10624dd3

08003194 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af02      	add	r7, sp, #8
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	4608      	mov	r0, r1
 800319e:	4611      	mov	r1, r2
 80031a0:	461a      	mov	r2, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	817b      	strh	r3, [r7, #10]
 80031a6:	460b      	mov	r3, r1
 80031a8:	813b      	strh	r3, [r7, #8]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ae:	f7ff fa99 	bl	80026e4 <HAL_GetTick>
 80031b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b20      	cmp	r3, #32
 80031be:	f040 80d9 	bne.w	8003374 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2319      	movs	r3, #25
 80031c8:	2201      	movs	r2, #1
 80031ca:	496d      	ldr	r1, [pc, #436]	@ (8003380 <HAL_I2C_Mem_Write+0x1ec>)
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 fc8b 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d001      	beq.n	80031dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
 80031da:	e0cc      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_I2C_Mem_Write+0x56>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e0c5      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d007      	beq.n	8003210 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800321e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2221      	movs	r2, #33	@ 0x21
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2240      	movs	r2, #64	@ 0x40
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a3a      	ldr	r2, [r7, #32]
 800323a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003240:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003246:	b29a      	uxth	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4a4d      	ldr	r2, [pc, #308]	@ (8003384 <HAL_I2C_Mem_Write+0x1f0>)
 8003250:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003252:	88f8      	ldrh	r0, [r7, #6]
 8003254:	893a      	ldrh	r2, [r7, #8]
 8003256:	8979      	ldrh	r1, [r7, #10]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	4603      	mov	r3, r0
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fac2 	bl	80037ec <I2C_RequestMemoryWrite>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d052      	beq.n	8003314 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e081      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 fd50 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00d      	beq.n	800329e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	2b04      	cmp	r3, #4
 8003288:	d107      	bne.n	800329a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003298:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e06b      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d11b      	bne.n	8003314 <HAL_I2C_Mem_Write+0x180>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d017      	beq.n	8003314 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	781a      	ldrb	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fe:	3b01      	subs	r3, #1
 8003300:	b29a      	uxth	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	3b01      	subs	r3, #1
 800330e:	b29a      	uxth	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1aa      	bne.n	8003272 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fd43 	bl	8003dac <I2C_WaitOnBTFFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	2b04      	cmp	r3, #4
 8003332:	d107      	bne.n	8003344 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003342:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e016      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	e000      	b.n	8003376 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003374:	2302      	movs	r3, #2
  }
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	00100002 	.word	0x00100002
 8003384:	ffff0000 	.word	0xffff0000

08003388 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08c      	sub	sp, #48	@ 0x30
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4603      	mov	r3, r0
 8003398:	817b      	strh	r3, [r7, #10]
 800339a:	460b      	mov	r3, r1
 800339c:	813b      	strh	r3, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033a2:	f7ff f99f 	bl	80026e4 <HAL_GetTick>
 80033a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	f040 8214 	bne.w	80037de <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2319      	movs	r3, #25
 80033bc:	2201      	movs	r2, #1
 80033be:	497b      	ldr	r1, [pc, #492]	@ (80035ac <HAL_I2C_Mem_Read+0x224>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fb91 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
 80033ce:	e207      	b.n	80037e0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_I2C_Mem_Read+0x56>
 80033da:	2302      	movs	r3, #2
 80033dc:	e200      	b.n	80037e0 <HAL_I2C_Mem_Read+0x458>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d007      	beq.n	8003404 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003412:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2222      	movs	r2, #34	@ 0x22
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2240      	movs	r2, #64	@ 0x40
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800342e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003434:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4a5b      	ldr	r2, [pc, #364]	@ (80035b0 <HAL_I2C_Mem_Read+0x228>)
 8003444:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003446:	88f8      	ldrh	r0, [r7, #6]
 8003448:	893a      	ldrh	r2, [r7, #8]
 800344a:	8979      	ldrh	r1, [r7, #10]
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	4603      	mov	r3, r0
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fa5e 	bl	8003918 <I2C_RequestMemoryRead>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e1bc      	b.n	80037e0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346a:	2b00      	cmp	r3, #0
 800346c:	d113      	bne.n	8003496 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	623b      	str	r3, [r7, #32]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	623b      	str	r3, [r7, #32]
 8003482:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e190      	b.n	80037b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349a:	2b01      	cmp	r3, #1
 800349c:	d11b      	bne.n	80034d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e170      	b.n	80037b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d11b      	bne.n	8003516 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034fe:	2300      	movs	r3, #0
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	e150      	b.n	80037b8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800352c:	e144      	b.n	80037b8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003532:	2b03      	cmp	r3, #3
 8003534:	f200 80f1 	bhi.w	800371a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353c:	2b01      	cmp	r3, #1
 800353e:	d123      	bne.n	8003588 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003542:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fc79 	bl	8003e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e145      	b.n	80037e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003586:	e117      	b.n	80037b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800358c:	2b02      	cmp	r3, #2
 800358e:	d14e      	bne.n	800362e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003596:	2200      	movs	r2, #0
 8003598:	4906      	ldr	r1, [pc, #24]	@ (80035b4 <HAL_I2C_Mem_Read+0x22c>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 faa4 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e11a      	b.n	80037e0 <HAL_I2C_Mem_Read+0x458>
 80035aa:	bf00      	nop
 80035ac:	00100002 	.word	0x00100002
 80035b0:	ffff0000 	.word	0xffff0000
 80035b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003616:	3b01      	subs	r3, #1
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800362c:	e0c4      	b.n	80037b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003634:	2200      	movs	r2, #0
 8003636:	496c      	ldr	r1, [pc, #432]	@ (80037e8 <HAL_I2C_Mem_Read+0x460>)
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fa55 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0cb      	b.n	80037e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003656:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691a      	ldr	r2, [r3, #16]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003690:	2200      	movs	r2, #0
 8003692:	4955      	ldr	r1, [pc, #340]	@ (80037e8 <HAL_I2C_Mem_Read+0x460>)
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fa27 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e09d      	b.n	80037e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003718:	e04e      	b.n	80037b8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fb8c 	bl	8003e3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e058      	b.n	80037e0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d124      	bne.n	80037b8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003772:	2b03      	cmp	r3, #3
 8003774:	d107      	bne.n	8003786 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003784:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691a      	ldr	r2, [r3, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f47f aeb6 	bne.w	800352e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3728      	adds	r7, #40	@ 0x28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	00010004 	.word	0x00010004

080037ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	4608      	mov	r0, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	461a      	mov	r2, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	817b      	strh	r3, [r7, #10]
 80037fe:	460b      	mov	r3, r1
 8003800:	813b      	strh	r3, [r7, #8]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003814:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	2200      	movs	r2, #0
 800381e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f960 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003838:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800383c:	d103      	bne.n	8003846 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003844:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e05f      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800384a:	897b      	ldrh	r3, [r7, #10]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003858:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	6a3a      	ldr	r2, [r7, #32]
 800385e:	492d      	ldr	r1, [pc, #180]	@ (8003914 <I2C_RequestMemoryWrite+0x128>)
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 f9bb 	bl	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e04c      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003888:	6a39      	ldr	r1, [r7, #32]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa46 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00d      	beq.n	80038b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	2b04      	cmp	r3, #4
 800389c:	d107      	bne.n	80038ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e02b      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d105      	bne.n	80038c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038b8:	893b      	ldrh	r3, [r7, #8]
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	611a      	str	r2, [r3, #16]
 80038c2:	e021      	b.n	8003908 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038c4:	893b      	ldrh	r3, [r7, #8]
 80038c6:	0a1b      	lsrs	r3, r3, #8
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d4:	6a39      	ldr	r1, [r7, #32]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa20 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00d      	beq.n	80038fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d107      	bne.n	80038fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e005      	b.n	800390a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038fe:	893b      	ldrh	r3, [r7, #8]
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	00010002 	.word	0x00010002

08003918 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	4608      	mov	r0, r1
 8003922:	4611      	mov	r1, r2
 8003924:	461a      	mov	r2, r3
 8003926:	4603      	mov	r3, r0
 8003928:	817b      	strh	r3, [r7, #10]
 800392a:	460b      	mov	r3, r1
 800392c:	813b      	strh	r3, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003940:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	2200      	movs	r2, #0
 800395a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f8c2 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00d      	beq.n	8003986 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003978:	d103      	bne.n	8003982 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e0aa      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003986:	897b      	ldrh	r3, [r7, #10]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	6a3a      	ldr	r2, [r7, #32]
 800399a:	4952      	ldr	r1, [pc, #328]	@ (8003ae4 <I2C_RequestMemoryRead+0x1cc>)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f91d 	bl	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e097      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c4:	6a39      	ldr	r1, [r7, #32]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f9a8 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d107      	bne.n	80039ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e076      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ee:	88fb      	ldrh	r3, [r7, #6]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d105      	bne.n	8003a00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	611a      	str	r2, [r3, #16]
 80039fe:	e021      	b.n	8003a44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a00:	893b      	ldrh	r3, [r7, #8]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	6a39      	ldr	r1, [r7, #32]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f982 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00d      	beq.n	8003a3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d107      	bne.n	8003a36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e050      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a3a:	893b      	ldrh	r3, [r7, #8]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a46:	6a39      	ldr	r1, [r7, #32]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f967 	bl	8003d1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d107      	bne.n	8003a6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e035      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f82b 	bl	8003ae8 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa6:	d103      	bne.n	8003ab0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e013      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ab4:	897b      	ldrh	r3, [r7, #10]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	6a3a      	ldr	r2, [r7, #32]
 8003ac8:	4906      	ldr	r1, [pc, #24]	@ (8003ae4 <I2C_RequestMemoryRead+0x1cc>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f886 	bl	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	00010002 	.word	0x00010002

08003ae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003af8:	e048      	b.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d044      	beq.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fe fdef 	bl	80026e4 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d139      	bne.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	0c1b      	lsrs	r3, r3, #16
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d10d      	bne.n	8003b3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	e00c      	b.n	8003b58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	43da      	mvns	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	461a      	mov	r2, r3
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d116      	bne.n	8003b8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	f043 0220 	orr.w	r2, r3, #32
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e023      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	0c1b      	lsrs	r3, r3, #16
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d10d      	bne.n	8003bb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	43da      	mvns	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	461a      	mov	r2, r3
 8003bb0:	e00c      	b.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	43da      	mvns	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	461a      	mov	r2, r3
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d093      	beq.n	8003afa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bea:	e071      	b.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bfa:	d123      	bne.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	f043 0204 	orr.w	r2, r3, #4
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e067      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d041      	beq.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4c:	f7fe fd4a 	bl	80026e4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d302      	bcc.n	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d136      	bne.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d10c      	bne.n	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	43da      	mvns	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4013      	ands	r3, r2
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bf14      	ite	ne
 8003c7e:	2301      	movne	r3, #1
 8003c80:	2300      	moveq	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	e00b      	b.n	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e021      	b.n	8003d14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d10c      	bne.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf14      	ite	ne
 8003cec:	2301      	movne	r3, #1
 8003cee:	2300      	moveq	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e00b      	b.n	8003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf14      	ite	ne
 8003d06:	2301      	movne	r3, #1
 8003d08:	2300      	moveq	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f47f af6d 	bne.w	8003bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d28:	e034      	b.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f8e3 	bl	8003ef6 <I2C_IsAcknowledgeFailed>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e034      	b.n	8003da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d028      	beq.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d42:	f7fe fccf 	bl	80026e4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d302      	bcc.n	8003d58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d11d      	bne.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d62:	2b80      	cmp	r3, #128	@ 0x80
 8003d64:	d016      	beq.n	8003d94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e007      	b.n	8003da4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9e:	2b80      	cmp	r3, #128	@ 0x80
 8003da0:	d1c3      	bne.n	8003d2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003db8:	e034      	b.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f89b 	bl	8003ef6 <I2C_IsAcknowledgeFailed>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e034      	b.n	8003e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d028      	beq.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd2:	f7fe fc87 	bl	80026e4 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d302      	bcc.n	8003de8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d11d      	bne.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b04      	cmp	r3, #4
 8003df4:	d016      	beq.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e007      	b.n	8003e34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d1c3      	bne.n	8003dba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e48:	e049      	b.n	8003ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	d119      	bne.n	8003e8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f06f 0210 	mvn.w	r2, #16
 8003e60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e030      	b.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7fe fc2a 	bl	80026e4 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d11d      	bne.n	8003ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d016      	beq.n	8003ede <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	f043 0220 	orr.w	r2, r3, #32
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e007      	b.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d1ae      	bne.n	8003e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f0c:	d11b      	bne.n	8003f46 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f16:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	f043 0204 	orr.w	r2, r3, #4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0bf      	b.n	80040e6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fd fe02 	bl	8001b84 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003f96:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6999      	ldr	r1, [r3, #24]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6899      	ldr	r1, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80040f0 <HAL_LTDC_Init+0x19c>)
 8003fc8:	400b      	ands	r3, r1
 8003fca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6899      	ldr	r1, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68d9      	ldr	r1, [r3, #12]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80040f0 <HAL_LTDC_Init+0x19c>)
 8003ff6:	400b      	ands	r3, r1
 8003ff8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68d9      	ldr	r1, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6919      	ldr	r1, [r3, #16]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b33      	ldr	r3, [pc, #204]	@ (80040f0 <HAL_LTDC_Init+0x19c>)
 8004024:	400b      	ands	r3, r1
 8004026:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6919      	ldr	r1, [r3, #16]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6959      	ldr	r1, [r3, #20]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b27      	ldr	r3, [pc, #156]	@ (80040f0 <HAL_LTDC_Init+0x19c>)
 8004052:	400b      	ands	r3, r1
 8004054:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	041b      	lsls	r3, r3, #16
 800405c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6959      	ldr	r1, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004084:	041b      	lsls	r3, r3, #16
 8004086:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004096:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0206 	orr.w	r2, r2, #6
 80040c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0201 	orr.w	r2, r2, #1
 80040d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	f000f800 	.word	0xf000f800

080040f4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040f4:	b5b0      	push	{r4, r5, r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_LTDC_ConfigLayer+0x1a>
 800410a:	2302      	movs	r3, #2
 800410c:	e02c      	b.n	8004168 <HAL_LTDC_ConfigLayer+0x74>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2202      	movs	r2, #2
 800411a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2134      	movs	r1, #52	@ 0x34
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	4413      	add	r3, r2
 800412a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	4614      	mov	r4, r2
 8004132:	461d      	mov	r5, r3
 8004134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800413a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800413c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800413e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 f811 	bl	8004170 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bdb0      	pop	{r4, r5, r7, pc}

08004170 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004170:	b480      	push	{r7}
 8004172:	b089      	sub	sp, #36	@ 0x24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	0c1b      	lsrs	r3, r3, #16
 8004188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418c:	4413      	add	r3, r2
 800418e:	041b      	lsls	r3, r3, #16
 8004190:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	01db      	lsls	r3, r3, #7
 800419c:	4413      	add	r3, r2
 800419e:	3384      	adds	r3, #132	@ 0x84
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	4611      	mov	r1, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	01d2      	lsls	r2, r2, #7
 80041ac:	440a      	add	r2, r1
 80041ae:	3284      	adds	r2, #132	@ 0x84
 80041b0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80041b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	0c1b      	lsrs	r3, r3, #16
 80041c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041c6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041c8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4619      	mov	r1, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	01db      	lsls	r3, r3, #7
 80041d4:	440b      	add	r3, r1
 80041d6:	3384      	adds	r3, #132	@ 0x84
 80041d8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041de:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ee:	4413      	add	r3, r2
 80041f0:	041b      	lsls	r3, r3, #16
 80041f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	4413      	add	r3, r2
 8004200:	3384      	adds	r3, #132	@ 0x84
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	4611      	mov	r1, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	01d2      	lsls	r2, r2, #7
 800420e:	440a      	add	r2, r1
 8004210:	3284      	adds	r2, #132	@ 0x84
 8004212:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004216:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004226:	4413      	add	r3, r2
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	01db      	lsls	r3, r3, #7
 8004234:	440b      	add	r3, r1
 8004236:	3384      	adds	r3, #132	@ 0x84
 8004238:	4619      	mov	r1, r3
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	01db      	lsls	r3, r3, #7
 800424a:	4413      	add	r3, r2
 800424c:	3384      	adds	r3, #132	@ 0x84
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	4611      	mov	r1, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	01d2      	lsls	r2, r2, #7
 800425a:	440a      	add	r2, r1
 800425c:	3284      	adds	r2, #132	@ 0x84
 800425e:	f023 0307 	bic.w	r3, r3, #7
 8004262:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	461a      	mov	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	01db      	lsls	r3, r3, #7
 800426e:	4413      	add	r3, r2
 8004270:	3384      	adds	r3, #132	@ 0x84
 8004272:	461a      	mov	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	061b      	lsls	r3, r3, #24
 8004294:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	01db      	lsls	r3, r3, #7
 80042a0:	4413      	add	r3, r2
 80042a2:	3384      	adds	r3, #132	@ 0x84
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	461a      	mov	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	01db      	lsls	r3, r3, #7
 80042b0:	4413      	add	r3, r2
 80042b2:	3384      	adds	r3, #132	@ 0x84
 80042b4:	461a      	mov	r2, r3
 80042b6:	2300      	movs	r3, #0
 80042b8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80042c0:	461a      	mov	r2, r3
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4619      	mov	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	01db      	lsls	r3, r3, #7
 80042d4:	440b      	add	r3, r1
 80042d6:	3384      	adds	r3, #132	@ 0x84
 80042d8:	4619      	mov	r1, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	01db      	lsls	r3, r3, #7
 80042ea:	4413      	add	r3, r2
 80042ec:	3384      	adds	r3, #132	@ 0x84
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	4611      	mov	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	01d2      	lsls	r2, r2, #7
 80042fa:	440a      	add	r2, r1
 80042fc:	3284      	adds	r2, #132	@ 0x84
 80042fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004302:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	01db      	lsls	r3, r3, #7
 800430e:	4413      	add	r3, r2
 8004310:	3384      	adds	r3, #132	@ 0x84
 8004312:	461a      	mov	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	01db      	lsls	r3, r3, #7
 8004324:	4413      	add	r3, r2
 8004326:	3384      	adds	r3, #132	@ 0x84
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	6812      	ldr	r2, [r2, #0]
 800432e:	4611      	mov	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	01d2      	lsls	r2, r2, #7
 8004334:	440a      	add	r2, r1
 8004336:	3284      	adds	r2, #132	@ 0x84
 8004338:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800433c:	f023 0307 	bic.w	r3, r3, #7
 8004340:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	69da      	ldr	r2, [r3, #28]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	6809      	ldr	r1, [r1, #0]
 800434e:	4608      	mov	r0, r1
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	01c9      	lsls	r1, r1, #7
 8004354:	4401      	add	r1, r0
 8004356:	3184      	adds	r1, #132	@ 0x84
 8004358:	4313      	orrs	r3, r2
 800435a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	01db      	lsls	r3, r3, #7
 8004366:	4413      	add	r3, r2
 8004368:	3384      	adds	r3, #132	@ 0x84
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	01db      	lsls	r3, r3, #7
 8004376:	4413      	add	r3, r2
 8004378:	3384      	adds	r3, #132	@ 0x84
 800437a:	461a      	mov	r2, r3
 800437c:	2300      	movs	r3, #0
 800437e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	01db      	lsls	r3, r3, #7
 800438a:	4413      	add	r3, r2
 800438c:	3384      	adds	r3, #132	@ 0x84
 800438e:	461a      	mov	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800439e:	2304      	movs	r3, #4
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	e01b      	b.n	80043dc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d102      	bne.n	80043b2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80043ac:	2303      	movs	r3, #3
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	e014      	b.n	80043dc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d00b      	beq.n	80043d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d007      	beq.n	80043d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80043c6:	2b03      	cmp	r3, #3
 80043c8:	d003      	beq.n	80043d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80043ce:	2b07      	cmp	r3, #7
 80043d0:	d102      	bne.n	80043d8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80043d2:	2302      	movs	r3, #2
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	e001      	b.n	80043dc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80043d8:	2301      	movs	r3, #1
 80043da:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	01db      	lsls	r3, r3, #7
 80043e6:	4413      	add	r3, r2
 80043e8:	3384      	adds	r3, #132	@ 0x84
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	4611      	mov	r1, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	01d2      	lsls	r2, r2, #7
 80043f6:	440a      	add	r2, r1
 80043f8:	3284      	adds	r2, #132	@ 0x84
 80043fa:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80043fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	fb02 f303 	mul.w	r3, r2, r3
 800440a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	6859      	ldr	r1, [r3, #4]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	1acb      	subs	r3, r1, r3
 8004416:	69f9      	ldr	r1, [r7, #28]
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	6809      	ldr	r1, [r1, #0]
 8004422:	4608      	mov	r0, r1
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	01c9      	lsls	r1, r1, #7
 8004428:	4401      	add	r1, r0
 800442a:	3184      	adds	r1, #132	@ 0x84
 800442c:	4313      	orrs	r3, r2
 800442e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	01db      	lsls	r3, r3, #7
 800443a:	4413      	add	r3, r2
 800443c:	3384      	adds	r3, #132	@ 0x84
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	4611      	mov	r1, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	01d2      	lsls	r2, r2, #7
 800444a:	440a      	add	r2, r1
 800444c:	3284      	adds	r2, #132	@ 0x84
 800444e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004452:	f023 0307 	bic.w	r3, r3, #7
 8004456:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	01db      	lsls	r3, r3, #7
 8004462:	4413      	add	r3, r2
 8004464:	3384      	adds	r3, #132	@ 0x84
 8004466:	461a      	mov	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	01db      	lsls	r3, r3, #7
 8004478:	4413      	add	r3, r2
 800447a:	3384      	adds	r3, #132	@ 0x84
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	4611      	mov	r1, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	01d2      	lsls	r2, r2, #7
 8004488:	440a      	add	r2, r1
 800448a:	3284      	adds	r2, #132	@ 0x84
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	6013      	str	r3, [r2, #0]
}
 8004492:	bf00      	nop
 8004494:	3724      	adds	r7, #36	@ 0x24
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e267      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d075      	beq.n	80045aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044be:	4b88      	ldr	r3, [pc, #544]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d00c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ca:	4b85      	ldr	r3, [pc, #532]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d112      	bne.n	80044fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d6:	4b82      	ldr	r3, [pc, #520]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044e2:	d10b      	bne.n	80044fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	4b7e      	ldr	r3, [pc, #504]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d05b      	beq.n	80045a8 <HAL_RCC_OscConfig+0x108>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d157      	bne.n	80045a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e242      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004504:	d106      	bne.n	8004514 <HAL_RCC_OscConfig+0x74>
 8004506:	4b76      	ldr	r3, [pc, #472]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a75      	ldr	r2, [pc, #468]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e01d      	b.n	8004550 <HAL_RCC_OscConfig+0xb0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800451c:	d10c      	bne.n	8004538 <HAL_RCC_OscConfig+0x98>
 800451e:	4b70      	ldr	r3, [pc, #448]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a6f      	ldr	r2, [pc, #444]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b6d      	ldr	r3, [pc, #436]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a6c      	ldr	r2, [pc, #432]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e00b      	b.n	8004550 <HAL_RCC_OscConfig+0xb0>
 8004538:	4b69      	ldr	r3, [pc, #420]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a68      	ldr	r2, [pc, #416]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800453e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4b66      	ldr	r3, [pc, #408]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a65      	ldr	r2, [pc, #404]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800454a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800454e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fe f8c4 	bl	80026e4 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004560:	f7fe f8c0 	bl	80026e4 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	@ 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e207      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	4b5b      	ldr	r3, [pc, #364]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0xc0>
 800457e:	e014      	b.n	80045aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fe f8b0 	bl	80026e4 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004588:	f7fe f8ac 	bl	80026e4 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	@ 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e1f3      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459a:	4b51      	ldr	r3, [pc, #324]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0xe8>
 80045a6:	e000      	b.n	80045aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d063      	beq.n	800467e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045b6:	4b4a      	ldr	r3, [pc, #296]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c2:	4b47      	ldr	r3, [pc, #284]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d11c      	bne.n	8004608 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ce:	4b44      	ldr	r3, [pc, #272]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d116      	bne.n	8004608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	4b41      	ldr	r3, [pc, #260]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_RCC_OscConfig+0x152>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d001      	beq.n	80045f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e1c7      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f2:	4b3b      	ldr	r3, [pc, #236]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4937      	ldr	r1, [pc, #220]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	e03a      	b.n	800467e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d020      	beq.n	8004652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004610:	4b34      	ldr	r3, [pc, #208]	@ (80046e4 <HAL_RCC_OscConfig+0x244>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7fe f865 	bl	80026e4 <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461e:	f7fe f861 	bl	80026e4 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e1a8      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004630:	4b2b      	ldr	r3, [pc, #172]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463c:	4b28      	ldr	r3, [pc, #160]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4925      	ldr	r1, [pc, #148]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]
 8004650:	e015      	b.n	800467e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004652:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <HAL_RCC_OscConfig+0x244>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fe f844 	bl	80026e4 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004660:	f7fe f840 	bl	80026e4 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e187      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	4b1b      	ldr	r3, [pc, #108]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d036      	beq.n	80046f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d016      	beq.n	80046c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004692:	4b15      	ldr	r3, [pc, #84]	@ (80046e8 <HAL_RCC_OscConfig+0x248>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fe f824 	bl	80026e4 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a0:	f7fe f820 	bl	80026e4 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e167      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b2:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80046b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x200>
 80046be:	e01b      	b.n	80046f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c0:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <HAL_RCC_OscConfig+0x248>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c6:	f7fe f80d 	bl	80026e4 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	e00e      	b.n	80046ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ce:	f7fe f809 	bl	80026e4 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d907      	bls.n	80046ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e150      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
 80046e0:	40023800 	.word	0x40023800
 80046e4:	42470000 	.word	0x42470000
 80046e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	4b88      	ldr	r3, [pc, #544]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80046ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ea      	bne.n	80046ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8097 	beq.w	8004834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470a:	4b81      	ldr	r3, [pc, #516]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	4b7d      	ldr	r3, [pc, #500]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	4a7c      	ldr	r2, [pc, #496]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004724:	6413      	str	r3, [r2, #64]	@ 0x40
 8004726:	4b7a      	ldr	r3, [pc, #488]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004736:	4b77      	ldr	r3, [pc, #476]	@ (8004914 <HAL_RCC_OscConfig+0x474>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d118      	bne.n	8004774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004742:	4b74      	ldr	r3, [pc, #464]	@ (8004914 <HAL_RCC_OscConfig+0x474>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a73      	ldr	r2, [pc, #460]	@ (8004914 <HAL_RCC_OscConfig+0x474>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474e:	f7fd ffc9 	bl	80026e4 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004756:	f7fd ffc5 	bl	80026e4 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e10c      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	4b6a      	ldr	r3, [pc, #424]	@ (8004914 <HAL_RCC_OscConfig+0x474>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x2ea>
 800477c:	4b64      	ldr	r3, [pc, #400]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004780:	4a63      	ldr	r2, [pc, #396]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6713      	str	r3, [r2, #112]	@ 0x70
 8004788:	e01c      	b.n	80047c4 <HAL_RCC_OscConfig+0x324>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b05      	cmp	r3, #5
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0x30c>
 8004792:	4b5f      	ldr	r3, [pc, #380]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004796:	4a5e      	ldr	r2, [pc, #376]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004798:	f043 0304 	orr.w	r3, r3, #4
 800479c:	6713      	str	r3, [r2, #112]	@ 0x70
 800479e:	4b5c      	ldr	r3, [pc, #368]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047aa:	e00b      	b.n	80047c4 <HAL_RCC_OscConfig+0x324>
 80047ac:	4b58      	ldr	r3, [pc, #352]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b0:	4a57      	ldr	r2, [pc, #348]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b8:	4b55      	ldr	r3, [pc, #340]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047bc:	4a54      	ldr	r2, [pc, #336]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047be:	f023 0304 	bic.w	r3, r3, #4
 80047c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d015      	beq.n	80047f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fd ff8a 	bl	80026e4 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fd ff86 	bl	80026e4 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0cb      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ea:	4b49      	ldr	r3, [pc, #292]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0ee      	beq.n	80047d4 <HAL_RCC_OscConfig+0x334>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f8:	f7fd ff74 	bl	80026e4 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004800:	f7fd ff70 	bl	80026e4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0b5      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004816:	4b3e      	ldr	r3, [pc, #248]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ee      	bne.n	8004800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004828:	4b39      	ldr	r3, [pc, #228]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	4a38      	ldr	r2, [pc, #224]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 800482e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004832:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a1 	beq.w	8004980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800483e:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b08      	cmp	r3, #8
 8004848:	d05c      	beq.n	8004904 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d141      	bne.n	80048d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004852:	4b31      	ldr	r3, [pc, #196]	@ (8004918 <HAL_RCC_OscConfig+0x478>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fd ff44 	bl	80026e4 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fd ff40 	bl	80026e4 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e087      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	4b27      	ldr	r3, [pc, #156]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	019b      	lsls	r3, r3, #6
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	3b01      	subs	r3, #1
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	491b      	ldr	r1, [pc, #108]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004918 <HAL_RCC_OscConfig+0x478>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fd ff19 	bl	80026e4 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b6:	f7fd ff15 	bl	80026e4 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e05c      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c8:	4b11      	ldr	r3, [pc, #68]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x416>
 80048d4:	e054      	b.n	8004980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b10      	ldr	r3, [pc, #64]	@ (8004918 <HAL_RCC_OscConfig+0x478>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fd ff02 	bl	80026e4 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fd fefe 	bl	80026e4 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e045      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x444>
 8004902:	e03d      	b.n	8004980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e038      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
 8004910:	40023800 	.word	0x40023800
 8004914:	40007000 	.word	0x40007000
 8004918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800491c:	4b1b      	ldr	r3, [pc, #108]	@ (800498c <HAL_RCC_OscConfig+0x4ec>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d028      	beq.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d121      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d11a      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800494c:	4013      	ands	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004954:	4293      	cmp	r3, r2
 8004956:	d111      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	3b01      	subs	r3, #1
 8004966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d107      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800

08004990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0cc      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a4:	4b68      	ldr	r3, [pc, #416]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 030f 	and.w	r3, r3, #15
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d90c      	bls.n	80049cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b65      	ldr	r3, [pc, #404]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b63      	ldr	r3, [pc, #396]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0b8      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e4:	4b59      	ldr	r3, [pc, #356]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	4a58      	ldr	r2, [pc, #352]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049fc:	4b53      	ldr	r3, [pc, #332]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4a52      	ldr	r2, [pc, #328]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a08:	4b50      	ldr	r3, [pc, #320]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	494d      	ldr	r1, [pc, #308]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d044      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	4b47      	ldr	r3, [pc, #284]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d119      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e07f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d003      	beq.n	8004a4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e06f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e067      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6e:	4b37      	ldr	r3, [pc, #220]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f023 0203 	bic.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4934      	ldr	r1, [pc, #208]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a80:	f7fd fe30 	bl	80026e4 <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a88:	f7fd fe2c 	bl	80026e4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e04f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 020c 	and.w	r2, r3, #12
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d1eb      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b25      	ldr	r3, [pc, #148]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d20c      	bcs.n	8004ad8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b22      	ldr	r3, [pc, #136]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	4b20      	ldr	r3, [pc, #128]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e032      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae4:	4b19      	ldr	r3, [pc, #100]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4916      	ldr	r1, [pc, #88]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b02:	4b12      	ldr	r3, [pc, #72]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	490e      	ldr	r1, [pc, #56]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b16:	f000 f821 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	490a      	ldr	r1, [pc, #40]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	5ccb      	ldrb	r3, [r1, r3]
 8004b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2e:	4a09      	ldr	r2, [pc, #36]	@ (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b32:	4b09      	ldr	r3, [pc, #36]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd fd90 	bl	800265c <HAL_InitTick>

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40023c00 	.word	0x40023c00
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	08006928 	.word	0x08006928
 8004b54:	20000010 	.word	0x20000010
 8004b58:	20000014 	.word	0x20000014

08004b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b60:	b094      	sub	sp, #80	@ 0x50
 8004b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b74:	4b79      	ldr	r3, [pc, #484]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d00d      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0x40>
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	f200 80e1 	bhi.w	8004d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x34>
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b8e:	e0db      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b90:	4b73      	ldr	r3, [pc, #460]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b94:	e0db      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b96:	4b73      	ldr	r3, [pc, #460]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b9a:	e0d8      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ba4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d063      	beq.n	8004c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	099b      	lsrs	r3, r3, #6
 8004bb8:	2200      	movs	r2, #0
 8004bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bce:	4622      	mov	r2, r4
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	0159      	lsls	r1, r3, #5
 8004bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be0:	0150      	lsls	r0, r2, #5
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4621      	mov	r1, r4
 8004be8:	1a51      	subs	r1, r2, r1
 8004bea:	6139      	str	r1, [r7, #16]
 8004bec:	4629      	mov	r1, r5
 8004bee:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c00:	4659      	mov	r1, fp
 8004c02:	018b      	lsls	r3, r1, #6
 8004c04:	4651      	mov	r1, sl
 8004c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	018a      	lsls	r2, r1, #6
 8004c0e:	4651      	mov	r1, sl
 8004c10:	ebb2 0801 	subs.w	r8, r2, r1
 8004c14:	4659      	mov	r1, fp
 8004c16:	eb63 0901 	sbc.w	r9, r3, r1
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c2e:	4690      	mov	r8, r2
 8004c30:	4699      	mov	r9, r3
 8004c32:	4623      	mov	r3, r4
 8004c34:	eb18 0303 	adds.w	r3, r8, r3
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	462b      	mov	r3, r5
 8004c3c:	eb49 0303 	adc.w	r3, r9, r3
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c4e:	4629      	mov	r1, r5
 8004c50:	024b      	lsls	r3, r1, #9
 8004c52:	4621      	mov	r1, r4
 8004c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c58:	4621      	mov	r1, r4
 8004c5a:	024a      	lsls	r2, r1, #9
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c62:	2200      	movs	r2, #0
 8004c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c6c:	f7fb fabe 	bl	80001ec <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4613      	mov	r3, r2
 8004c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c78:	e058      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c7a:	4b38      	ldr	r3, [pc, #224]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	099b      	lsrs	r3, r3, #6
 8004c80:	2200      	movs	r2, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	4611      	mov	r1, r2
 8004c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c94:	4642      	mov	r2, r8
 8004c96:	464b      	mov	r3, r9
 8004c98:	f04f 0000 	mov.w	r0, #0
 8004c9c:	f04f 0100 	mov.w	r1, #0
 8004ca0:	0159      	lsls	r1, r3, #5
 8004ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca6:	0150      	lsls	r0, r2, #5
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4641      	mov	r1, r8
 8004cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8004cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	00eb      	lsls	r3, r5, #3
 8004cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ce2:	00e2      	lsls	r2, r4, #3
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	461d      	mov	r5, r3
 8004ce8:	4643      	mov	r3, r8
 8004cea:	18e3      	adds	r3, r4, r3
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	464b      	mov	r3, r9
 8004cf0:	eb45 0303 	adc.w	r3, r5, r3
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d02:	4629      	mov	r1, r5
 8004d04:	028b      	lsls	r3, r1, #10
 8004d06:	4621      	mov	r1, r4
 8004d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	028a      	lsls	r2, r1, #10
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d16:	2200      	movs	r2, #0
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	61fa      	str	r2, [r7, #28]
 8004d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d20:	f7fb fa64 	bl	80001ec <__aeabi_uldivmod>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4613      	mov	r3, r2
 8004d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	0c1b      	lsrs	r3, r3, #16
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	3301      	adds	r3, #1
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d46:	e002      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3750      	adds	r7, #80	@ 0x50
 8004d54:	46bd      	mov	sp, r7
 8004d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	00f42400 	.word	0x00f42400
 8004d64:	007a1200 	.word	0x007a1200

08004d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d6c:	4b03      	ldr	r3, [pc, #12]	@ (8004d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20000010 	.word	0x20000010

08004d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d84:	f7ff fff0 	bl	8004d68 <HAL_RCC_GetHCLKFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	0a9b      	lsrs	r3, r3, #10
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	4903      	ldr	r1, [pc, #12]	@ (8004da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d96:	5ccb      	ldrb	r3, [r1, r3]
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40023800 	.word	0x40023800
 8004da4:	08006938 	.word	0x08006938

08004da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10b      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d075      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ddc:	4b91      	ldr	r3, [pc, #580]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004de2:	f7fd fc7f 	bl	80026e4 <HAL_GetTick>
 8004de6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004de8:	e008      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dea:	f7fd fc7b 	bl	80026e4 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e189      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dfc:	4b8a      	ldr	r3, [pc, #552]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f0      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d009      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	019a      	lsls	r2, r3, #6
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	071b      	lsls	r3, r3, #28
 8004e20:	4981      	ldr	r1, [pc, #516]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01f      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e34:	4b7c      	ldr	r3, [pc, #496]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e3a:	0f1b      	lsrs	r3, r3, #28
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	019a      	lsls	r2, r3, #6
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	061b      	lsls	r3, r3, #24
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	071b      	lsls	r3, r3, #28
 8004e54:	4974      	ldr	r1, [pc, #464]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e5c:	4b72      	ldr	r3, [pc, #456]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e62:	f023 021f 	bic.w	r2, r3, #31
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	496e      	ldr	r1, [pc, #440]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00d      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	019a      	lsls	r2, r3, #6
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	061b      	lsls	r3, r3, #24
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	071b      	lsls	r3, r3, #28
 8004e94:	4964      	ldr	r1, [pc, #400]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e9c:	4b61      	ldr	r3, [pc, #388]	@ (8005024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ea2:	f7fd fc1f 	bl	80026e4 <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004eaa:	f7fd fc1b 	bl	80026e4 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e129      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ebc:	4b5a      	ldr	r3, [pc, #360]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d105      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d079      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ee0:	4b52      	ldr	r3, [pc, #328]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ee6:	f7fd fbfd 	bl	80026e4 <HAL_GetTick>
 8004eea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004eec:	e008      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004eee:	f7fd fbf9 	bl	80026e4 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e107      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f00:	4b49      	ldr	r3, [pc, #292]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f0c:	d0ef      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d020      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f1a:	4b43      	ldr	r3, [pc, #268]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f20:	0f1b      	lsrs	r3, r3, #28
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	019a      	lsls	r2, r3, #6
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	431a      	orrs	r2, r3
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	071b      	lsls	r3, r3, #28
 8004f3a:	493b      	ldr	r1, [pc, #236]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f42:	4b39      	ldr	r3, [pc, #228]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f48:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	4934      	ldr	r1, [pc, #208]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01e      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f68:	4b2f      	ldr	r3, [pc, #188]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f6e:	0e1b      	lsrs	r3, r3, #24
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	019a      	lsls	r2, r3, #6
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	061b      	lsls	r3, r3, #24
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	071b      	lsls	r3, r3, #28
 8004f88:	4927      	ldr	r1, [pc, #156]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004f90:	4b25      	ldr	r3, [pc, #148]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f96:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	4922      	ldr	r1, [pc, #136]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004fa6:	4b21      	ldr	r3, [pc, #132]	@ (800502c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fac:	f7fd fb9a 	bl	80026e4 <HAL_GetTick>
 8004fb0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fb4:	f7fd fb96 	bl	80026e4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e0a4      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004fc6:	4b18      	ldr	r3, [pc, #96]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fd2:	d1ef      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 808b 	beq.w	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	4b10      	ldr	r3, [pc, #64]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	4a0f      	ldr	r2, [pc, #60]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8005028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a0b      	ldr	r2, [pc, #44]	@ (8005030 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005008:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800500a:	f7fd fb6b 	bl	80026e4 <HAL_GetTick>
 800500e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005010:	e010      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005012:	f7fd fb67 	bl	80026e4 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d909      	bls.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e075      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005024:	42470068 	.word	0x42470068
 8005028:	40023800 	.word	0x40023800
 800502c:	42470070 	.word	0x42470070
 8005030:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005034:	4b38      	ldr	r3, [pc, #224]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0e8      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005040:	4b36      	ldr	r3, [pc, #216]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005044:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005048:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d02f      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005054:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	429a      	cmp	r2, r3
 800505c:	d028      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800505e:	4b2f      	ldr	r3, [pc, #188]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005066:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005068:	4b2d      	ldr	r3, [pc, #180]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800506e:	4b2c      	ldr	r3, [pc, #176]	@ (8005120 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005074:	4a29      	ldr	r2, [pc, #164]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800507a:	4b28      	ldr	r3, [pc, #160]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b01      	cmp	r3, #1
 8005084:	d114      	bne.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005086:	f7fd fb2d 	bl	80026e4 <HAL_GetTick>
 800508a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508c:	e00a      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800508e:	f7fd fb29 	bl	80026e4 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509c:	4293      	cmp	r3, r2
 800509e:	d901      	bls.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e035      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a4:	4b1d      	ldr	r3, [pc, #116]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0ee      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050bc:	d10d      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x332>
 80050be:	4b17      	ldr	r3, [pc, #92]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80050ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d2:	4912      	ldr	r1, [pc, #72]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	608b      	str	r3, [r1, #8]
 80050d8:	e005      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80050da:	4b10      	ldr	r3, [pc, #64]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	4a0f      	ldr	r2, [pc, #60]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050e0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80050e4:	6093      	str	r3, [r2, #8]
 80050e6:	4b0d      	ldr	r3, [pc, #52]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f2:	490a      	ldr	r1, [pc, #40]	@ (800511c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b00      	cmp	r3, #0
 8005102:	d004      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800510a:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800510c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40007000 	.word	0x40007000
 800511c:	40023800 	.word	0x40023800
 8005120:	42470e40 	.word	0x42470e40
 8005124:	424711e0 	.word	0x424711e0

08005128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e07b      	b.n	8005232 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	d108      	bne.n	8005154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800514a:	d009      	beq.n	8005160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	61da      	str	r2, [r3, #28]
 8005152:	e005      	b.n	8005160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc fe2a 	bl	8001dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005196:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e4:	ea42 0103 	orr.w	r1, r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	f003 0104 	and.w	r1, r3, #4
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	f003 0210 	and.w	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e01a      	b.n	8005282 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005262:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7fc fdfd 	bl	8001e64 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b088      	sub	sp, #32
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800529a:	f7fd fa23 	bl	80026e4 <HAL_GetTick>
 800529e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d001      	beq.n	80052b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
 80052b2:	e12a      	b.n	800550a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_SPI_Transmit+0x36>
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e122      	b.n	800550a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_SPI_Transmit+0x48>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e11b      	b.n	800550a <HAL_SPI_Transmit+0x280>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2203      	movs	r2, #3
 80052de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	88fa      	ldrh	r2, [r7, #6]
 80052f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	88fa      	ldrh	r2, [r7, #6]
 80052f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005320:	d10f      	bne.n	8005342 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005330:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005340:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d007      	beq.n	8005360 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800535e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005368:	d152      	bne.n	8005410 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_SPI_Transmit+0xee>
 8005372:	8b7b      	ldrh	r3, [r7, #26]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d145      	bne.n	8005404 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537c:	881a      	ldrh	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005388:	1c9a      	adds	r2, r3, #2
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800539c:	e032      	b.n	8005404 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d112      	bne.n	80053d2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	881a      	ldrh	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053bc:	1c9a      	adds	r2, r3, #2
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053d0:	e018      	b.n	8005404 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053d2:	f7fd f987 	bl	80026e4 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d803      	bhi.n	80053ea <HAL_SPI_Transmit+0x160>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d102      	bne.n	80053f0 <HAL_SPI_Transmit+0x166>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e082      	b.n	800550a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1c7      	bne.n	800539e <HAL_SPI_Transmit+0x114>
 800540e:	e053      	b.n	80054b8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d002      	beq.n	800541e <HAL_SPI_Transmit+0x194>
 8005418:	8b7b      	ldrh	r3, [r7, #26]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d147      	bne.n	80054ae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	7812      	ldrb	r2, [r2, #0]
 800542a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005444:	e033      	b.n	80054ae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d113      	bne.n	800547c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	7812      	ldrb	r2, [r2, #0]
 8005460:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	86da      	strh	r2, [r3, #54]	@ 0x36
 800547a:	e018      	b.n	80054ae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800547c:	f7fd f932 	bl	80026e4 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	429a      	cmp	r2, r3
 800548a:	d803      	bhi.n	8005494 <HAL_SPI_Transmit+0x20a>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005492:	d102      	bne.n	800549a <HAL_SPI_Transmit+0x210>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e02d      	b.n	800550a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1c6      	bne.n	8005446 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f8bf 	bl	8005640 <SPI_EndRxTxTransaction>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054d6:	2300      	movs	r3, #0
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	617b      	str	r3, [r7, #20]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005508:	2300      	movs	r3, #0
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005520:	b2db      	uxtb	r3, r3
}
 8005522:	4618      	mov	r0, r3
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	4613      	mov	r3, r2
 800553e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005540:	f7fd f8d0 	bl	80026e4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005548:	1a9b      	subs	r3, r3, r2
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	4413      	add	r3, r2
 800554e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005550:	f7fd f8c8 	bl	80026e4 <HAL_GetTick>
 8005554:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005556:	4b39      	ldr	r3, [pc, #228]	@ (800563c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	015b      	lsls	r3, r3, #5
 800555c:	0d1b      	lsrs	r3, r3, #20
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	fb02 f303 	mul.w	r3, r2, r3
 8005564:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005566:	e054      	b.n	8005612 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556e:	d050      	beq.n	8005612 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005570:	f7fd f8b8 	bl	80026e4 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	429a      	cmp	r2, r3
 800557e:	d902      	bls.n	8005586 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d13d      	bne.n	8005602 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005594:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800559e:	d111      	bne.n	80055c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055a8:	d004      	beq.n	80055b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055b2:	d107      	bne.n	80055c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055cc:	d10f      	bne.n	80055ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055dc:	601a      	str	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e017      	b.n	8005632 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005608:	2300      	movs	r3, #0
 800560a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	3b01      	subs	r3, #1
 8005610:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	4013      	ands	r3, r2
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	429a      	cmp	r2, r3
 8005620:	bf0c      	ite	eq
 8005622:	2301      	moveq	r3, #1
 8005624:	2300      	movne	r3, #0
 8005626:	b2db      	uxtb	r3, r3
 8005628:	461a      	mov	r2, r3
 800562a:	79fb      	ldrb	r3, [r7, #7]
 800562c:	429a      	cmp	r2, r3
 800562e:	d19b      	bne.n	8005568 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000010 	.word	0x20000010

08005640 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	2201      	movs	r2, #1
 8005654:	2102      	movs	r1, #2
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f7ff ff6a 	bl	8005530 <SPI_WaitFlagStateUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005666:	f043 0220 	orr.w	r2, r3, #32
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e032      	b.n	80056d8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005672:	4b1b      	ldr	r3, [pc, #108]	@ (80056e0 <SPI_EndRxTxTransaction+0xa0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a1b      	ldr	r2, [pc, #108]	@ (80056e4 <SPI_EndRxTxTransaction+0xa4>)
 8005678:	fba2 2303 	umull	r2, r3, r2, r3
 800567c:	0d5b      	lsrs	r3, r3, #21
 800567e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005682:	fb02 f303 	mul.w	r3, r2, r3
 8005686:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005690:	d112      	bne.n	80056b8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2200      	movs	r2, #0
 800569a:	2180      	movs	r1, #128	@ 0x80
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff ff47 	bl	8005530 <SPI_WaitFlagStateUntilTimeout>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d016      	beq.n	80056d6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ac:	f043 0220 	orr.w	r2, r3, #32
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e00f      	b.n	80056d8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ce:	2b80      	cmp	r3, #128	@ 0x80
 80056d0:	d0f2      	beq.n	80056b8 <SPI_EndRxTxTransaction+0x78>
 80056d2:	e000      	b.n	80056d6 <SPI_EndRxTxTransaction+0x96>
        break;
 80056d4:	bf00      	nop
  }

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	20000010 	.word	0x20000010
 80056e4:	165e9f81 	.word	0x165e9f81

080056e8 <memset>:
 80056e8:	4402      	add	r2, r0
 80056ea:	4603      	mov	r3, r0
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d100      	bne.n	80056f2 <memset+0xa>
 80056f0:	4770      	bx	lr
 80056f2:	f803 1b01 	strb.w	r1, [r3], #1
 80056f6:	e7f9      	b.n	80056ec <memset+0x4>

080056f8 <__libc_init_array>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	4d0d      	ldr	r5, [pc, #52]	@ (8005730 <__libc_init_array+0x38>)
 80056fc:	4c0d      	ldr	r4, [pc, #52]	@ (8005734 <__libc_init_array+0x3c>)
 80056fe:	1b64      	subs	r4, r4, r5
 8005700:	10a4      	asrs	r4, r4, #2
 8005702:	2600      	movs	r6, #0
 8005704:	42a6      	cmp	r6, r4
 8005706:	d109      	bne.n	800571c <__libc_init_array+0x24>
 8005708:	4d0b      	ldr	r5, [pc, #44]	@ (8005738 <__libc_init_array+0x40>)
 800570a:	4c0c      	ldr	r4, [pc, #48]	@ (800573c <__libc_init_array+0x44>)
 800570c:	f000 f818 	bl	8005740 <_init>
 8005710:	1b64      	subs	r4, r4, r5
 8005712:	10a4      	asrs	r4, r4, #2
 8005714:	2600      	movs	r6, #0
 8005716:	42a6      	cmp	r6, r4
 8005718:	d105      	bne.n	8005726 <__libc_init_array+0x2e>
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005720:	4798      	blx	r3
 8005722:	3601      	adds	r6, #1
 8005724:	e7ee      	b.n	8005704 <__libc_init_array+0xc>
 8005726:	f855 3b04 	ldr.w	r3, [r5], #4
 800572a:	4798      	blx	r3
 800572c:	3601      	adds	r6, #1
 800572e:	e7f2      	b.n	8005716 <__libc_init_array+0x1e>
 8005730:	08006948 	.word	0x08006948
 8005734:	08006948 	.word	0x08006948
 8005738:	08006948 	.word	0x08006948
 800573c:	0800694c 	.word	0x0800694c

08005740 <_init>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	bf00      	nop
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr

0800574c <_fini>:
 800574c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574e:	bf00      	nop
 8005750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005752:	bc08      	pop	{r3}
 8005754:	469e      	mov	lr, r3
 8005756:	4770      	bx	lr
